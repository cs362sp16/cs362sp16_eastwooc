The bug that I fixed in my own code was also one identified in another classmate's code, and it's that sea hag doesn't check to see if there's actually a card in a player's deck before it tries to discard it.  If there is no card in the deck, then it would send the card deck[player][-1] to the discard, and the value of that is usually junk (on Windows it tends to be -842 thousand).

Finding this bug was quite the journey.  The first thing that I noticed was wrong was when my random tester would seg fault.  I was able to easily see what the seed for that game was (I was just going through all seeds from 1 to 500 for testing) and thus I could recreate the problem fairly early on, but I had no idea what the true cause was.  I could easily see that the seg fault was from trying to gain a card from supply pile -800 thousand something, but why would it ever be trying to do that?  So I decided to initialize all unused cards to -1.  Bam, no seg fault.  But a different problem arose.  At some point all players besides player 0 would just stop taking their turn.  So I used the debugger to inspect the gamestate, and I noticed that the number of players was set to 1 when it was originally set to 2 at the beginning of the game.  

Using the debugger, I set a data watchpoint on the numPlayers variable so it would break whenever that variable was modified.  Well it was being modified in gainCard because the supplyPos variable was -1.  I looked at the stack trace and figured out that it was Ambassador that was giving it the bogus parameter.  Huzzah!  Ambassador must be busted!  Except I read through the ambassador code like 50 times and couldn't find a problem with it.

So I decided to inspect the gamestate right before gainCard was called, and I noticed that player 0's hand looked something like this: [20, -1, 6, 3, 4, -1, -1, ...] with a hand count of 5.  Notice the -1 in the second position that is supposed to be a valid card?  Well player 0 was choosing to return that to the supply pile, which meant that all the other players are trying to gain the card -1.  Well great, that's not Ambassador's fault then.  Something before it must have messed up and put and invalid card in his deck.

So I wrote some code that makes sure that the number of cards in each player's hand, deck, and discard actually matches their card count.  That is, I would count all the cards up until the first -1 card and compare it to their card count that the game thinks they have, and I would check this for all players after any card was played or bought.  The debugger would break the moment it didn't match.

Well the debugger caught it instantly, and I saw in the output that the last played card was sea hag.  So I ran the test again, breaking just before sea hag was played and stepping through sea hag.  It was then that I was able to see the problem.  Sea hag tries to discard from the player's deck even when the player has 0 cards in their deck, and this was causing junk to be sent to the discard pile, which would come back into play later.

As for David Agans' rules, the most useful ones were "Make it Fail" and "Quit thinking and look".  Making it fail wasn't hard since the test is deterministic.  All I had to do was find which seed I was on and I could get the test to fail in like 20 steps.  Quit thinking and look was extremely relevant when the stack trace reveiled that the problem stemmed from a bad input from Ambassador.  For a while I was trying to figure out how Ambassador was messing up, but when I finally looked at the state I realized that it was doing fine, it's just that something else messed up the state before it and it didn't become noticeable to me until Ambassador tried to work with it.  Once I realized that I should find out where the state got messed up, the bug wasn't too hard to find.