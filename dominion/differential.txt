Quite frankly I couldn't get my tool to NOT produce a difference between me and a classmate's code.  I tried a few classmate's code, and a few of them just flat out wouldn't compile with my makefile.  For the ones that did, they almost always ran into an infinite loop.  My dominion.c originally did too, so I ended up fixing most of the bugs that cause it.  For the classmate's code that I tested, using seeds of 42 through 46 all ended in infinite loops (in which case I assume their code is wrong), and it took until I tried 47 as the seed to actually complete successfully.  Even when it finished the game, nearly all of the output was different (I only output who buys and plays which cards).  I can only assume that their code is incorrect so I didn't really learn anything about the correctness of my own code.  Doing a single run on their code gave 66% coverage, whereas a single run on my own code (with the same seed) gave only 60% coverage.  I can only assume that this is because I added a ton of error checking to prevent the infinite loops, and sometimes the tester just won't play the card due to bad input in my version whereas the other version would try to play it with bad input.

Since I'm pretty sure that my classmate's code isn't correct, I can't test the correctness of my own code.  This is why this isn't an ideal case for differential testing.  In an ideal case, their code would be guaranteed to be correct and I could find bugs in my own code.  Another good case would be if both versions were 99% correct, then in the rare case that they differ you know one of them (or both, but it's unlikely if they're both almost correct) has a bug that hasn't been fixed yet.  In my case, they always differ, so one or both of them has a ton of bugs.