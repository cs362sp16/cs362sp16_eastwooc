The first part of writing these random tests was figuring out how I'm going to generate random input.  I couldn't use truely random input everywhere as that would just cause the whole thing to crash with seg faults, so I had to try to generate reasonable random values for nearly everything in the game state.  I ended up writing a separate file called DominionRandomGenerator.c that has this code in it.  It will randomly generate the number of players, which kingdom cards are in play, how many of each card is left, how many cards each player has in their hand, deck, and discard, what each of their hands, decks, and discards contains, how many cards have been played and which cards specifically have been played, the current player, how many buys and actions the current player has, embargo tokens, and if you give it a card it will ensure that the given card is in the kingdom pile as well as give it to the current player in their hand.  The only thing that it doesn't do is outpost stuff, and the phase is always the action phase (because I wrote it to test card effect).

Once I wrote up that behemoth that generates random valid-looking input game states, testing wasn't terribly difficult.  I tested smithy, minion, and adventurer, and all 3 of them got 100% code coverage.  Of course, smithy is impossible to not get 100% coverage in.  Getting 100% coverage wasn't even very difficult, as the worst line out of all 3 tests would run in 32% of all tests, so I'm pretty likely to get 100% coverage with just 10 runs.  This is probably due to the efficiency of the giant input generator that I wrote.

Getting 100% coverage doesn't mean that the code is correct though.  I found a bug in adventurer where the hand count would be correct if there were no treasures in the deck or discard.  But after 5 runs, the bug wasn't detected but there was 100% coverage, because the case where there is exactly 1 treasure in the deck and discard happened to cover the  same statements, but it didn't have the same problem.  This just shows that coverage isn't perfect.  In the end, I ended up writing the tests to run 100000 times for each card.

Generally, the random testers would catch nearly changes I made to the code, which makes me confident in them.  The only thing that they don't test for is to make sure cards aren't randomly changing into other cards.  That would be extremely annoying to check for, but it is possible and would make my tests even better.  

Compared to unit testing, random testing seems much more thorough.  Although most of the cards/functions I'm testing are fairly short, random testing helps provide better coverage than unit testing and also finds bugs that unit testing might not find, like the adventurer bug I talked about earlier.  A unit test of the adventurer I wrote only got about 90% coverage because I didn't bother with the case that there wasn't any tresure cards.  I figured that you start off with 7 treasures in your deck, so when would you ever not have any?  Well the random tester doesn't care, and that allowed it to get to 100% coverage.