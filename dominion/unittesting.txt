Unit testing is a boring pain in the butt and it doesn't seem terribly effective based on the code coverage I was getting.  All 8 tests combined got me only 24% code coverage.  Some of the functions and cards have so many possible branches that it seems like it would be a huge waste of time to test all (or even most) of them by hand and that random testing would be better.  

Most of my time for each test was spent just trying to set up a valid game state so that I could run the test.  It might be worthwhile to see if I can write a function that generates a random valid game state (or at least valid-looking) and then test using that.  Despite this, 3 of my unit tests failed and after looking at the dominion source I determined that dominion was indeed behaving incorrectly.  If some quick unit tests that only give 24% coverage only have a success rate of 62.5%, then I worry how much incorrect behavior other testing methodologies will find, because my tests were mostly trivial.