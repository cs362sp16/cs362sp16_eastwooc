I chose to do mutation testing on my own highly modified dominion.c code and I tested using my own testdominion.c that I used for assignment 4.  I created about 3000 mutants of my dominion.c and compared their output to the original dominion.c code using 20 randomly played games (testdominion.c would loop 20 times).  Looping it 20 times would give me nearly 96% coverage of the original dominion.c.  The output of each game was simply which players played and bought which cards, and at the end I would output the number of cards left in each supply pile as well as how many cards each player had in their hand, deck, and discard when the game ended.

Since I had nearly complete coverage, I didn't bother checking to make sure each mutant was modifying covered code.  Therefore, some of the mutants modified code that was never executed and they would obviously be undetectable.  I also didn't check for equivalent mutants.  Originally I was going to, but it was difficult to check binaries to see if they're the same and executing 3000 mutants while checking them all against eachother was taking way too long.  

In the end I ended up with 2145 killed mutants and 644 not killed mutants, for a kill rate of 77%.  This isn't terribly surprising when I look at what the not killed mutants look like.  A ton of them just have constants that aren't used replaced (like return -2 instead of return -1), and a lot of them also were replacing cards that weren't in the player's hand (so a hand of [3,25, 6, -1, -1...] with a hand count of 3 would turn into [3, 25, 6, 0, 0, -1,...] but still with a hand count of 3).  Still though, I found some mutants that definitely should have been killed that weren't, and I feel like they might have if I ran each one more than 20 times.  One example was getting rid of the extra buy given by the salvager card.  The AI is programmed to try to buy multiple things, but if it never had money when it had the extra buy then it wouldn't make a difference.  Perhaps I should try to give the computer more incentive to buy multiple smaller value cards when it has more buys for better testing.

Overall, mutation testing is interesting because it can reveal flaws in a tester that you wrote when it makes a change that should obviously affect the game but doesn't.

