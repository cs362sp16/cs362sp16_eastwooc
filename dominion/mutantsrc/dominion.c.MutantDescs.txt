10: /* MUTANT (rep_op) */	if (*(int*)a <= *(int*)b)
10: /* MUTANT (rep_op) */	if (*(int*)a < *(int*)b)
10: /* MUTANT (rep_op) */	if (*(int*)a >= *(int*)b)
10: /* MUTANT (rep_op) */	if (*(int*)a == *(int*)b)
10: /* MUTANT (rep_op) */	if (*(int*)a != *(int*)b)
10: /* MUTANT (negate) */	if(! (*(int*)a > *(int*)b))
11: /* MUTANT (rep_const) */		return 0;
11: /* MUTANT (rep_const) */		return -1;
11: /* MUTANT (rep_const) */		return ((1)+1);
12: /* MUTANT (rep_op) */	if (*(int*)a <= *(int*)b)
12: /* MUTANT (rep_op) */	if (*(int*)a > *(int*)b)
12: /* MUTANT (rep_op) */	if (*(int*)a >= *(int*)b)
12: /* MUTANT (rep_op) */	if (*(int*)a == *(int*)b)
12: /* MUTANT (rep_op) */	if (*(int*)a != *(int*)b)
12: /* MUTANT (negate) */	if(! (*(int*)a < *(int*)b))
13: /* MUTANT (rep_const) */		return 0;
13: /* MUTANT (rep_const) */		return 1;
13: /* MUTANT (rep_const) */		return ((-1)+1);
13: /* MUTANT (rep_const) */		return ((-1)-1);
14: /* MUTANT (del_stmt) */ /* 	return 0; */ 
14: /* MUTANT (rep_const) */	return 1;
14: /* MUTANT (rep_const) */	return -1;
18: /* MUTANT (del_stmt) */ /* 	struct gameState* g = malloc(sizeof(struct gameState)); */ 
19: /* MUTANT (del_stmt) */ /* 	return g; */ 
24: /* MUTANT (del_stmt) */ /* 	int* k = malloc(10 * sizeof(int)); */ 
24: /* MUTANT (rep_const) */	int* k = malloc(0 * sizeof(int));
24: /* MUTANT (rep_const) */	int* k = malloc(1 * sizeof(int));
24: /* MUTANT (rep_const) */	int* k = malloc(-1 * sizeof(int));
24: /* MUTANT (rep_const) */	int* k = malloc(((10)+1) * sizeof(int));
24: /* MUTANT (rep_const) */	int* k = malloc(((10)-1) * sizeof(int));
25: /* MUTANT (del_stmt) */ /* 	k[0] = k1; */ 
25: /* MUTANT (rep_const) */	k[1] = k1;
25: /* MUTANT (rep_const) */	k[-1] = k1;
26: /* MUTANT (del_stmt) */ /* 	k[1] = k2; */ 
26: /* MUTANT (rep_const) */	k[0] = k2;
26: /* MUTANT (rep_const) */	k[-1] = k2;
26: /* MUTANT (rep_const) */	k[((1)+1)] = k2;
27: /* MUTANT (del_stmt) */ /* 	k[2] = k3; */ 
27: /* MUTANT (rep_const) */	k[0] = k3;
27: /* MUTANT (rep_const) */	k[1] = k3;
27: /* MUTANT (rep_const) */	k[-1] = k3;
27: /* MUTANT (rep_const) */	k[((2)+1)] = k3;
27: /* MUTANT (rep_const) */	k[((2)-1)] = k3;
28: /* MUTANT (del_stmt) */ /* 	k[3] = k4; */ 
28: /* MUTANT (rep_const) */	k[0] = k4;
28: /* MUTANT (rep_const) */	k[1] = k4;
28: /* MUTANT (rep_const) */	k[-1] = k4;
28: /* MUTANT (rep_const) */	k[((3)+1)] = k4;
28: /* MUTANT (rep_const) */	k[((3)-1)] = k4;
29: /* MUTANT (del_stmt) */ /* 	k[4] = k5; */ 
29: /* MUTANT (rep_const) */	k[0] = k5;
29: /* MUTANT (rep_const) */	k[1] = k5;
29: /* MUTANT (rep_const) */	k[-1] = k5;
29: /* MUTANT (rep_const) */	k[((4)+1)] = k5;
29: /* MUTANT (rep_const) */	k[((4)-1)] = k5;
30: /* MUTANT (del_stmt) */ /* 	k[5] = k6; */ 
30: /* MUTANT (rep_const) */	k[0] = k6;
30: /* MUTANT (rep_const) */	k[1] = k6;
30: /* MUTANT (rep_const) */	k[-1] = k6;
30: /* MUTANT (rep_const) */	k[((5)+1)] = k6;
30: /* MUTANT (rep_const) */	k[((5)-1)] = k6;
31: /* MUTANT (del_stmt) */ /* 	k[6] = k7; */ 
31: /* MUTANT (rep_const) */	k[0] = k7;
31: /* MUTANT (rep_const) */	k[1] = k7;
31: /* MUTANT (rep_const) */	k[-1] = k7;
31: /* MUTANT (rep_const) */	k[((6)+1)] = k7;
31: /* MUTANT (rep_const) */	k[((6)-1)] = k7;
32: /* MUTANT (del_stmt) */ /* 	k[7] = k8; */ 
32: /* MUTANT (rep_const) */	k[0] = k8;
32: /* MUTANT (rep_const) */	k[1] = k8;
32: /* MUTANT (rep_const) */	k[-1] = k8;
32: /* MUTANT (rep_const) */	k[((7)+1)] = k8;
32: /* MUTANT (rep_const) */	k[((7)-1)] = k8;
33: /* MUTANT (del_stmt) */ /* 	k[8] = k9; */ 
33: /* MUTANT (rep_const) */	k[0] = k9;
33: /* MUTANT (rep_const) */	k[1] = k9;
33: /* MUTANT (rep_const) */	k[-1] = k9;
33: /* MUTANT (rep_const) */	k[((8)+1)] = k9;
33: /* MUTANT (rep_const) */	k[((8)-1)] = k9;
34: /* MUTANT (del_stmt) */ /* 	k[9] = k10; */ 
34: /* MUTANT (rep_const) */	k[0] = k10;
34: /* MUTANT (rep_const) */	k[1] = k10;
34: /* MUTANT (rep_const) */	k[-1] = k10;
34: /* MUTANT (rep_const) */	k[((9)+1)] = k10;
34: /* MUTANT (rep_const) */	k[((9)-1)] = k10;
35: /* MUTANT (del_stmt) */ /* 	return k; */ 
38: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[0], int randomSeed,
38: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[1], int randomSeed,
38: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[-1], int randomSeed,
38: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[((10)+1)], int randomSeed,
38: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[((10)-1)], int randomSeed,
41: /* MUTANT (del_stmt) */ /* 	int i; */ 
42: /* MUTANT (del_stmt) */ /* 	int j; */ 
43: /* MUTANT (del_stmt) */ /* 	int it; */ 
45: /* MUTANT (del_stmt) */ /* 	SelectStream(1); */ 
45: /* MUTANT (rep_const) */	SelectStream(0);
45: /* MUTANT (rep_const) */	SelectStream(-1);
45: /* MUTANT (rep_const) */	SelectStream(((1)+1));
46: /* MUTANT (del_stmt) */ /* 	PutSeed((long)randomSeed); */ 
49: /* MUTANT (rep_op) */	if (numPlayers <= MAX_PLAYERS || numPlayers < 2)
49: /* MUTANT (rep_op) */	if (numPlayers < MAX_PLAYERS || numPlayers < 2)
49: /* MUTANT (rep_op) */	if (numPlayers >= MAX_PLAYERS || numPlayers < 2)
49: /* MUTANT (rep_op) */	if (numPlayers == MAX_PLAYERS || numPlayers < 2)
49: /* MUTANT (rep_op) */	if (numPlayers != MAX_PLAYERS || numPlayers < 2)
49: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS && numPlayers < 2)
49: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS || numPlayers <= 2)
49: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS || numPlayers > 2)
49: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS || numPlayers >= 2)
49: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS || numPlayers == 2)
49: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS || numPlayers != 2)
49: /* MUTANT (rep_const) */	if (numPlayers > MAX_PLAYERS || numPlayers < 0)
49: /* MUTANT (rep_const) */	if (numPlayers > MAX_PLAYERS || numPlayers < 1)
49: /* MUTANT (rep_const) */	if (numPlayers > MAX_PLAYERS || numPlayers < -1)
49: /* MUTANT (rep_const) */	if (numPlayers > MAX_PLAYERS || numPlayers < ((2)+1))
49: /* MUTANT (rep_const) */	if (numPlayers > MAX_PLAYERS || numPlayers < ((2)-1))
49: /* MUTANT (negate) */	if(! (numPlayers > MAX_PLAYERS || numPlayers < 2))
51: /* MUTANT (del_stmt) */ /* 		return -1; */ 
51: /* MUTANT (rep_const) */		return 0;
51: /* MUTANT (rep_const) */		return 1;
51: /* MUTANT (rep_const) */		return ((-1)+1);
51: /* MUTANT (rep_const) */		return ((-1)-1);
58: /* MUTANT (rep_op) */	for (i = 0; i <= 10; i++)
58: /* MUTANT (rep_op) */	for (i = 0; i > 10; i++)
58: /* MUTANT (rep_op) */	for (i = 0; i >= 10; i++)
58: /* MUTANT (rep_op) */	for (i = 0; i == 10; i++)
58: /* MUTANT (rep_op) */	for (i = 0; i != 10; i++)
58: /* MUTANT (rep_op) */	for (i = 0; i < 10; i--)
58: /* MUTANT (rep_const) */	for (i = 1; i < 10; i++)
58: /* MUTANT (rep_const) */	for (i = -1; i < 10; i++)
58: /* MUTANT (rep_const) */	for (i = 0; i < 0; i++)
58: /* MUTANT (rep_const) */	for (i = 0; i < 1; i++)
58: /* MUTANT (rep_const) */	for (i = 0; i < -1; i++)
58: /* MUTANT (rep_const) */	for (i = 0; i < ((10)+1); i++)
58: /* MUTANT (rep_const) */	for (i = 0; i < ((10)-1); i++)
60: /* MUTANT (rep_op) */		for (j = 0; j <= 10; j++)
60: /* MUTANT (rep_op) */		for (j = 0; j > 10; j++)
60: /* MUTANT (rep_op) */		for (j = 0; j >= 10; j++)
60: /* MUTANT (rep_op) */		for (j = 0; j == 10; j++)
60: /* MUTANT (rep_op) */		for (j = 0; j != 10; j++)
60: /* MUTANT (rep_op) */		for (j = 0; j < 10; j--)
60: /* MUTANT (rep_const) */		for (j = 1; j < 10; j++)
60: /* MUTANT (rep_const) */		for (j = -1; j < 10; j++)
60: /* MUTANT (rep_const) */		for (j = 0; j < 0; j++)
60: /* MUTANT (rep_const) */		for (j = 0; j < 1; j++)
60: /* MUTANT (rep_const) */		for (j = 0; j < -1; j++)
60: /* MUTANT (rep_const) */		for (j = 0; j < ((10)+1); j++)
60: /* MUTANT (rep_const) */		for (j = 0; j < ((10)-1); j++)
62: /* MUTANT (rep_op) */			if (j == i && kingdomCards[j] == kingdomCards[i])
62: /* MUTANT (rep_op) */			if (j != i || kingdomCards[j] == kingdomCards[i])
62: /* MUTANT (rep_op) */			if (j != i && kingdomCards[j] != kingdomCards[i])
62: /* MUTANT (negate) */			if(! (j != i && kingdomCards[j] == kingdomCards[i]))
64: /* MUTANT (del_stmt) */ /* 				return -1; */ 
64: /* MUTANT (rep_const) */				return 0;
64: /* MUTANT (rep_const) */				return 1;
64: /* MUTANT (rep_const) */				return ((-1)+1);
64: /* MUTANT (rep_const) */				return ((-1)-1);
74: /* MUTANT (rep_op) */	if (numPlayers != 2)
74: /* MUTANT (rep_const) */	if (numPlayers == 0)
74: /* MUTANT (rep_const) */	if (numPlayers == 1)
74: /* MUTANT (rep_const) */	if (numPlayers == -1)
74: /* MUTANT (rep_const) */	if (numPlayers == ((2)+1))
74: /* MUTANT (rep_const) */	if (numPlayers == ((2)-1))
74: /* MUTANT (negate) */	if(! (numPlayers == 2))
76: /* MUTANT (del_stmt) */ /* 		state->supplyCount[curse] = 10; */ 
76: /* MUTANT (rep_const) */		state->supplyCount[curse] = 0;
76: /* MUTANT (rep_const) */		state->supplyCount[curse] = 1;
76: /* MUTANT (rep_const) */		state->supplyCount[curse] = -1;
76: /* MUTANT (rep_const) */		state->supplyCount[curse] = ((10)+1);
76: /* MUTANT (rep_const) */		state->supplyCount[curse] = ((10)-1);
78: /* MUTANT (rep_op) */	else if (numPlayers != 3)
78: /* MUTANT (rep_const) */	else if (numPlayers == 0)
78: /* MUTANT (rep_const) */	else if (numPlayers == 1)
78: /* MUTANT (rep_const) */	else if (numPlayers == -1)
78: /* MUTANT (rep_const) */	else if (numPlayers == ((3)+1))
78: /* MUTANT (rep_const) */	else if (numPlayers == ((3)-1))
78: /* MUTANT (negate) */	else if(! (numPlayers == 3))
80: /* MUTANT (del_stmt) */ /* 		state->supplyCount[curse] = 20; */ 
80: /* MUTANT (rep_const) */		state->supplyCount[curse] = 0;
80: /* MUTANT (rep_const) */		state->supplyCount[curse] = 1;
80: /* MUTANT (rep_const) */		state->supplyCount[curse] = -1;
80: /* MUTANT (rep_const) */		state->supplyCount[curse] = ((20)+1);
80: /* MUTANT (rep_const) */		state->supplyCount[curse] = ((20)-1);
84: /* MUTANT (del_stmt) */ /* 		state->supplyCount[curse] = 30; */ 
84: /* MUTANT (rep_const) */		state->supplyCount[curse] = 0;
84: /* MUTANT (rep_const) */		state->supplyCount[curse] = 1;
84: /* MUTANT (rep_const) */		state->supplyCount[curse] = -1;
84: /* MUTANT (rep_const) */		state->supplyCount[curse] = ((30)+1);
84: /* MUTANT (rep_const) */		state->supplyCount[curse] = ((30)-1);
88: /* MUTANT (rep_op) */	if (numPlayers != 2)
88: /* MUTANT (rep_const) */	if (numPlayers == 0)
88: /* MUTANT (rep_const) */	if (numPlayers == 1)
88: /* MUTANT (rep_const) */	if (numPlayers == -1)
88: /* MUTANT (rep_const) */	if (numPlayers == ((2)+1))
88: /* MUTANT (rep_const) */	if (numPlayers == ((2)-1))
88: /* MUTANT (negate) */	if(! (numPlayers == 2))
90: /* MUTANT (del_stmt) */ /* 		state->supplyCount[estate] = 8; */ 
90: /* MUTANT (rep_const) */		state->supplyCount[estate] = 0;
90: /* MUTANT (rep_const) */		state->supplyCount[estate] = 1;
90: /* MUTANT (rep_const) */		state->supplyCount[estate] = -1;
90: /* MUTANT (rep_const) */		state->supplyCount[estate] = ((8)+1);
90: /* MUTANT (rep_const) */		state->supplyCount[estate] = ((8)-1);
91: /* MUTANT (del_stmt) */ /* 		state->supplyCount[duchy] = 8; */ 
91: /* MUTANT (rep_const) */		state->supplyCount[duchy] = 0;
91: /* MUTANT (rep_const) */		state->supplyCount[duchy] = 1;
91: /* MUTANT (rep_const) */		state->supplyCount[duchy] = -1;
91: /* MUTANT (rep_const) */		state->supplyCount[duchy] = ((8)+1);
91: /* MUTANT (rep_const) */		state->supplyCount[duchy] = ((8)-1);
92: /* MUTANT (del_stmt) */ /* 		state->supplyCount[province] = 8; */ 
92: /* MUTANT (rep_const) */		state->supplyCount[province] = 0;
92: /* MUTANT (rep_const) */		state->supplyCount[province] = 1;
92: /* MUTANT (rep_const) */		state->supplyCount[province] = -1;
92: /* MUTANT (rep_const) */		state->supplyCount[province] = ((8)+1);
92: /* MUTANT (rep_const) */		state->supplyCount[province] = ((8)-1);
96: /* MUTANT (del_stmt) */ /* 		state->supplyCount[estate] = 12; */ 
96: /* MUTANT (rep_const) */		state->supplyCount[estate] = 0;
96: /* MUTANT (rep_const) */		state->supplyCount[estate] = 1;
96: /* MUTANT (rep_const) */		state->supplyCount[estate] = -1;
96: /* MUTANT (rep_const) */		state->supplyCount[estate] = ((12)+1);
96: /* MUTANT (rep_const) */		state->supplyCount[estate] = ((12)-1);
97: /* MUTANT (del_stmt) */ /* 		state->supplyCount[duchy] = 12; */ 
97: /* MUTANT (rep_const) */		state->supplyCount[duchy] = 0;
97: /* MUTANT (rep_const) */		state->supplyCount[duchy] = 1;
97: /* MUTANT (rep_const) */		state->supplyCount[duchy] = -1;
97: /* MUTANT (rep_const) */		state->supplyCount[duchy] = ((12)+1);
97: /* MUTANT (rep_const) */		state->supplyCount[duchy] = ((12)-1);
98: /* MUTANT (del_stmt) */ /* 		state->supplyCount[province] = 12; */ 
98: /* MUTANT (rep_const) */		state->supplyCount[province] = 0;
98: /* MUTANT (rep_const) */		state->supplyCount[province] = 1;
98: /* MUTANT (rep_const) */		state->supplyCount[province] = -1;
98: /* MUTANT (rep_const) */		state->supplyCount[province] = ((12)+1);
98: /* MUTANT (rep_const) */		state->supplyCount[province] = ((12)-1);
102: /* MUTANT (rep_const) */	state->supplyCount[copper] = 0 - (7 * numPlayers);
102: /* MUTANT (rep_const) */	state->supplyCount[copper] = 1 - (7 * numPlayers);
102: /* MUTANT (rep_const) */	state->supplyCount[copper] = -1 - (7 * numPlayers);
102: /* MUTANT (rep_const) */	state->supplyCount[copper] = ((60)+1) - (7 * numPlayers);
102: /* MUTANT (rep_const) */	state->supplyCount[copper] = ((60)-1) - (7 * numPlayers);
102: /* MUTANT (rep_const) */	state->supplyCount[copper] = 60 - (0 * numPlayers);
102: /* MUTANT (rep_const) */	state->supplyCount[copper] = 60 - (1 * numPlayers);
102: /* MUTANT (rep_const) */	state->supplyCount[copper] = 60 - (-1 * numPlayers);
102: /* MUTANT (rep_const) */	state->supplyCount[copper] = 60 - (((7)+1) * numPlayers);
102: /* MUTANT (rep_const) */	state->supplyCount[copper] = 60 - (((7)-1) * numPlayers);
103: /* MUTANT (del_stmt) */ /* 	state->supplyCount[silver] = 40; */ 
103: /* MUTANT (rep_const) */	state->supplyCount[silver] = 0;
103: /* MUTANT (rep_const) */	state->supplyCount[silver] = 1;
103: /* MUTANT (rep_const) */	state->supplyCount[silver] = -1;
103: /* MUTANT (rep_const) */	state->supplyCount[silver] = ((40)+1);
103: /* MUTANT (rep_const) */	state->supplyCount[silver] = ((40)-1);
104: /* MUTANT (del_stmt) */ /* 	state->supplyCount[gold] = 30; */ 
104: /* MUTANT (rep_const) */	state->supplyCount[gold] = 0;
104: /* MUTANT (rep_const) */	state->supplyCount[gold] = 1;
104: /* MUTANT (rep_const) */	state->supplyCount[gold] = -1;
104: /* MUTANT (rep_const) */	state->supplyCount[gold] = ((30)+1);
104: /* MUTANT (rep_const) */	state->supplyCount[gold] = ((30)-1);
107: /* MUTANT (rep_op) */	for (i = adventurer; i < treasure_map; i++)          //loop all cards
107: /* MUTANT (rep_op) */	for (i = adventurer; i > treasure_map; i++)          //loop all cards
107: /* MUTANT (rep_op) */	for (i = adventurer; i >= treasure_map; i++)          //loop all cards
107: /* MUTANT (rep_op) */	for (i = adventurer; i == treasure_map; i++)          //loop all cards
107: /* MUTANT (rep_op) */	for (i = adventurer; i != treasure_map; i++)          //loop all cards
107: /* MUTANT (rep_op) */	for (i = adventurer; i <= treasure_map; i--)          //loop all cards
109: /* MUTANT (rep_op) */		for (j = 0; j <= 10; j++)                  //loop chosen cards
109: /* MUTANT (rep_op) */		for (j = 0; j > 10; j++)                  //loop chosen cards
109: /* MUTANT (rep_op) */		for (j = 0; j >= 10; j++)                  //loop chosen cards
109: /* MUTANT (rep_op) */		for (j = 0; j == 10; j++)                  //loop chosen cards
109: /* MUTANT (rep_op) */		for (j = 0; j != 10; j++)                  //loop chosen cards
109: /* MUTANT (rep_op) */		for (j = 0; j < 10; j--)                  //loop chosen cards
109: /* MUTANT (rep_const) */		for (j = 1; j < 10; j++)                  //loop chosen cards
109: /* MUTANT (rep_const) */		for (j = -1; j < 10; j++)                  //loop chosen cards
109: /* MUTANT (rep_const) */		for (j = 0; j < 0; j++)                  //loop chosen cards
109: /* MUTANT (rep_const) */		for (j = 0; j < 1; j++)                  //loop chosen cards
109: /* MUTANT (rep_const) */		for (j = 0; j < -1; j++)                  //loop chosen cards
109: /* MUTANT (rep_const) */		for (j = 0; j < ((10)+1); j++)                  //loop chosen cards
109: /* MUTANT (rep_const) */		for (j = 0; j < ((10)-1); j++)                  //loop chosen cards
111: /* MUTANT (rep_op) */			if (kingdomCards[j] != i)
111: /* MUTANT (negate) */			if(! (kingdomCards[j] == i))
114: /* MUTANT (rep_op) */				if (kingdomCards[j] != great_hall || kingdomCards[j] == gardens)
114: /* MUTANT (rep_op) */				if (kingdomCards[j] == great_hall && kingdomCards[j] == gardens)
114: /* MUTANT (rep_op) */				if (kingdomCards[j] == great_hall || kingdomCards[j] != gardens)
114: /* MUTANT (negate) */				if(! (kingdomCards[j] == great_hall || kingdomCards[j] == gardens))
116: /* MUTANT (rep_op) */					if (numPlayers != 2) {
116: /* MUTANT (rep_const) */					if (numPlayers == 0) {
116: /* MUTANT (rep_const) */					if (numPlayers == 1) {
116: /* MUTANT (rep_const) */					if (numPlayers == -1) {
116: /* MUTANT (rep_const) */					if (numPlayers == ((2)+1)) {
116: /* MUTANT (rep_const) */					if (numPlayers == ((2)-1)) {
116: /* MUTANT (negate) */					if(! (numPlayers == 2)) {
117: /* MUTANT (del_stmt) */ /* 						state->supplyCount[i] = 8; */ 
117: /* MUTANT (rep_const) */						state->supplyCount[i] = 0;
117: /* MUTANT (rep_const) */						state->supplyCount[i] = 1;
117: /* MUTANT (rep_const) */						state->supplyCount[i] = -1;
117: /* MUTANT (rep_const) */						state->supplyCount[i] = ((8)+1);
117: /* MUTANT (rep_const) */						state->supplyCount[i] = ((8)-1);
119: /* MUTANT (rep_const) */					else { state->supplyCount[i] = 0; }
119: /* MUTANT (rep_const) */					else { state->supplyCount[i] = 1; }
119: /* MUTANT (rep_const) */					else { state->supplyCount[i] = -1; }
119: /* MUTANT (rep_const) */					else { state->supplyCount[i] = ((12)+1); }
119: /* MUTANT (rep_const) */					else { state->supplyCount[i] = ((12)-1); }
123: /* MUTANT (del_stmt) */ /* 					state->supplyCount[i] = 10; */ 
123: /* MUTANT (rep_const) */					state->supplyCount[i] = 0;
123: /* MUTANT (rep_const) */					state->supplyCount[i] = 1;
123: /* MUTANT (rep_const) */					state->supplyCount[i] = -1;
123: /* MUTANT (rep_const) */					state->supplyCount[i] = ((10)+1);
123: /* MUTANT (rep_const) */					state->supplyCount[i] = ((10)-1);
129: /* MUTANT (del_stmt) */ /* 				state->supplyCount[i] = -1; */ 
129: /* MUTANT (rep_const) */				state->supplyCount[i] = 0;
129: /* MUTANT (rep_const) */				state->supplyCount[i] = 1;
129: /* MUTANT (rep_const) */				state->supplyCount[i] = ((-1)+1);
129: /* MUTANT (rep_const) */				state->supplyCount[i] = ((-1)-1);
139: /* MUTANT (rep_op) */	for (i = 0; i <= MAX_PLAYERS; i++) {
139: /* MUTANT (rep_op) */	for (i = 0; i > MAX_PLAYERS; i++) {
139: /* MUTANT (rep_op) */	for (i = 0; i >= MAX_PLAYERS; i++) {
139: /* MUTANT (rep_op) */	for (i = 0; i == MAX_PLAYERS; i++) {
139: /* MUTANT (rep_op) */	for (i = 0; i != MAX_PLAYERS; i++) {
139: /* MUTANT (rep_op) */	for (i = 0; i < MAX_PLAYERS; i--) {
139: /* MUTANT (rep_const) */	for (i = 1; i < MAX_PLAYERS; i++) {
139: /* MUTANT (rep_const) */	for (i = -1; i < MAX_PLAYERS; i++) {
140: /* MUTANT (del_stmt) */ /* 		memset(state->hand[i], -1, MAX_HAND); */ 
140: /* MUTANT (rep_const) */		memset(state->hand[i], 0, MAX_HAND);
140: /* MUTANT (rep_const) */		memset(state->hand[i], 1, MAX_HAND);
140: /* MUTANT (rep_const) */		memset(state->hand[i], ((-1)+1), MAX_HAND);
140: /* MUTANT (rep_const) */		memset(state->hand[i], ((-1)-1), MAX_HAND);
141: /* MUTANT (del_stmt) */ /* 		memset(state->deck[i], -1, MAX_DECK); */ 
141: /* MUTANT (rep_const) */		memset(state->deck[i], 0, MAX_DECK);
141: /* MUTANT (rep_const) */		memset(state->deck[i], 1, MAX_DECK);
141: /* MUTANT (rep_const) */		memset(state->deck[i], ((-1)+1), MAX_DECK);
141: /* MUTANT (rep_const) */		memset(state->deck[i], ((-1)-1), MAX_DECK);
142: /* MUTANT (del_stmt) */ /* 		memset(state->discard[i], -1, MAX_DECK); */ 
142: /* MUTANT (rep_const) */		memset(state->discard[i], 0, MAX_DECK);
142: /* MUTANT (rep_const) */		memset(state->discard[i], 1, MAX_DECK);
142: /* MUTANT (rep_const) */		memset(state->discard[i], ((-1)+1), MAX_DECK);
142: /* MUTANT (rep_const) */		memset(state->discard[i], ((-1)-1), MAX_DECK);
143: /* MUTANT (del_stmt) */ /* 		state->handCount[i] = 0; */ 
143: /* MUTANT (rep_const) */		state->handCount[i] = 1;
143: /* MUTANT (rep_const) */		state->handCount[i] = -1;
144: /* MUTANT (del_stmt) */ /* 		state->deckCount[i] = 0; */ 
144: /* MUTANT (rep_const) */		state->deckCount[i] = 1;
144: /* MUTANT (rep_const) */		state->deckCount[i] = -1;
145: /* MUTANT (del_stmt) */ /* 		state->discardCount[i] = 0; */ 
145: /* MUTANT (rep_const) */		state->discardCount[i] = 1;
145: /* MUTANT (rep_const) */		state->discardCount[i] = -1;
149: /* MUTANT (rep_op) */	for (i = 0; i <= numPlayers; i++)
149: /* MUTANT (rep_op) */	for (i = 0; i > numPlayers; i++)
149: /* MUTANT (rep_op) */	for (i = 0; i >= numPlayers; i++)
149: /* MUTANT (rep_op) */	for (i = 0; i == numPlayers; i++)
149: /* MUTANT (rep_op) */	for (i = 0; i != numPlayers; i++)
149: /* MUTANT (rep_op) */	for (i = 0; i < numPlayers; i--)
149: /* MUTANT (rep_const) */	for (i = 1; i < numPlayers; i++)
149: /* MUTANT (rep_const) */	for (i = -1; i < numPlayers; i++)
151: /* MUTANT (del_stmt) */ /* 		state->deckCount[i] = 0; */ 
151: /* MUTANT (rep_const) */		state->deckCount[i] = 1;
151: /* MUTANT (rep_const) */		state->deckCount[i] = -1;
152: /* MUTANT (rep_op) */		for (j = 0; j <= 3; j++)
152: /* MUTANT (rep_op) */		for (j = 0; j > 3; j++)
152: /* MUTANT (rep_op) */		for (j = 0; j >= 3; j++)
152: /* MUTANT (rep_op) */		for (j = 0; j == 3; j++)
152: /* MUTANT (rep_op) */		for (j = 0; j != 3; j++)
152: /* MUTANT (rep_op) */		for (j = 0; j < 3; j--)
152: /* MUTANT (rep_const) */		for (j = 1; j < 3; j++)
152: /* MUTANT (rep_const) */		for (j = -1; j < 3; j++)
152: /* MUTANT (rep_const) */		for (j = 0; j < 0; j++)
152: /* MUTANT (rep_const) */		for (j = 0; j < 1; j++)
152: /* MUTANT (rep_const) */		for (j = 0; j < -1; j++)
152: /* MUTANT (rep_const) */		for (j = 0; j < ((3)+1); j++)
152: /* MUTANT (rep_const) */		for (j = 0; j < ((3)-1); j++)
154: /* MUTANT (del_stmt) */ /* 			state->deck[i][j] = estate; */ 
155: /* MUTANT (del_stmt) */ /* 			state->deckCount[i]++; */ 
155: /* MUTANT (rep_op) */			state->deckCount[i]--;
157: /* MUTANT (rep_op) */		for (j = 3; j <= 10; j++)
157: /* MUTANT (rep_op) */		for (j = 3; j > 10; j++)
157: /* MUTANT (rep_op) */		for (j = 3; j >= 10; j++)
157: /* MUTANT (rep_op) */		for (j = 3; j == 10; j++)
157: /* MUTANT (rep_op) */		for (j = 3; j != 10; j++)
157: /* MUTANT (rep_op) */		for (j = 3; j < 10; j--)
157: /* MUTANT (rep_const) */		for (j = 0; j < 10; j++)
157: /* MUTANT (rep_const) */		for (j = 1; j < 10; j++)
157: /* MUTANT (rep_const) */		for (j = -1; j < 10; j++)
157: /* MUTANT (rep_const) */		for (j = ((3)+1); j < 10; j++)
157: /* MUTANT (rep_const) */		for (j = ((3)-1); j < 10; j++)
157: /* MUTANT (rep_const) */		for (j = 3; j < 0; j++)
157: /* MUTANT (rep_const) */		for (j = 3; j < 1; j++)
157: /* MUTANT (rep_const) */		for (j = 3; j < -1; j++)
157: /* MUTANT (rep_const) */		for (j = 3; j < ((10)+1); j++)
157: /* MUTANT (rep_const) */		for (j = 3; j < ((10)-1); j++)
159: /* MUTANT (del_stmt) */ /* 			state->deck[i][j] = copper; */ 
160: /* MUTANT (del_stmt) */ /* 			state->deckCount[i]++; */ 
160: /* MUTANT (rep_op) */			state->deckCount[i]--;
165: /* MUTANT (rep_op) */	for (i = 0; i <= numPlayers; i++)
165: /* MUTANT (rep_op) */	for (i = 0; i > numPlayers; i++)
165: /* MUTANT (rep_op) */	for (i = 0; i >= numPlayers; i++)
165: /* MUTANT (rep_op) */	for (i = 0; i == numPlayers; i++)
165: /* MUTANT (rep_op) */	for (i = 0; i != numPlayers; i++)
165: /* MUTANT (rep_op) */	for (i = 0; i < numPlayers; i--)
165: /* MUTANT (rep_const) */	for (i = 1; i < numPlayers; i++)
165: /* MUTANT (rep_const) */	for (i = -1; i < numPlayers; i++)
167: /* MUTANT (rep_op) */		if (shuffle(i, state) <= 0)
167: /* MUTANT (rep_op) */		if (shuffle(i, state) > 0)
167: /* MUTANT (rep_op) */		if (shuffle(i, state) >= 0)
167: /* MUTANT (rep_op) */		if (shuffle(i, state) == 0)
167: /* MUTANT (rep_op) */		if (shuffle(i, state) != 0)
167: /* MUTANT (rep_const) */		if (shuffle(i, state) < 1)
167: /* MUTANT (rep_const) */		if (shuffle(i, state) < -1)
167: /* MUTANT (negate) */		if(! (shuffle(i, state) < 0))
169: /* MUTANT (del_stmt) */ /* 			return -1; */ 
169: /* MUTANT (rep_const) */			return 0;
169: /* MUTANT (rep_const) */			return 1;
169: /* MUTANT (rep_const) */			return ((-1)+1);
169: /* MUTANT (rep_const) */			return ((-1)-1);
174: /* MUTANT (rep_op) */	for (i = 0; i <= numPlayers; i++)
174: /* MUTANT (rep_op) */	for (i = 0; i > numPlayers; i++)
174: /* MUTANT (rep_op) */	for (i = 0; i >= numPlayers; i++)
174: /* MUTANT (rep_op) */	for (i = 0; i == numPlayers; i++)
174: /* MUTANT (rep_op) */	for (i = 0; i != numPlayers; i++)
174: /* MUTANT (rep_op) */	for (i = 0; i < numPlayers; i--)
174: /* MUTANT (rep_const) */	for (i = 1; i < numPlayers; i++)
174: /* MUTANT (rep_const) */	for (i = -1; i < numPlayers; i++)
177: /* MUTANT (del_stmt) */ /* 		state->handCount[i] = 0; */ 
177: /* MUTANT (rep_const) */		state->handCount[i] = 1;
177: /* MUTANT (rep_const) */		state->handCount[i] = -1;
178: /* MUTANT (del_stmt) */ /* 		state->discardCount[i] = 0; */ 
178: /* MUTANT (rep_const) */		state->discardCount[i] = 1;
178: /* MUTANT (rep_const) */		state->discardCount[i] = -1;
182: /* MUTANT (rep_op) */	for (i = 0; i < treasure_map; i++)
182: /* MUTANT (rep_op) */	for (i = 0; i > treasure_map; i++)
182: /* MUTANT (rep_op) */	for (i = 0; i >= treasure_map; i++)
182: /* MUTANT (rep_op) */	for (i = 0; i == treasure_map; i++)
182: /* MUTANT (rep_op) */	for (i = 0; i != treasure_map; i++)
182: /* MUTANT (rep_op) */	for (i = 0; i <= treasure_map; i--)
182: /* MUTANT (rep_const) */	for (i = 1; i <= treasure_map; i++)
182: /* MUTANT (rep_const) */	for (i = -1; i <= treasure_map; i++)
184: /* MUTANT (del_stmt) */ /* 		state->embargoTokens[i] = 0; */ 
184: /* MUTANT (rep_const) */		state->embargoTokens[i] = 1;
184: /* MUTANT (rep_const) */		state->embargoTokens[i] = -1;
188: /* MUTANT (rep_const) */	state->outpostPlayed = 1;
188: /* MUTANT (rep_const) */	state->outpostPlayed = -1;
189: /* MUTANT (del_stmt) */ /* 	state->phase = 0; */ 
189: /* MUTANT (rep_const) */	state->phase = 1;
189: /* MUTANT (rep_const) */	state->phase = -1;
190: /* MUTANT (del_stmt) */ /* 	state->numActions = 1; */ 
190: /* MUTANT (rep_const) */	state->numActions = 0;
190: /* MUTANT (rep_const) */	state->numActions = -1;
190: /* MUTANT (rep_const) */	state->numActions = ((1)+1);
191: /* MUTANT (del_stmt) */ /* 	state->numBuys = 1; */ 
191: /* MUTANT (rep_const) */	state->numBuys = 0;
191: /* MUTANT (rep_const) */	state->numBuys = -1;
191: /* MUTANT (rep_const) */	state->numBuys = ((1)+1);
192: /* MUTANT (del_stmt) */ /* 	state->playedCardCount = 0; */ 
192: /* MUTANT (rep_const) */	state->playedCardCount = 1;
192: /* MUTANT (rep_const) */	state->playedCardCount = -1;
193: /* MUTANT (del_stmt) */ /* 	state->whoseTurn = 0; */ 
193: /* MUTANT (rep_const) */	state->whoseTurn = 1;
193: /* MUTANT (rep_const) */	state->whoseTurn = -1;
194: /* MUTANT (del_stmt) */ /* 	state->handCount[state->whoseTurn] = 0; */ 
194: /* MUTANT (rep_const) */	state->handCount[state->whoseTurn] = 1;
194: /* MUTANT (rep_const) */	state->handCount[state->whoseTurn] = -1;
197: /* MUTANT (rep_op) */	for (i = 0; i <= state->numPlayers; i++) {
197: /* MUTANT (rep_op) */	for (i = 0; i > state->numPlayers; i++) {
197: /* MUTANT (rep_op) */	for (i = 0; i >= state->numPlayers; i++) {
197: /* MUTANT (rep_op) */	for (i = 0; i == state->numPlayers; i++) {
197: /* MUTANT (rep_op) */	for (i = 0; i != state->numPlayers; i++) {
197: /* MUTANT (rep_op) */	for (i = 0; i < state->numPlayers; i--) {
197: /* MUTANT (rep_const) */	for (i = 1; i < state->numPlayers; i++) {
197: /* MUTANT (rep_const) */	for (i = -1; i < state->numPlayers; i++) {
198: /* MUTANT (rep_op) */		for (it = 0; it <= 5; it++) {
198: /* MUTANT (rep_op) */		for (it = 0; it > 5; it++) {
198: /* MUTANT (rep_op) */		for (it = 0; it >= 5; it++) {
198: /* MUTANT (rep_op) */		for (it = 0; it == 5; it++) {
198: /* MUTANT (rep_op) */		for (it = 0; it != 5; it++) {
198: /* MUTANT (rep_op) */		for (it = 0; it < 5; it--) {
198: /* MUTANT (rep_const) */		for (it = 1; it < 5; it++) {
198: /* MUTANT (rep_const) */		for (it = -1; it < 5; it++) {
198: /* MUTANT (rep_const) */		for (it = 0; it < 0; it++) {
198: /* MUTANT (rep_const) */		for (it = 0; it < 1; it++) {
198: /* MUTANT (rep_const) */		for (it = 0; it < -1; it++) {
198: /* MUTANT (rep_const) */		for (it = 0; it < ((5)+1); it++) {
198: /* MUTANT (rep_const) */		for (it = 0; it < ((5)-1); it++) {
199: /* MUTANT (del_stmt) */ /* 			drawCard(i, state); */ 
203: /* MUTANT (rep_const) */	updateCoins(state->whoseTurn, state, 1);
203: /* MUTANT (rep_const) */	updateCoins(state->whoseTurn, state, -1);
205: /* MUTANT (del_stmt) */ /* 	return 0; */ 
205: /* MUTANT (rep_const) */	return 1;
205: /* MUTANT (rep_const) */	return -1;
211: /* MUTANT (del_stmt) */ /* 	int newDeck[MAX_DECK]; */ 
212: /* MUTANT (del_stmt) */ /* 	int newDeckPos = 0; */ 
212: /* MUTANT (rep_const) */	int newDeckPos = 1;
212: /* MUTANT (rep_const) */	int newDeckPos = -1;
213: /* MUTANT (del_stmt) */ /* 	int card; */ 
214: /* MUTANT (del_stmt) */ /* 	int i; */ 
216: /* MUTANT (rep_op) */	if (state->deckCount[player] <= 1)
216: /* MUTANT (rep_op) */	if (state->deckCount[player] > 1)
216: /* MUTANT (rep_op) */	if (state->deckCount[player] >= 1)
216: /* MUTANT (rep_op) */	if (state->deckCount[player] == 1)
216: /* MUTANT (rep_op) */	if (state->deckCount[player] != 1)
216: /* MUTANT (rep_const) */	if (state->deckCount[player] < 0)
216: /* MUTANT (rep_const) */	if (state->deckCount[player] < -1)
216: /* MUTANT (rep_const) */	if (state->deckCount[player] < ((1)+1))
216: /* MUTANT (negate) */	if(! (state->deckCount[player] < 1))
217: /* MUTANT (rep_const) */		return 0;
217: /* MUTANT (rep_const) */		return 1;
217: /* MUTANT (rep_const) */		return ((-1)+1);
217: /* MUTANT (rep_const) */		return ((-1)-1);
218: /* MUTANT (del_stmt) */ /* 	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); */ 
221: /* MUTANT (rep_op) */	while (state->deckCount[player] <= 0) {
221: /* MUTANT (rep_op) */	while (state->deckCount[player] < 0) {
221: /* MUTANT (rep_op) */	while (state->deckCount[player] >= 0) {
221: /* MUTANT (rep_op) */	while (state->deckCount[player] == 0) {
221: /* MUTANT (rep_op) */	while (state->deckCount[player] != 0) {
221: /* MUTANT (rep_const) */	while (state->deckCount[player] > 1) {
221: /* MUTANT (rep_const) */	while (state->deckCount[player] > -1) {
221: /* MUTANT (negate) */	while(! (state->deckCount[player] > 0)) {
222: /* MUTANT (del_stmt) */ /* 		card = floor(Random() * state->deckCount[player]); */ 
223: /* MUTANT (del_stmt) */ /* 		newDeck[newDeckPos] = state->deck[player][card]; */ 
224: /* MUTANT (del_stmt) */ /* 		newDeckPos++; */ 
224: /* MUTANT (rep_op) */		newDeckPos--;
225: /* MUTANT (rep_op) */		for (i = card; i <= state->deckCount[player] - 1; i++) {
225: /* MUTANT (rep_op) */		for (i = card; i > state->deckCount[player] - 1; i++) {
225: /* MUTANT (rep_op) */		for (i = card; i >= state->deckCount[player] - 1; i++) {
225: /* MUTANT (rep_op) */		for (i = card; i == state->deckCount[player] - 1; i++) {
225: /* MUTANT (rep_op) */		for (i = card; i != state->deckCount[player] - 1; i++) {
225: /* MUTANT (rep_op) */		for (i = card; i < state->deckCount[player] - 1; i--) {
225: /* MUTANT (rep_const) */		for (i = card; i < state->deckCount[player] - 0; i++) {
225: /* MUTANT (rep_const) */		for (i = card; i < state->deckCount[player] - -1; i++) {
225: /* MUTANT (rep_const) */		for (i = card; i < state->deckCount[player] - ((1)+1); i++) {
226: /* MUTANT (del_stmt) */ /* 			state->deck[player][i] = state->deck[player][i + 1]; */ 
226: /* MUTANT (rep_op) */			state->deck[player][i] = state->deck[player][i - 1];
226: /* MUTANT (rep_op) */			state->deck[player][i] = state->deck[player][i * 1];
226: /* MUTANT (rep_op) */			state->deck[player][i] = state->deck[player][i % 1];
226: /* MUTANT (rep_const) */			state->deck[player][i] = state->deck[player][i + 0];
226: /* MUTANT (rep_const) */			state->deck[player][i] = state->deck[player][i + -1];
226: /* MUTANT (rep_const) */			state->deck[player][i] = state->deck[player][i + ((1)+1)];
228: /* MUTANT (rep_op) */		state->deckCount[player]++;
230: /* MUTANT (rep_op) */	for (i = 0; i <= newDeckPos; i++) {
230: /* MUTANT (rep_op) */	for (i = 0; i > newDeckPos; i++) {
230: /* MUTANT (rep_op) */	for (i = 0; i >= newDeckPos; i++) {
230: /* MUTANT (rep_op) */	for (i = 0; i == newDeckPos; i++) {
230: /* MUTANT (rep_op) */	for (i = 0; i != newDeckPos; i++) {
230: /* MUTANT (rep_op) */	for (i = 0; i < newDeckPos; i--) {
230: /* MUTANT (rep_const) */	for (i = 1; i < newDeckPos; i++) {
230: /* MUTANT (rep_const) */	for (i = -1; i < newDeckPos; i++) {
231: /* MUTANT (del_stmt) */ /* 		state->deck[player][i] = newDeck[i]; */ 
232: /* MUTANT (del_stmt) */ /* 		state->deckCount[player]++; */ 
232: /* MUTANT (rep_op) */		state->deckCount[player]--;
235: /* MUTANT (rep_const) */	return 1;
235: /* MUTANT (rep_const) */	return -1;
240: /* MUTANT (del_stmt) */ /* 	int who = state->whoseTurn; */ 
241: /* MUTANT (del_stmt) */ /* 	state->playedCards[state->playedCardCount] = state->hand[who][handPos]; */ 
242: /* MUTANT (del_stmt) */ /* 	state->playedCardCount++; */ 
242: /* MUTANT (rep_op) */	state->playedCardCount--;
245: /* MUTANT (rep_op) */	if (choice1 == NULL && *choice1 == state->handCount[who] - 1)
245: /* MUTANT (rep_op) */	if (choice1 != NULL || *choice1 == state->handCount[who] - 1)
245: /* MUTANT (rep_op) */	if (choice1 != NULL && *choice1 != state->handCount[who] - 1)
245: /* MUTANT (rep_const) */	if (choice1 != NULL && *choice1 == state->handCount[who] - 0)
245: /* MUTANT (rep_const) */	if (choice1 != NULL && *choice1 == state->handCount[who] - -1)
245: /* MUTANT (rep_const) */	if (choice1 != NULL && *choice1 == state->handCount[who] - ((1)+1))
245: /* MUTANT (negate) */	if(! (choice1 != NULL && *choice1 == state->handCount[who] - 1))
247: /* MUTANT (rep_op) */	if (choice2 == NULL && *choice2 == state->handCount[who] - 1)
247: /* MUTANT (rep_op) */	if (choice2 != NULL || *choice2 == state->handCount[who] - 1)
247: /* MUTANT (rep_op) */	if (choice2 != NULL && *choice2 != state->handCount[who] - 1)
247: /* MUTANT (rep_const) */	if (choice2 != NULL && *choice2 == state->handCount[who] - 0)
247: /* MUTANT (rep_const) */	if (choice2 != NULL && *choice2 == state->handCount[who] - -1)
247: /* MUTANT (rep_const) */	if (choice2 != NULL && *choice2 == state->handCount[who] - ((1)+1))
247: /* MUTANT (negate) */	if(! (choice2 != NULL && *choice2 == state->handCount[who] - 1))
250: /* MUTANT (del_stmt) */ /* 	state->hand[who][handPos] = state->hand[who][state->handCount[who] - 1]; */ 
250: /* MUTANT (rep_const) */	state->hand[who][handPos] = state->hand[who][state->handCount[who] - 0];
250: /* MUTANT (rep_const) */	state->hand[who][handPos] = state->hand[who][state->handCount[who] - -1];
250: /* MUTANT (rep_const) */	state->hand[who][handPos] = state->hand[who][state->handCount[who] - ((1)+1)];
251: /* MUTANT (del_stmt) */ /* 	state->hand[who][state->handCount[who] - 1] = -1; */ 
251: /* MUTANT (rep_const) */	state->hand[who][state->handCount[who] - 0] = -1;
251: /* MUTANT (rep_const) */	state->hand[who][state->handCount[who] - -1] = -1;
251: /* MUTANT (rep_const) */	state->hand[who][state->handCount[who] - ((1)+1)] = -1;
251: /* MUTANT (rep_const) */	state->hand[who][state->handCount[who] - 1] = 0;
251: /* MUTANT (rep_const) */	state->hand[who][state->handCount[who] - 1] = 1;
251: /* MUTANT (rep_const) */	state->hand[who][state->handCount[who] - 1] = ((-1)+1);
251: /* MUTANT (rep_const) */	state->hand[who][state->handCount[who] - 1] = ((-1)-1);
252: /* MUTANT (del_stmt) */ /* 	state->handCount[who]--; */ 
252: /* MUTANT (rep_op) */	state->handCount[who]++;
253: /* MUTANT (del_stmt) */ /* 	return 0; */ 
253: /* MUTANT (rep_const) */	return 1;
253: /* MUTANT (rep_const) */	return -1;
258: /* MUTANT (del_stmt) */ /* 	int who = state->whoseTurn; */ 
259: /* MUTANT (del_stmt) */ /* 	int i; */ 
260: /* MUTANT (rep_op) */	for (i = state->playedCardCount - 1; i <= 0; i--) {
260: /* MUTANT (rep_op) */	for (i = state->playedCardCount - 1; i < 0; i--) {
260: /* MUTANT (rep_op) */	for (i = state->playedCardCount - 1; i > 0; i--) {
260: /* MUTANT (rep_op) */	for (i = state->playedCardCount - 1; i == 0; i--) {
260: /* MUTANT (rep_op) */	for (i = state->playedCardCount - 1; i != 0; i--) {
260: /* MUTANT (rep_op) */	for (i = state->playedCardCount - 1; i >= 0; i++) {
260: /* MUTANT (rep_const) */	for (i = state->playedCardCount - 0; i >= 0; i--) {
260: /* MUTANT (rep_const) */	for (i = state->playedCardCount - -1; i >= 0; i--) {
260: /* MUTANT (rep_const) */	for (i = state->playedCardCount - ((1)+1); i >= 0; i--) {
260: /* MUTANT (rep_const) */	for (i = state->playedCardCount - 1; i >= 1; i--) {
260: /* MUTANT (rep_const) */	for (i = state->playedCardCount - 1; i >= -1; i--) {
261: /* MUTANT (rep_op) */		if (trashFlag != 0) {
261: /* MUTANT (rep_const) */		if (trashFlag == 1) {
261: /* MUTANT (rep_const) */		if (trashFlag == -1) {
261: /* MUTANT (negate) */		if(! (trashFlag == 0)) {
262: /* MUTANT (del_stmt) */ /* 			state->discard[who][state->discardCount[who]] = state->playedCards[i]; */ 
263: /* MUTANT (del_stmt) */ /* 			state->discardCount[who]++; */ 
263: /* MUTANT (rep_op) */			state->discardCount[who]--;
265: /* MUTANT (rep_const) */		state->playedCards[i] = 0;
265: /* MUTANT (rep_const) */		state->playedCards[i] = 1;
265: /* MUTANT (rep_const) */		state->playedCards[i] = ((-1)+1);
265: /* MUTANT (rep_const) */		state->playedCards[i] = ((-1)-1);
266: /* MUTANT (del_stmt) */ /* 		state->playedCardCount--; */ 
266: /* MUTANT (rep_op) */		state->playedCardCount++;
268: /* MUTANT (rep_const) */	return 1;
268: /* MUTANT (rep_const) */	return -1;
273: /* MUTANT (del_stmt) */ /* 	int card; */ 
274: /* MUTANT (del_stmt) */ /* 	int coin_bonus = 0; */        //tracks coins gain from actions
274: /* MUTANT (rep_const) */	int coin_bonus = 1;       //tracks coins gain from actions
274: /* MUTANT (rep_const) */	int coin_bonus = -1;       //tracks coins gain from actions
277: /* MUTANT (rep_op) */	if (state->phase == 0)
277: /* MUTANT (rep_const) */	if (state->phase != 1)
277: /* MUTANT (rep_const) */	if (state->phase != -1)
277: /* MUTANT (negate) */	if(! (state->phase != 0))
279: /* MUTANT (del_stmt) */ /* 		return -1; */ 
279: /* MUTANT (rep_const) */		return 0;
279: /* MUTANT (rep_const) */		return 1;
279: /* MUTANT (rep_const) */		return ((-1)+1);
279: /* MUTANT (rep_const) */		return ((-1)-1);
283: /* MUTANT (rep_op) */	if (state->numActions <= 1)
283: /* MUTANT (rep_op) */	if (state->numActions > 1)
283: /* MUTANT (rep_op) */	if (state->numActions >= 1)
283: /* MUTANT (rep_op) */	if (state->numActions == 1)
283: /* MUTANT (rep_op) */	if (state->numActions != 1)
283: /* MUTANT (rep_const) */	if (state->numActions < 0)
283: /* MUTANT (rep_const) */	if (state->numActions < -1)
283: /* MUTANT (rep_const) */	if (state->numActions < ((1)+1))
283: /* MUTANT (negate) */	if(! (state->numActions < 1))
285: /* MUTANT (del_stmt) */ /* 		return -1; */ 
285: /* MUTANT (rep_const) */		return 0;
285: /* MUTANT (rep_const) */		return 1;
285: /* MUTANT (rep_const) */		return ((-1)+1);
285: /* MUTANT (rep_const) */		return ((-1)-1);
288: /* MUTANT (rep_op) */	if (handPos <= state->handCount[state->whoseTurn]) {
288: /* MUTANT (rep_op) */	if (handPos < state->handCount[state->whoseTurn]) {
288: /* MUTANT (rep_op) */	if (handPos > state->handCount[state->whoseTurn]) {
288: /* MUTANT (rep_op) */	if (handPos == state->handCount[state->whoseTurn]) {
288: /* MUTANT (rep_op) */	if (handPos != state->handCount[state->whoseTurn]) {
288: /* MUTANT (negate) */	if(! (handPos >= state->handCount[state->whoseTurn])) {
289: /* MUTANT (del_stmt) */ /* 		return -1; */ 
289: /* MUTANT (rep_const) */		return 0;
289: /* MUTANT (rep_const) */		return 1;
289: /* MUTANT (rep_const) */		return ((-1)+1);
289: /* MUTANT (rep_const) */		return ((-1)-1);
296: /* MUTANT (rep_op) */	if (card <= adventurer || card > treasure_map)
296: /* MUTANT (rep_op) */	if (card > adventurer || card > treasure_map)
296: /* MUTANT (rep_op) */	if (card >= adventurer || card > treasure_map)
296: /* MUTANT (rep_op) */	if (card == adventurer || card > treasure_map)
296: /* MUTANT (rep_op) */	if (card != adventurer || card > treasure_map)
296: /* MUTANT (rep_op) */	if (card < adventurer && card > treasure_map)
296: /* MUTANT (rep_op) */	if (card < adventurer || card <= treasure_map)
296: /* MUTANT (rep_op) */	if (card < adventurer || card < treasure_map)
296: /* MUTANT (rep_op) */	if (card < adventurer || card >= treasure_map)
296: /* MUTANT (rep_op) */	if (card < adventurer || card == treasure_map)
296: /* MUTANT (rep_op) */	if (card < adventurer || card != treasure_map)
296: /* MUTANT (negate) */	if(! (card < adventurer || card > treasure_map))
298: /* MUTANT (del_stmt) */ /* 		return -1; */ 
298: /* MUTANT (rep_const) */		return 0;
298: /* MUTANT (rep_const) */		return 1;
298: /* MUTANT (rep_const) */		return ((-1)+1);
298: /* MUTANT (rep_const) */		return ((-1)-1);
302: /* MUTANT (rep_op) */	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) <= 0)
302: /* MUTANT (rep_op) */	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) > 0)
302: /* MUTANT (rep_op) */	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) >= 0)
302: /* MUTANT (rep_op) */	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) == 0)
302: /* MUTANT (rep_op) */	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) != 0)
302: /* MUTANT (rep_const) */	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 1)
302: /* MUTANT (rep_const) */	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < -1)
302: /* MUTANT (negate) */	if(! (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0))
304: /* MUTANT (del_stmt) */ /* 		return -1; */ 
304: /* MUTANT (rep_const) */		return 0;
304: /* MUTANT (rep_const) */		return 1;
304: /* MUTANT (rep_const) */		return ((-1)+1);
304: /* MUTANT (rep_const) */		return ((-1)-1);
308: /* MUTANT (rep_op) */	state->numActions++;
311: /* MUTANT (del_stmt) */ /* 	updateCoins(state->whoseTurn, state, coin_bonus); */ 
313: /* MUTANT (del_stmt) */ /* 	return 0; */ 
313: /* MUTANT (rep_const) */	return 1;
313: /* MUTANT (rep_const) */	return -1;
317: /* MUTANT (del_stmt) */ /* 	int who, i; */ 
318: /* MUTANT (negate) */	if(! (DEBUG)) {
319: /* MUTANT (del_stmt) */ /* 		printf("Entering buyCard...\n"); */ 
324: /* MUTANT (rep_op) */	if (state->numBuys <= 1) {
324: /* MUTANT (rep_op) */	if (state->numBuys > 1) {
324: /* MUTANT (rep_op) */	if (state->numBuys >= 1) {
324: /* MUTANT (rep_op) */	if (state->numBuys == 1) {
324: /* MUTANT (rep_op) */	if (state->numBuys != 1) {
324: /* MUTANT (rep_const) */	if (state->numBuys < 0) {
324: /* MUTANT (rep_const) */	if (state->numBuys < -1) {
324: /* MUTANT (rep_const) */	if (state->numBuys < ((1)+1)) {
324: /* MUTANT (negate) */	if(! (state->numBuys < 1)) {
325: /* MUTANT (negate) */		if(! (DEBUG))
327: /* MUTANT (del_stmt) */ /* 		return -1; */ 
327: /* MUTANT (rep_const) */		return 0;
327: /* MUTANT (rep_const) */		return 1;
327: /* MUTANT (rep_const) */		return ((-1)+1);
327: /* MUTANT (rep_const) */		return ((-1)-1);
329: /* MUTANT (rep_op) */	if (supplyPos <= curse || supplyPos > treasure_map) {
329: /* MUTANT (rep_op) */	if (supplyPos > curse || supplyPos > treasure_map) {
329: /* MUTANT (rep_op) */	if (supplyPos >= curse || supplyPos > treasure_map) {
329: /* MUTANT (rep_op) */	if (supplyPos == curse || supplyPos > treasure_map) {
329: /* MUTANT (rep_op) */	if (supplyPos != curse || supplyPos > treasure_map) {
329: /* MUTANT (rep_op) */	if (supplyPos < curse && supplyPos > treasure_map) {
329: /* MUTANT (rep_op) */	if (supplyPos < curse || supplyPos <= treasure_map) {
329: /* MUTANT (rep_op) */	if (supplyPos < curse || supplyPos < treasure_map) {
329: /* MUTANT (rep_op) */	if (supplyPos < curse || supplyPos >= treasure_map) {
329: /* MUTANT (rep_op) */	if (supplyPos < curse || supplyPos == treasure_map) {
329: /* MUTANT (rep_op) */	if (supplyPos < curse || supplyPos != treasure_map) {
329: /* MUTANT (negate) */	if(! (supplyPos < curse || supplyPos > treasure_map)) {
330: /* MUTANT (del_stmt) */ /* 		return -1; */ 
330: /* MUTANT (rep_const) */		return 0;
330: /* MUTANT (rep_const) */		return 1;
330: /* MUTANT (rep_const) */		return ((-1)+1);
330: /* MUTANT (rep_const) */		return ((-1)-1);
332: /* MUTANT (rep_op) */	if (supplyCount(supplyPos, state) <= 1) {
332: /* MUTANT (rep_op) */	if (supplyCount(supplyPos, state) > 1) {
332: /* MUTANT (rep_op) */	if (supplyCount(supplyPos, state) >= 1) {
332: /* MUTANT (rep_op) */	if (supplyCount(supplyPos, state) == 1) {
332: /* MUTANT (rep_op) */	if (supplyCount(supplyPos, state) != 1) {
332: /* MUTANT (rep_const) */	if (supplyCount(supplyPos, state) < 0) {
332: /* MUTANT (rep_const) */	if (supplyCount(supplyPos, state) < -1) {
332: /* MUTANT (rep_const) */	if (supplyCount(supplyPos, state) < ((1)+1)) {
332: /* MUTANT (negate) */	if(! (supplyCount(supplyPos, state) < 1)) {
333: /* MUTANT (negate) */		if(! (DEBUG))
335: /* MUTANT (del_stmt) */ /* 		return -1; */ 
335: /* MUTANT (rep_const) */		return 0;
335: /* MUTANT (rep_const) */		return 1;
335: /* MUTANT (rep_const) */		return ((-1)+1);
335: /* MUTANT (rep_const) */		return ((-1)-1);
337: /* MUTANT (rep_op) */	if (state->coins <= getCost(supplyPos)) {
337: /* MUTANT (rep_op) */	if (state->coins > getCost(supplyPos)) {
337: /* MUTANT (rep_op) */	if (state->coins >= getCost(supplyPos)) {
337: /* MUTANT (rep_op) */	if (state->coins == getCost(supplyPos)) {
337: /* MUTANT (rep_op) */	if (state->coins != getCost(supplyPos)) {
337: /* MUTANT (negate) */	if(! (state->coins < getCost(supplyPos))) {
338: /* MUTANT (negate) */		if(! (DEBUG))
340: /* MUTANT (del_stmt) */ /* 		return -1; */ 
340: /* MUTANT (rep_const) */		return 0;
340: /* MUTANT (rep_const) */		return 1;
340: /* MUTANT (rep_const) */		return ((-1)+1);
340: /* MUTANT (rep_const) */		return ((-1)-1);
343: /* MUTANT (rep_const) */	state->phase = 0;
343: /* MUTANT (rep_const) */	state->phase = -1;
343: /* MUTANT (rep_const) */	state->phase = ((1)+1);
344: /* MUTANT (del_stmt) */ /* 	gainCard(supplyPos, state, 0, who); */  
344: /* MUTANT (rep_const) */	gainCard(supplyPos, state, 1, who); 
344: /* MUTANT (rep_const) */	gainCard(supplyPos, state, -1, who); 
345: /* MUTANT (rep_op) */	for (i = 0; i <= state->embargoTokens[supplyPos]; i++)
345: /* MUTANT (rep_op) */	for (i = 0; i > state->embargoTokens[supplyPos]; i++)
345: /* MUTANT (rep_op) */	for (i = 0; i >= state->embargoTokens[supplyPos]; i++)
345: /* MUTANT (rep_op) */	for (i = 0; i == state->embargoTokens[supplyPos]; i++)
345: /* MUTANT (rep_op) */	for (i = 0; i != state->embargoTokens[supplyPos]; i++)
345: /* MUTANT (rep_op) */	for (i = 0; i < state->embargoTokens[supplyPos]; i--)
345: /* MUTANT (rep_const) */	for (i = 1; i < state->embargoTokens[supplyPos]; i++)
345: /* MUTANT (rep_const) */	for (i = -1; i < state->embargoTokens[supplyPos]; i++)
346: /* MUTANT (rep_const) */		gainCard(curse, state, 1, who);
346: /* MUTANT (rep_const) */		gainCard(curse, state, -1, who);
348: /* MUTANT (del_stmt) */ /* 	state->coins = (state->coins) - (getCost(supplyPos)); */ 
349: /* MUTANT (del_stmt) */ /* 	state->numBuys--; */ 
349: /* MUTANT (rep_op) */	state->numBuys++;
350: /* MUTANT (negate) */	if(! (DEBUG))
353: /* MUTANT (del_stmt) */ /* 	return 0; */ 
353: /* MUTANT (rep_const) */	return 1;
353: /* MUTANT (rep_const) */	return -1;
357: /* MUTANT (del_stmt) */ /* 	return state->handCount[whoseTurn(state)]; */ 
361: /* MUTANT (del_stmt) */ /* 	int currentPlayer = whoseTurn(state); */ 
362: /* MUTANT (del_stmt) */ /* 	return state->hand[currentPlayer][handPos]; */ 
366: /* MUTANT (del_stmt) */ /* 	return state->supplyCount[card]; */ 
370: /* MUTANT (del_stmt) */ /* 	int i; */ 
371: /* MUTANT (del_stmt) */ /* 	int count = 0; */ 
371: /* MUTANT (rep_const) */	int count = 1;
371: /* MUTANT (rep_const) */	int count = -1;
373: /* MUTANT (rep_op) */	for (i = 0; i <= state->deckCount[player]; i++)
373: /* MUTANT (rep_op) */	for (i = 0; i > state->deckCount[player]; i++)
373: /* MUTANT (rep_op) */	for (i = 0; i >= state->deckCount[player]; i++)
373: /* MUTANT (rep_op) */	for (i = 0; i == state->deckCount[player]; i++)
373: /* MUTANT (rep_op) */	for (i = 0; i != state->deckCount[player]; i++)
373: /* MUTANT (rep_op) */	for (i = 0; i < state->deckCount[player]; i--)
373: /* MUTANT (rep_const) */	for (i = 1; i < state->deckCount[player]; i++)
373: /* MUTANT (rep_const) */	for (i = -1; i < state->deckCount[player]; i++)
375: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == card) count++; */ 
375: /* MUTANT (rep_op) */		if (state->deck[player][i] != card) count++;
375: /* MUTANT (rep_op) */		if (state->deck[player][i] == card) count--;
375: /* MUTANT (negate) */		if(! (state->deck[player][i] == card)) count++;
378: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[player]; i++)
378: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[player]; i++)
378: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[player]; i++)
378: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[player]; i++)
378: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[player]; i++)
378: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[player]; i--)
378: /* MUTANT (rep_const) */	for (i = 1; i < state->handCount[player]; i++)
378: /* MUTANT (rep_const) */	for (i = -1; i < state->handCount[player]; i++)
380: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == card) count++; */ 
380: /* MUTANT (rep_op) */		if (state->hand[player][i] != card) count++;
380: /* MUTANT (rep_op) */		if (state->hand[player][i] == card) count--;
380: /* MUTANT (negate) */		if(! (state->hand[player][i] == card)) count++;
383: /* MUTANT (rep_op) */	for (i = 0; i <= state->discardCount[player]; i++)
383: /* MUTANT (rep_op) */	for (i = 0; i > state->discardCount[player]; i++)
383: /* MUTANT (rep_op) */	for (i = 0; i >= state->discardCount[player]; i++)
383: /* MUTANT (rep_op) */	for (i = 0; i == state->discardCount[player]; i++)
383: /* MUTANT (rep_op) */	for (i = 0; i != state->discardCount[player]; i++)
383: /* MUTANT (rep_op) */	for (i = 0; i < state->discardCount[player]; i--)
383: /* MUTANT (rep_const) */	for (i = 1; i < state->discardCount[player]; i++)
383: /* MUTANT (rep_const) */	for (i = -1; i < state->discardCount[player]; i++)
385: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == card) count++; */ 
385: /* MUTANT (rep_op) */		if (state->discard[player][i] != card) count++;
385: /* MUTANT (rep_op) */		if (state->discard[player][i] == card) count--;
385: /* MUTANT (negate) */		if(! (state->discard[player][i] == card)) count++;
392: /* MUTANT (del_stmt) */ /* 	return state->whoseTurn; */ 
396: /* MUTANT (del_stmt) */ /* 	int k; */ 
397: /* MUTANT (del_stmt) */ /* 	int i; */ 
398: /* MUTANT (del_stmt) */ /* 	int currentPlayer = whoseTurn(state); */ 
401: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[currentPlayer]; i++) {
401: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[currentPlayer]; i++) {
401: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[currentPlayer]; i++) {
401: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[currentPlayer]; i++) {
401: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[currentPlayer]; i++) {
401: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[currentPlayer]; i--) {
401: /* MUTANT (rep_const) */	for (i = 1; i < state->handCount[currentPlayer]; i++) {
401: /* MUTANT (rep_const) */	for (i = -1; i < state->handCount[currentPlayer]; i++) {
402: /* MUTANT (del_stmt) */ /* 		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; */ //Discard
402: /* MUTANT (rep_op) */		state->discard[currentPlayer][state->discardCount[currentPlayer]--] = state->hand[currentPlayer][i];//Discard
403: /* MUTANT (del_stmt) */ /* 		state->hand[currentPlayer][i] = -1; */ //Set card to -1
403: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = 0;//Set card to -1
403: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = 1;//Set card to -1
403: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = ((-1)+1);//Set card to -1
403: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = ((-1)-1);//Set card to -1
405: /* MUTANT (rep_const) */	state->handCount[currentPlayer] = 1;//Reset hand count
405: /* MUTANT (rep_const) */	state->handCount[currentPlayer] = -1;//Reset hand count
407: /* MUTANT (rep_op) */	if (state->outpostPlayed != 1) {
407: /* MUTANT (rep_const) */	if (state->outpostPlayed == 0) {
407: /* MUTANT (rep_const) */	if (state->outpostPlayed == -1) {
407: /* MUTANT (rep_const) */	if (state->outpostPlayed == ((1)+1)) {
407: /* MUTANT (negate) */	if(! (state->outpostPlayed == 1)) {
409: /* MUTANT (rep_op) */		for (k = 0; k <= 3; k++) {
409: /* MUTANT (rep_op) */		for (k = 0; k > 3; k++) {
409: /* MUTANT (rep_op) */		for (k = 0; k >= 3; k++) {
409: /* MUTANT (rep_op) */		for (k = 0; k == 3; k++) {
409: /* MUTANT (rep_op) */		for (k = 0; k != 3; k++) {
409: /* MUTANT (rep_op) */		for (k = 0; k < 3; k--) {
409: /* MUTANT (rep_const) */		for (k = 1; k < 3; k++) {
409: /* MUTANT (rep_const) */		for (k = -1; k < 3; k++) {
409: /* MUTANT (rep_const) */		for (k = 0; k < 0; k++) {
409: /* MUTANT (rep_const) */		for (k = 0; k < 1; k++) {
409: /* MUTANT (rep_const) */		for (k = 0; k < -1; k++) {
409: /* MUTANT (rep_const) */		for (k = 0; k < ((3)+1); k++) {
409: /* MUTANT (rep_const) */		for (k = 0; k < ((3)-1); k++) {
410: /* MUTANT (del_stmt) */ /* 			drawCard(state->whoseTurn, state); */ //Draw a card
412: /* MUTANT (rep_const) */		state->outpostTurn = 0;
412: /* MUTANT (rep_const) */		state->outpostTurn = -1;
412: /* MUTANT (rep_const) */		state->outpostTurn = ((1)+1);
416: /* MUTANT (rep_op) */		for (k = 0; k <= 5; k++) {
416: /* MUTANT (rep_op) */		for (k = 0; k > 5; k++) {
416: /* MUTANT (rep_op) */		for (k = 0; k >= 5; k++) {
416: /* MUTANT (rep_op) */		for (k = 0; k == 5; k++) {
416: /* MUTANT (rep_op) */		for (k = 0; k != 5; k++) {
416: /* MUTANT (rep_op) */		for (k = 0; k < 5; k--) {
416: /* MUTANT (rep_const) */		for (k = 1; k < 5; k++) {
416: /* MUTANT (rep_const) */		for (k = -1; k < 5; k++) {
416: /* MUTANT (rep_const) */		for (k = 0; k < 0; k++) {
416: /* MUTANT (rep_const) */		for (k = 0; k < 1; k++) {
416: /* MUTANT (rep_const) */		for (k = 0; k < -1; k++) {
416: /* MUTANT (rep_const) */		for (k = 0; k < ((5)+1); k++) {
416: /* MUTANT (rep_const) */		for (k = 0; k < ((5)-1); k++) {
417: /* MUTANT (del_stmt) */ /* 			drawCard(state->whoseTurn, state); */ //Draw a card
421: /* MUTANT (rep_op) */		if (currentPlayer <= (state->numPlayers - 1)) {
421: /* MUTANT (rep_op) */		if (currentPlayer > (state->numPlayers - 1)) {
421: /* MUTANT (rep_op) */		if (currentPlayer >= (state->numPlayers - 1)) {
421: /* MUTANT (rep_op) */		if (currentPlayer == (state->numPlayers - 1)) {
421: /* MUTANT (rep_op) */		if (currentPlayer != (state->numPlayers - 1)) {
421: /* MUTANT (rep_const) */		if (currentPlayer < (state->numPlayers - 0)) {
421: /* MUTANT (rep_const) */		if (currentPlayer < (state->numPlayers - -1)) {
421: /* MUTANT (rep_const) */		if (currentPlayer < (state->numPlayers - ((1)+1))) {
421: /* MUTANT (negate) */		if(! (currentPlayer < (state->numPlayers - 1))) {
422: /* MUTANT (del_stmt) */ /* 			state->whoseTurn = currentPlayer + 1; */ //Still safe to increment
422: /* MUTANT (rep_op) */			state->whoseTurn = currentPlayer - 1;//Still safe to increment
422: /* MUTANT (rep_op) */			state->whoseTurn = currentPlayer * 1;//Still safe to increment
422: /* MUTANT (rep_op) */			state->whoseTurn = currentPlayer % 1;//Still safe to increment
422: /* MUTANT (rep_const) */			state->whoseTurn = currentPlayer + 0;//Still safe to increment
422: /* MUTANT (rep_const) */			state->whoseTurn = currentPlayer + -1;//Still safe to increment
422: /* MUTANT (rep_const) */			state->whoseTurn = currentPlayer + ((1)+1);//Still safe to increment
425: /* MUTANT (del_stmt) */ /* 			state->whoseTurn = 0; */ //Max player has been reached, loop back around to player 1
425: /* MUTANT (rep_const) */			state->whoseTurn = 1;//Max player has been reached, loop back around to player 1
425: /* MUTANT (rep_const) */			state->whoseTurn = -1;//Max player has been reached, loop back around to player 1
427: /* MUTANT (rep_const) */		state->outpostTurn = 1;
427: /* MUTANT (rep_const) */		state->outpostTurn = -1;
428: /* MUTANT (del_stmt) */ /* 		endPlayed(state, 0); */  //needed to get rid of outpost on second turn
428: /* MUTANT (rep_const) */		endPlayed(state, 1); //needed to get rid of outpost on second turn
428: /* MUTANT (rep_const) */		endPlayed(state, -1); //needed to get rid of outpost on second turn
429: /* MUTANT (del_stmt) */ /* 		state->playedCardCount = 0; */ 
429: /* MUTANT (rep_const) */		state->playedCardCount = 1;
429: /* MUTANT (rep_const) */		state->playedCardCount = -1;
432: /* MUTANT (rep_const) */	state->outpostPlayed = 1;
432: /* MUTANT (rep_const) */	state->outpostPlayed = -1;
433: /* MUTANT (del_stmt) */ /* 	state->phase = 0; */ 
433: /* MUTANT (rep_const) */	state->phase = 1;
433: /* MUTANT (rep_const) */	state->phase = -1;
434: /* MUTANT (del_stmt) */ /* 	state->numActions = 1; */ 
434: /* MUTANT (rep_const) */	state->numActions = 0;
434: /* MUTANT (rep_const) */	state->numActions = -1;
434: /* MUTANT (rep_const) */	state->numActions = ((1)+1);
435: /* MUTANT (del_stmt) */ /* 	state->coins = 0; */ 
435: /* MUTANT (rep_const) */	state->coins = 1;
435: /* MUTANT (rep_const) */	state->coins = -1;
436: /* MUTANT (del_stmt) */ /* 	state->numBuys = 1; */ 
436: /* MUTANT (rep_const) */	state->numBuys = 0;
436: /* MUTANT (rep_const) */	state->numBuys = -1;
436: /* MUTANT (rep_const) */	state->numBuys = ((1)+1);
439: /* MUTANT (del_stmt) */ /* 	updateCoins(state->whoseTurn, state, 0); */ 
439: /* MUTANT (rep_const) */	updateCoins(state->whoseTurn, state, 1);
439: /* MUTANT (rep_const) */	updateCoins(state->whoseTurn, state, -1);
441: /* MUTANT (del_stmt) */ /* 	return 0; */ 
441: /* MUTANT (rep_const) */	return 1;
441: /* MUTANT (rep_const) */	return -1;
445: /* MUTANT (del_stmt) */ /* 	int i; */ 
446: /* MUTANT (del_stmt) */ /* 	int j; */ 
449: /* MUTANT (rep_op) */	if (state->supplyCount[province] != 0)
449: /* MUTANT (rep_const) */	if (state->supplyCount[province] == 1)
449: /* MUTANT (rep_const) */	if (state->supplyCount[province] == -1)
449: /* MUTANT (negate) */	if(! (state->supplyCount[province] == 0))
451: /* MUTANT (del_stmt) */ /* 		return 1; */ 
451: /* MUTANT (rep_const) */		return 0;
451: /* MUTANT (rep_const) */		return -1;
451: /* MUTANT (rep_const) */		return ((1)+1);
455: /* MUTANT (rep_const) */	j = 1;
455: /* MUTANT (rep_const) */	j = -1;
456: /* MUTANT (rep_op) */	for (i = 0; i <= 25; i++)
456: /* MUTANT (rep_op) */	for (i = 0; i > 25; i++)
456: /* MUTANT (rep_op) */	for (i = 0; i >= 25; i++)
456: /* MUTANT (rep_op) */	for (i = 0; i == 25; i++)
456: /* MUTANT (rep_op) */	for (i = 0; i != 25; i++)
456: /* MUTANT (rep_op) */	for (i = 0; i < 25; i--)
456: /* MUTANT (rep_const) */	for (i = 1; i < 25; i++)
456: /* MUTANT (rep_const) */	for (i = -1; i < 25; i++)
456: /* MUTANT (rep_const) */	for (i = 0; i < 0; i++)
456: /* MUTANT (rep_const) */	for (i = 0; i < 1; i++)
456: /* MUTANT (rep_const) */	for (i = 0; i < -1; i++)
456: /* MUTANT (rep_const) */	for (i = 0; i < ((25)+1); i++)
456: /* MUTANT (rep_const) */	for (i = 0; i < ((25)-1); i++)
458: /* MUTANT (rep_op) */		if (state->supplyCount[i] != 0)
458: /* MUTANT (rep_const) */		if (state->supplyCount[i] == 1)
458: /* MUTANT (rep_const) */		if (state->supplyCount[i] == -1)
458: /* MUTANT (negate) */		if(! (state->supplyCount[i] == 0))
460: /* MUTANT (del_stmt) */ /* 			j++; */ 
460: /* MUTANT (rep_op) */			j--;
463: /* MUTANT (rep_op) */	if (j <= 3)
463: /* MUTANT (rep_op) */	if (j < 3)
463: /* MUTANT (rep_op) */	if (j > 3)
463: /* MUTANT (rep_op) */	if (j == 3)
463: /* MUTANT (rep_op) */	if (j != 3)
463: /* MUTANT (rep_const) */	if (j >= 0)
463: /* MUTANT (rep_const) */	if (j >= 1)
463: /* MUTANT (rep_const) */	if (j >= -1)
463: /* MUTANT (rep_const) */	if (j >= ((3)+1))
463: /* MUTANT (rep_const) */	if (j >= ((3)-1))
463: /* MUTANT (negate) */	if(! (j >= 3))
465: /* MUTANT (del_stmt) */ /* 		return 1; */ 
465: /* MUTANT (rep_const) */		return 0;
465: /* MUTANT (rep_const) */		return -1;
465: /* MUTANT (rep_const) */		return ((1)+1);
468: /* MUTANT (rep_const) */	return 1;
468: /* MUTANT (rep_const) */	return -1;
473: /* MUTANT (del_stmt) */ /* 	int i; */ 
474: /* MUTANT (del_stmt) */ /* 	int score = 0; */ 
474: /* MUTANT (rep_const) */	int score = 1;
474: /* MUTANT (rep_const) */	int score = -1;
476: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[player]; i++)
476: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[player]; i++)
476: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[player]; i++)
476: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[player]; i++)
476: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[player]; i++)
476: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[player]; i--)
476: /* MUTANT (rep_const) */	for (i = 1; i < state->handCount[player]; i++)
476: /* MUTANT (rep_const) */	for (i = -1; i < state->handCount[player]; i++)
478: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == curse) { score = score - 1; */  };
478: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == curse) { score = score - 1; */  /*  }; */ 
478: /* MUTANT (del_stmt) */		if (state->hand[player][i] == curse) { score = score - 1; /*  }; */ 
478: /* MUTANT (rep_op) */		if (state->hand[player][i] != curse) { score = score - 1; };
478: /* MUTANT (rep_const) */		if (state->hand[player][i] == curse) { score = score - 0; };
478: /* MUTANT (rep_const) */		if (state->hand[player][i] == curse) { score = score - -1; };
478: /* MUTANT (rep_const) */		if (state->hand[player][i] == curse) { score = score - ((1)+1); };
478: /* MUTANT (negate) */		if(! (state->hand[player][i] == curse)) { score = score - 1; };
479: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == estate) { score = score + 1; */  };
479: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == estate) { score = score + 1; */  /*  }; */ 
479: /* MUTANT (del_stmt) */		if (state->hand[player][i] == estate) { score = score + 1; /*  }; */ 
479: /* MUTANT (rep_op) */		if (state->hand[player][i] != estate) { score = score + 1; };
479: /* MUTANT (rep_op) */		if (state->hand[player][i] == estate) { score = score - 1; };
479: /* MUTANT (rep_op) */		if (state->hand[player][i] == estate) { score = score * 1; };
479: /* MUTANT (rep_op) */		if (state->hand[player][i] == estate) { score = score % 1; };
479: /* MUTANT (rep_const) */		if (state->hand[player][i] == estate) { score = score + 0; };
479: /* MUTANT (rep_const) */		if (state->hand[player][i] == estate) { score = score + -1; };
479: /* MUTANT (rep_const) */		if (state->hand[player][i] == estate) { score = score + ((1)+1); };
479: /* MUTANT (negate) */		if(! (state->hand[player][i] == estate)) { score = score + 1; };
480: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == duchy) { score = score + 3; */  };
480: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == duchy) { score = score + 3; */  /*  }; */ 
480: /* MUTANT (del_stmt) */		if (state->hand[player][i] == duchy) { score = score + 3; /*  }; */ 
480: /* MUTANT (rep_op) */		if (state->hand[player][i] != duchy) { score = score + 3; };
480: /* MUTANT (rep_op) */		if (state->hand[player][i] == duchy) { score = score - 3; };
480: /* MUTANT (rep_op) */		if (state->hand[player][i] == duchy) { score = score * 3; };
480: /* MUTANT (rep_op) */		if (state->hand[player][i] == duchy) { score = score % 3; };
480: /* MUTANT (rep_const) */		if (state->hand[player][i] == duchy) { score = score + 0; };
480: /* MUTANT (rep_const) */		if (state->hand[player][i] == duchy) { score = score + 1; };
480: /* MUTANT (rep_const) */		if (state->hand[player][i] == duchy) { score = score + -1; };
480: /* MUTANT (rep_const) */		if (state->hand[player][i] == duchy) { score = score + ((3)+1); };
480: /* MUTANT (rep_const) */		if (state->hand[player][i] == duchy) { score = score + ((3)-1); };
480: /* MUTANT (negate) */		if(! (state->hand[player][i] == duchy)) { score = score + 3; };
481: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == province) { score = score + 6; */  };
481: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == province) { score = score + 6; */  /*  }; */ 
481: /* MUTANT (del_stmt) */		if (state->hand[player][i] == province) { score = score + 6; /*  }; */ 
481: /* MUTANT (rep_op) */		if (state->hand[player][i] != province) { score = score + 6; };
481: /* MUTANT (rep_op) */		if (state->hand[player][i] == province) { score = score - 6; };
481: /* MUTANT (rep_op) */		if (state->hand[player][i] == province) { score = score * 6; };
481: /* MUTANT (rep_op) */		if (state->hand[player][i] == province) { score = score % 6; };
481: /* MUTANT (rep_const) */		if (state->hand[player][i] == province) { score = score + 0; };
481: /* MUTANT (rep_const) */		if (state->hand[player][i] == province) { score = score + 1; };
481: /* MUTANT (rep_const) */		if (state->hand[player][i] == province) { score = score + -1; };
481: /* MUTANT (rep_const) */		if (state->hand[player][i] == province) { score = score + ((6)+1); };
481: /* MUTANT (rep_const) */		if (state->hand[player][i] == province) { score = score + ((6)-1); };
481: /* MUTANT (negate) */		if(! (state->hand[player][i] == province)) { score = score + 6; };
482: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == great_hall) { score = score + 1; */  };
482: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == great_hall) { score = score + 1; */  /*  }; */ 
482: /* MUTANT (del_stmt) */		if (state->hand[player][i] == great_hall) { score = score + 1; /*  }; */ 
482: /* MUTANT (rep_op) */		if (state->hand[player][i] != great_hall) { score = score + 1; };
482: /* MUTANT (rep_op) */		if (state->hand[player][i] == great_hall) { score = score - 1; };
482: /* MUTANT (rep_op) */		if (state->hand[player][i] == great_hall) { score = score * 1; };
482: /* MUTANT (rep_op) */		if (state->hand[player][i] == great_hall) { score = score % 1; };
482: /* MUTANT (rep_const) */		if (state->hand[player][i] == great_hall) { score = score + 0; };
482: /* MUTANT (rep_const) */		if (state->hand[player][i] == great_hall) { score = score + -1; };
482: /* MUTANT (rep_const) */		if (state->hand[player][i] == great_hall) { score = score + ((1)+1); };
482: /* MUTANT (negate) */		if(! (state->hand[player][i] == great_hall)) { score = score + 1; };
483: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); */  };
483: /* MUTANT (del_stmt) */ /* 		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); */  /*  }; */ 
483: /* MUTANT (del_stmt) */		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); /*  }; */ 
483: /* MUTANT (rep_op) */		if (state->hand[player][i] != gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
483: /* MUTANT (rep_op) */		if (state->hand[player][i] == gardens) { score = score - (fullDeckCount(player, 0, state) / 10); };
483: /* MUTANT (rep_op) */		if (state->hand[player][i] == gardens) { score = score * (fullDeckCount(player, 0, state) / 10); };
483: /* MUTANT (rep_op) */		if (state->hand[player][i] == gardens) { score = score % (fullDeckCount(player, 0, state) / 10); };
483: /* MUTANT (rep_const) */		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 1, state) / 10); };
483: /* MUTANT (rep_const) */		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, -1, state) / 10); };
483: /* MUTANT (rep_const) */		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 0); };
483: /* MUTANT (rep_const) */		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 1); };
483: /* MUTANT (rep_const) */		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / -1); };
483: /* MUTANT (rep_const) */		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / ((10)+1)); };
483: /* MUTANT (rep_const) */		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / ((10)-1)); };
483: /* MUTANT (negate) */		if(! (state->hand[player][i] == gardens)) { score = score + (fullDeckCount(player, 0, state) / 10); };
487: /* MUTANT (rep_op) */	for (i = 0; i <= state->discardCount[player]; i++)
487: /* MUTANT (rep_op) */	for (i = 0; i > state->discardCount[player]; i++)
487: /* MUTANT (rep_op) */	for (i = 0; i >= state->discardCount[player]; i++)
487: /* MUTANT (rep_op) */	for (i = 0; i == state->discardCount[player]; i++)
487: /* MUTANT (rep_op) */	for (i = 0; i != state->discardCount[player]; i++)
487: /* MUTANT (rep_op) */	for (i = 0; i < state->discardCount[player]; i--)
487: /* MUTANT (rep_const) */	for (i = 1; i < state->discardCount[player]; i++)
487: /* MUTANT (rep_const) */	for (i = -1; i < state->discardCount[player]; i++)
489: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == curse) { score = score - 1; */  };
489: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == curse) { score = score - 1; */  /*  }; */ 
489: /* MUTANT (del_stmt) */		if (state->discard[player][i] == curse) { score = score - 1; /*  }; */ 
489: /* MUTANT (rep_op) */		if (state->discard[player][i] != curse) { score = score - 1; };
489: /* MUTANT (rep_const) */		if (state->discard[player][i] == curse) { score = score - 0; };
489: /* MUTANT (rep_const) */		if (state->discard[player][i] == curse) { score = score - -1; };
489: /* MUTANT (rep_const) */		if (state->discard[player][i] == curse) { score = score - ((1)+1); };
489: /* MUTANT (negate) */		if(! (state->discard[player][i] == curse)) { score = score - 1; };
490: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == estate) { score = score + 1; */  };
490: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == estate) { score = score + 1; */  /*  }; */ 
490: /* MUTANT (del_stmt) */		if (state->discard[player][i] == estate) { score = score + 1; /*  }; */ 
490: /* MUTANT (rep_op) */		if (state->discard[player][i] != estate) { score = score + 1; };
490: /* MUTANT (rep_op) */		if (state->discard[player][i] == estate) { score = score - 1; };
490: /* MUTANT (rep_op) */		if (state->discard[player][i] == estate) { score = score * 1; };
490: /* MUTANT (rep_op) */		if (state->discard[player][i] == estate) { score = score % 1; };
490: /* MUTANT (rep_const) */		if (state->discard[player][i] == estate) { score = score + 0; };
490: /* MUTANT (rep_const) */		if (state->discard[player][i] == estate) { score = score + -1; };
490: /* MUTANT (rep_const) */		if (state->discard[player][i] == estate) { score = score + ((1)+1); };
490: /* MUTANT (negate) */		if(! (state->discard[player][i] == estate)) { score = score + 1; };
491: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == duchy) { score = score + 3; */  };
491: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == duchy) { score = score + 3; */  /*  }; */ 
491: /* MUTANT (del_stmt) */		if (state->discard[player][i] == duchy) { score = score + 3; /*  }; */ 
491: /* MUTANT (rep_op) */		if (state->discard[player][i] != duchy) { score = score + 3; };
491: /* MUTANT (rep_op) */		if (state->discard[player][i] == duchy) { score = score - 3; };
491: /* MUTANT (rep_op) */		if (state->discard[player][i] == duchy) { score = score * 3; };
491: /* MUTANT (rep_op) */		if (state->discard[player][i] == duchy) { score = score % 3; };
491: /* MUTANT (rep_const) */		if (state->discard[player][i] == duchy) { score = score + 0; };
491: /* MUTANT (rep_const) */		if (state->discard[player][i] == duchy) { score = score + 1; };
491: /* MUTANT (rep_const) */		if (state->discard[player][i] == duchy) { score = score + -1; };
491: /* MUTANT (rep_const) */		if (state->discard[player][i] == duchy) { score = score + ((3)+1); };
491: /* MUTANT (rep_const) */		if (state->discard[player][i] == duchy) { score = score + ((3)-1); };
491: /* MUTANT (negate) */		if(! (state->discard[player][i] == duchy)) { score = score + 3; };
492: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == province) { score = score + 6; */  };
492: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == province) { score = score + 6; */  /*  }; */ 
492: /* MUTANT (del_stmt) */		if (state->discard[player][i] == province) { score = score + 6; /*  }; */ 
492: /* MUTANT (rep_op) */		if (state->discard[player][i] != province) { score = score + 6; };
492: /* MUTANT (rep_op) */		if (state->discard[player][i] == province) { score = score - 6; };
492: /* MUTANT (rep_op) */		if (state->discard[player][i] == province) { score = score * 6; };
492: /* MUTANT (rep_op) */		if (state->discard[player][i] == province) { score = score % 6; };
492: /* MUTANT (rep_const) */		if (state->discard[player][i] == province) { score = score + 0; };
492: /* MUTANT (rep_const) */		if (state->discard[player][i] == province) { score = score + 1; };
492: /* MUTANT (rep_const) */		if (state->discard[player][i] == province) { score = score + -1; };
492: /* MUTANT (rep_const) */		if (state->discard[player][i] == province) { score = score + ((6)+1); };
492: /* MUTANT (rep_const) */		if (state->discard[player][i] == province) { score = score + ((6)-1); };
492: /* MUTANT (negate) */		if(! (state->discard[player][i] == province)) { score = score + 6; };
493: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == great_hall) { score = score + 1; */  };
493: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == great_hall) { score = score + 1; */  /*  }; */ 
493: /* MUTANT (del_stmt) */		if (state->discard[player][i] == great_hall) { score = score + 1; /*  }; */ 
493: /* MUTANT (rep_op) */		if (state->discard[player][i] != great_hall) { score = score + 1; };
493: /* MUTANT (rep_op) */		if (state->discard[player][i] == great_hall) { score = score - 1; };
493: /* MUTANT (rep_op) */		if (state->discard[player][i] == great_hall) { score = score * 1; };
493: /* MUTANT (rep_op) */		if (state->discard[player][i] == great_hall) { score = score % 1; };
493: /* MUTANT (rep_const) */		if (state->discard[player][i] == great_hall) { score = score + 0; };
493: /* MUTANT (rep_const) */		if (state->discard[player][i] == great_hall) { score = score + -1; };
493: /* MUTANT (rep_const) */		if (state->discard[player][i] == great_hall) { score = score + ((1)+1); };
493: /* MUTANT (negate) */		if(! (state->discard[player][i] == great_hall)) { score = score + 1; };
494: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); */  };
494: /* MUTANT (del_stmt) */ /* 		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); */  /*  }; */ 
494: /* MUTANT (del_stmt) */		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); /*  }; */ 
494: /* MUTANT (rep_op) */		if (state->discard[player][i] != gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
494: /* MUTANT (rep_op) */		if (state->discard[player][i] == gardens) { score = score - (fullDeckCount(player, 0, state) / 10); };
494: /* MUTANT (rep_op) */		if (state->discard[player][i] == gardens) { score = score * (fullDeckCount(player, 0, state) / 10); };
494: /* MUTANT (rep_op) */		if (state->discard[player][i] == gardens) { score = score % (fullDeckCount(player, 0, state) / 10); };
494: /* MUTANT (rep_const) */		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 1, state) / 10); };
494: /* MUTANT (rep_const) */		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, -1, state) / 10); };
494: /* MUTANT (rep_const) */		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 0); };
494: /* MUTANT (rep_const) */		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 1); };
494: /* MUTANT (rep_const) */		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / -1); };
494: /* MUTANT (rep_const) */		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / ((10)+1)); };
494: /* MUTANT (rep_const) */		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / ((10)-1)); };
494: /* MUTANT (negate) */		if(! (state->discard[player][i] == gardens)) { score = score + (fullDeckCount(player, 0, state) / 10); };
498: /* MUTANT (rep_op) */	for (i = 0; i <= state->deckCount[player]; i++)
498: /* MUTANT (rep_op) */	for (i = 0; i > state->deckCount[player]; i++)
498: /* MUTANT (rep_op) */	for (i = 0; i >= state->deckCount[player]; i++)
498: /* MUTANT (rep_op) */	for (i = 0; i == state->deckCount[player]; i++)
498: /* MUTANT (rep_op) */	for (i = 0; i != state->deckCount[player]; i++)
498: /* MUTANT (rep_op) */	for (i = 0; i < state->deckCount[player]; i--)
498: /* MUTANT (rep_const) */	for (i = 1; i < state->deckCount[player]; i++)
498: /* MUTANT (rep_const) */	for (i = -1; i < state->deckCount[player]; i++)
500: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == curse) { score = score - 1; */  };
500: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == curse) { score = score - 1; */  /*  }; */ 
500: /* MUTANT (del_stmt) */		if (state->deck[player][i] == curse) { score = score - 1; /*  }; */ 
500: /* MUTANT (rep_op) */		if (state->deck[player][i] != curse) { score = score - 1; };
500: /* MUTANT (rep_const) */		if (state->deck[player][i] == curse) { score = score - 0; };
500: /* MUTANT (rep_const) */		if (state->deck[player][i] == curse) { score = score - -1; };
500: /* MUTANT (rep_const) */		if (state->deck[player][i] == curse) { score = score - ((1)+1); };
500: /* MUTANT (negate) */		if(! (state->deck[player][i] == curse)) { score = score - 1; };
501: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == estate) { score = score + 1; */  };
501: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == estate) { score = score + 1; */  /*  }; */ 
501: /* MUTANT (del_stmt) */		if (state->deck[player][i] == estate) { score = score + 1; /*  }; */ 
501: /* MUTANT (rep_op) */		if (state->deck[player][i] != estate) { score = score + 1; };
501: /* MUTANT (rep_op) */		if (state->deck[player][i] == estate) { score = score - 1; };
501: /* MUTANT (rep_op) */		if (state->deck[player][i] == estate) { score = score * 1; };
501: /* MUTANT (rep_op) */		if (state->deck[player][i] == estate) { score = score % 1; };
501: /* MUTANT (rep_const) */		if (state->deck[player][i] == estate) { score = score + 0; };
501: /* MUTANT (rep_const) */		if (state->deck[player][i] == estate) { score = score + -1; };
501: /* MUTANT (rep_const) */		if (state->deck[player][i] == estate) { score = score + ((1)+1); };
501: /* MUTANT (negate) */		if(! (state->deck[player][i] == estate)) { score = score + 1; };
502: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == duchy) { score = score + 3; */  };
502: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == duchy) { score = score + 3; */  /*  }; */ 
502: /* MUTANT (del_stmt) */		if (state->deck[player][i] == duchy) { score = score + 3; /*  }; */ 
502: /* MUTANT (rep_op) */		if (state->deck[player][i] != duchy) { score = score + 3; };
502: /* MUTANT (rep_op) */		if (state->deck[player][i] == duchy) { score = score - 3; };
502: /* MUTANT (rep_op) */		if (state->deck[player][i] == duchy) { score = score * 3; };
502: /* MUTANT (rep_op) */		if (state->deck[player][i] == duchy) { score = score % 3; };
502: /* MUTANT (rep_const) */		if (state->deck[player][i] == duchy) { score = score + 0; };
502: /* MUTANT (rep_const) */		if (state->deck[player][i] == duchy) { score = score + 1; };
502: /* MUTANT (rep_const) */		if (state->deck[player][i] == duchy) { score = score + -1; };
502: /* MUTANT (rep_const) */		if (state->deck[player][i] == duchy) { score = score + ((3)+1); };
502: /* MUTANT (rep_const) */		if (state->deck[player][i] == duchy) { score = score + ((3)-1); };
502: /* MUTANT (negate) */		if(! (state->deck[player][i] == duchy)) { score = score + 3; };
503: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == province) { score = score + 6; */  };
503: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == province) { score = score + 6; */  /*  }; */ 
503: /* MUTANT (del_stmt) */		if (state->deck[player][i] == province) { score = score + 6; /*  }; */ 
503: /* MUTANT (rep_op) */		if (state->deck[player][i] != province) { score = score + 6; };
503: /* MUTANT (rep_op) */		if (state->deck[player][i] == province) { score = score - 6; };
503: /* MUTANT (rep_op) */		if (state->deck[player][i] == province) { score = score * 6; };
503: /* MUTANT (rep_op) */		if (state->deck[player][i] == province) { score = score % 6; };
503: /* MUTANT (rep_const) */		if (state->deck[player][i] == province) { score = score + 0; };
503: /* MUTANT (rep_const) */		if (state->deck[player][i] == province) { score = score + 1; };
503: /* MUTANT (rep_const) */		if (state->deck[player][i] == province) { score = score + -1; };
503: /* MUTANT (rep_const) */		if (state->deck[player][i] == province) { score = score + ((6)+1); };
503: /* MUTANT (rep_const) */		if (state->deck[player][i] == province) { score = score + ((6)-1); };
503: /* MUTANT (negate) */		if(! (state->deck[player][i] == province)) { score = score + 6; };
504: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == great_hall) { score = score + 1; */  };
504: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == great_hall) { score = score + 1; */  /*  }; */ 
504: /* MUTANT (del_stmt) */		if (state->deck[player][i] == great_hall) { score = score + 1; /*  }; */ 
504: /* MUTANT (rep_op) */		if (state->deck[player][i] != great_hall) { score = score + 1; };
504: /* MUTANT (rep_op) */		if (state->deck[player][i] == great_hall) { score = score - 1; };
504: /* MUTANT (rep_op) */		if (state->deck[player][i] == great_hall) { score = score * 1; };
504: /* MUTANT (rep_op) */		if (state->deck[player][i] == great_hall) { score = score % 1; };
504: /* MUTANT (rep_const) */		if (state->deck[player][i] == great_hall) { score = score + 0; };
504: /* MUTANT (rep_const) */		if (state->deck[player][i] == great_hall) { score = score + -1; };
504: /* MUTANT (rep_const) */		if (state->deck[player][i] == great_hall) { score = score + ((1)+1); };
504: /* MUTANT (negate) */		if(! (state->deck[player][i] == great_hall)) { score = score + 1; };
505: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); */  };
505: /* MUTANT (del_stmt) */ /* 		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); */  /*  }; */ 
505: /* MUTANT (del_stmt) */		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); /*  }; */ 
505: /* MUTANT (rep_op) */		if (state->deck[player][i] != gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
505: /* MUTANT (rep_op) */		if (state->deck[player][i] == gardens) { score = score - (fullDeckCount(player, 0, state) / 10); };
505: /* MUTANT (rep_op) */		if (state->deck[player][i] == gardens) { score = score * (fullDeckCount(player, 0, state) / 10); };
505: /* MUTANT (rep_op) */		if (state->deck[player][i] == gardens) { score = score % (fullDeckCount(player, 0, state) / 10); };
505: /* MUTANT (rep_const) */		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 1, state) / 10); };
505: /* MUTANT (rep_const) */		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, -1, state) / 10); };
505: /* MUTANT (rep_const) */		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 0); };
505: /* MUTANT (rep_const) */		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 1); };
505: /* MUTANT (rep_const) */		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / -1); };
505: /* MUTANT (rep_const) */		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / ((10)+1)); };
505: /* MUTANT (rep_const) */		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / ((10)-1)); };
505: /* MUTANT (negate) */		if(! (state->deck[player][i] == gardens)) { score = score + (fullDeckCount(player, 0, state) / 10); };
512: /* MUTANT (del_stmt) */ /* 	int i; */ 
513: /* MUTANT (del_stmt) */ /* 	int j; */ 
514: /* MUTANT (del_stmt) */ /* 	int highScore; */ 
515: /* MUTANT (del_stmt) */ /* 	int currentPlayer; */ 
518: /* MUTANT (rep_op) */	for (i = 0; i <= MAX_PLAYERS; i++)
518: /* MUTANT (rep_op) */	for (i = 0; i > MAX_PLAYERS; i++)
518: /* MUTANT (rep_op) */	for (i = 0; i >= MAX_PLAYERS; i++)
518: /* MUTANT (rep_op) */	for (i = 0; i == MAX_PLAYERS; i++)
518: /* MUTANT (rep_op) */	for (i = 0; i != MAX_PLAYERS; i++)
518: /* MUTANT (rep_op) */	for (i = 0; i < MAX_PLAYERS; i--)
518: /* MUTANT (rep_const) */	for (i = 1; i < MAX_PLAYERS; i++)
518: /* MUTANT (rep_const) */	for (i = -1; i < MAX_PLAYERS; i++)
521: /* MUTANT (rep_op) */		if (i <= state->numPlayers)
521: /* MUTANT (rep_op) */		if (i < state->numPlayers)
521: /* MUTANT (rep_op) */		if (i > state->numPlayers)
521: /* MUTANT (rep_op) */		if (i == state->numPlayers)
521: /* MUTANT (rep_op) */		if (i != state->numPlayers)
521: /* MUTANT (negate) */		if(! (i >= state->numPlayers))
523: /* MUTANT (del_stmt) */ /* 			players[i] = -9999; */ 
523: /* MUTANT (rep_const) */			players[i] = 0;
523: /* MUTANT (rep_const) */			players[i] = 1;
523: /* MUTANT (rep_const) */			players[i] = -1;
523: /* MUTANT (rep_const) */			players[i] = ((-9999)+1);
523: /* MUTANT (rep_const) */			players[i] = ((-9999)-1);
527: /* MUTANT (del_stmt) */ /* 			players[i] = scoreFor(i, state); */ 
532: /* MUTANT (rep_const) */	j = 1;
532: /* MUTANT (rep_const) */	j = -1;
533: /* MUTANT (rep_op) */	for (i = 0; i <= MAX_PLAYERS; i++)
533: /* MUTANT (rep_op) */	for (i = 0; i > MAX_PLAYERS; i++)
533: /* MUTANT (rep_op) */	for (i = 0; i >= MAX_PLAYERS; i++)
533: /* MUTANT (rep_op) */	for (i = 0; i == MAX_PLAYERS; i++)
533: /* MUTANT (rep_op) */	for (i = 0; i != MAX_PLAYERS; i++)
533: /* MUTANT (rep_op) */	for (i = 0; i < MAX_PLAYERS; i--)
533: /* MUTANT (rep_const) */	for (i = 1; i < MAX_PLAYERS; i++)
533: /* MUTANT (rep_const) */	for (i = -1; i < MAX_PLAYERS; i++)
535: /* MUTANT (rep_op) */		if (players[i] <= players[j])
535: /* MUTANT (rep_op) */		if (players[i] < players[j])
535: /* MUTANT (rep_op) */		if (players[i] >= players[j])
535: /* MUTANT (rep_op) */		if (players[i] == players[j])
535: /* MUTANT (rep_op) */		if (players[i] != players[j])
535: /* MUTANT (negate) */		if(! (players[i] > players[j]))
537: /* MUTANT (del_stmt) */ /* 			j = i; */ 
543: /* MUTANT (del_stmt) */ /* 	currentPlayer = whoseTurn(state); */ 
544: /* MUTANT (rep_op) */	for (i = 0; i <= MAX_PLAYERS; i++)
544: /* MUTANT (rep_op) */	for (i = 0; i > MAX_PLAYERS; i++)
544: /* MUTANT (rep_op) */	for (i = 0; i >= MAX_PLAYERS; i++)
544: /* MUTANT (rep_op) */	for (i = 0; i == MAX_PLAYERS; i++)
544: /* MUTANT (rep_op) */	for (i = 0; i != MAX_PLAYERS; i++)
544: /* MUTANT (rep_op) */	for (i = 0; i < MAX_PLAYERS; i--)
544: /* MUTANT (rep_const) */	for (i = 1; i < MAX_PLAYERS; i++)
544: /* MUTANT (rep_const) */	for (i = -1; i < MAX_PLAYERS; i++)
546: /* MUTANT (rep_op) */		if (players[i] != highScore && i > currentPlayer)
546: /* MUTANT (rep_op) */		if (players[i] == highScore || i > currentPlayer)
546: /* MUTANT (rep_op) */		if (players[i] == highScore && i <= currentPlayer)
546: /* MUTANT (rep_op) */		if (players[i] == highScore && i < currentPlayer)
546: /* MUTANT (rep_op) */		if (players[i] == highScore && i >= currentPlayer)
546: /* MUTANT (rep_op) */		if (players[i] == highScore && i == currentPlayer)
546: /* MUTANT (rep_op) */		if (players[i] == highScore && i != currentPlayer)
546: /* MUTANT (negate) */		if(! (players[i] == highScore && i > currentPlayer))
548: /* MUTANT (del_stmt) */ /* 			players[i]++; */ 
548: /* MUTANT (rep_op) */			players[i]--;
553: /* MUTANT (rep_const) */	j = 1;
553: /* MUTANT (rep_const) */	j = -1;
554: /* MUTANT (rep_op) */	for (i = 0; i <= MAX_PLAYERS; i++)
554: /* MUTANT (rep_op) */	for (i = 0; i > MAX_PLAYERS; i++)
554: /* MUTANT (rep_op) */	for (i = 0; i >= MAX_PLAYERS; i++)
554: /* MUTANT (rep_op) */	for (i = 0; i == MAX_PLAYERS; i++)
554: /* MUTANT (rep_op) */	for (i = 0; i != MAX_PLAYERS; i++)
554: /* MUTANT (rep_op) */	for (i = 0; i < MAX_PLAYERS; i--)
554: /* MUTANT (rep_const) */	for (i = 1; i < MAX_PLAYERS; i++)
554: /* MUTANT (rep_const) */	for (i = -1; i < MAX_PLAYERS; i++)
556: /* MUTANT (rep_op) */		if (players[i] <= players[j])
556: /* MUTANT (rep_op) */		if (players[i] < players[j])
556: /* MUTANT (rep_op) */		if (players[i] >= players[j])
556: /* MUTANT (rep_op) */		if (players[i] == players[j])
556: /* MUTANT (rep_op) */		if (players[i] != players[j])
556: /* MUTANT (negate) */		if(! (players[i] > players[j]))
558: /* MUTANT (del_stmt) */ /* 			j = i; */ 
564: /* MUTANT (rep_op) */	for (i = 0; i <= MAX_PLAYERS; i++)
564: /* MUTANT (rep_op) */	for (i = 0; i > MAX_PLAYERS; i++)
564: /* MUTANT (rep_op) */	for (i = 0; i >= MAX_PLAYERS; i++)
564: /* MUTANT (rep_op) */	for (i = 0; i == MAX_PLAYERS; i++)
564: /* MUTANT (rep_op) */	for (i = 0; i != MAX_PLAYERS; i++)
564: /* MUTANT (rep_op) */	for (i = 0; i < MAX_PLAYERS; i--)
564: /* MUTANT (rep_const) */	for (i = 1; i < MAX_PLAYERS; i++)
564: /* MUTANT (rep_const) */	for (i = -1; i < MAX_PLAYERS; i++)
566: /* MUTANT (rep_op) */		if (players[i] != highScore)
566: /* MUTANT (negate) */		if(! (players[i] == highScore))
568: /* MUTANT (del_stmt) */ /* 			players[i] = 1; */ 
568: /* MUTANT (rep_const) */			players[i] = 0;
568: /* MUTANT (rep_const) */			players[i] = -1;
568: /* MUTANT (rep_const) */			players[i] = ((1)+1);
572: /* MUTANT (del_stmt) */ /* 			players[i] = 0; */ 
572: /* MUTANT (rep_const) */			players[i] = 1;
572: /* MUTANT (rep_const) */			players[i] = -1;
576: /* MUTANT (rep_const) */	return 1;
576: /* MUTANT (rep_const) */	return -1;
581: /* MUTANT (del_stmt) */ /* 	int count; */ 
582: /* MUTANT (del_stmt) */ /* 	int deckCounter; */ 
583: /* MUTANT (rep_op) */	if (state->deckCount[player] < 0) {//Deck is empty
583: /* MUTANT (rep_op) */	if (state->deckCount[player] > 0) {//Deck is empty
583: /* MUTANT (rep_op) */	if (state->deckCount[player] >= 0) {//Deck is empty
583: /* MUTANT (rep_op) */	if (state->deckCount[player] == 0) {//Deck is empty
583: /* MUTANT (rep_op) */	if (state->deckCount[player] != 0) {//Deck is empty
583: /* MUTANT (rep_const) */	if (state->deckCount[player] <= 1) {//Deck is empty
583: /* MUTANT (rep_const) */	if (state->deckCount[player] <= -1) {//Deck is empty
583: /* MUTANT (negate) */	if(! (state->deckCount[player] <= 0)) {//Deck is empty
586: /* MUTANT (del_stmt) */ /* 		int i; */ 
588: /* MUTANT (rep_op) */		for (i = 0; i <= state->discardCount[player]; i++) {
588: /* MUTANT (rep_op) */		for (i = 0; i > state->discardCount[player]; i++) {
588: /* MUTANT (rep_op) */		for (i = 0; i >= state->discardCount[player]; i++) {
588: /* MUTANT (rep_op) */		for (i = 0; i == state->discardCount[player]; i++) {
588: /* MUTANT (rep_op) */		for (i = 0; i != state->discardCount[player]; i++) {
588: /* MUTANT (rep_op) */		for (i = 0; i < state->discardCount[player]; i--) {
588: /* MUTANT (rep_const) */		for (i = 1; i < state->discardCount[player]; i++) {
588: /* MUTANT (rep_const) */		for (i = -1; i < state->discardCount[player]; i++) {
589: /* MUTANT (del_stmt) */ /* 			state->deck[player][i] = state->discard[player][i]; */ 
590: /* MUTANT (del_stmt) */ /* 			state->discard[player][i] = -1; */ 
590: /* MUTANT (rep_const) */			state->discard[player][i] = 0;
590: /* MUTANT (rep_const) */			state->discard[player][i] = 1;
590: /* MUTANT (rep_const) */			state->discard[player][i] = ((-1)+1);
590: /* MUTANT (rep_const) */			state->discard[player][i] = ((-1)-1);
594: /* MUTANT (del_stmt) */ /* 		state->discardCount[player] = 0; */ //Reset discard
594: /* MUTANT (rep_const) */		state->discardCount[player] = 1;//Reset discard
594: /* MUTANT (rep_const) */		state->discardCount[player] = -1;//Reset discard
597: /* MUTANT (del_stmt) */ /* 		shuffle(player, state); */ //Shuffle the deck up and make it so that we can draw
599: /* MUTANT (negate) */		if(! (DEBUG)) {//Debug statements
600: /* MUTANT (del_stmt) */ /* 			printf("Deck count now: %d\n", state->deckCount[player]); */ 
603: /* MUTANT (rep_const) */		state->discardCount[player] = 1;
603: /* MUTANT (rep_const) */		state->discardCount[player] = -1;
606: /* MUTANT (del_stmt) */ /* 		count = state->handCount[player]; */ //Get current player's hand count
608: /* MUTANT (negate) */		if(! (DEBUG)) {//Debug statements
609: /* MUTANT (del_stmt) */ /* 			printf("Current hand count: %d\n", count); */ 
614: /* MUTANT (rep_op) */		if (deckCounter != 0)
614: /* MUTANT (rep_const) */		if (deckCounter == 1)
614: /* MUTANT (rep_const) */		if (deckCounter == -1)
614: /* MUTANT (negate) */		if(! (deckCounter == 0))
615: /* MUTANT (rep_const) */			return 0;
615: /* MUTANT (rep_const) */			return 1;
615: /* MUTANT (rep_const) */			return ((-1)+1);
615: /* MUTANT (rep_const) */			return ((-1)-1);
617: /* MUTANT (del_stmt) */ /* 		state->hand[player][count] = state->deck[player][deckCounter - 1]; */ //Add card to hand
617: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - 0];//Add card to hand
617: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - -1];//Add card to hand
617: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - ((1)+1)];//Add card to hand
618: /* MUTANT (del_stmt) */ /* 		state->deck[player][deckCounter - 1] = -1; */ 
618: /* MUTANT (rep_const) */		state->deck[player][deckCounter - 0] = -1;
618: /* MUTANT (rep_const) */		state->deck[player][deckCounter - -1] = -1;
618: /* MUTANT (rep_const) */		state->deck[player][deckCounter - ((1)+1)] = -1;
618: /* MUTANT (rep_const) */		state->deck[player][deckCounter - 1] = 0;
618: /* MUTANT (rep_const) */		state->deck[player][deckCounter - 1] = 1;
618: /* MUTANT (rep_const) */		state->deck[player][deckCounter - 1] = ((-1)+1);
618: /* MUTANT (rep_const) */		state->deck[player][deckCounter - 1] = ((-1)-1);
619: /* MUTANT (del_stmt) */ /* 		state->deckCount[player]--; */ 
619: /* MUTANT (rep_op) */		state->deckCount[player]++;
620: /* MUTANT (del_stmt) */ /* 		state->handCount[player]++; */ //Increment hand count
620: /* MUTANT (rep_op) */		state->handCount[player]--;//Increment hand count
624: /* MUTANT (del_stmt) */ /* 		int count = state->handCount[player]; */ //Get current hand count for player
625: /* MUTANT (del_stmt) */ /* 		int deckCounter; */ 
626: /* MUTANT (negate) */		if(! (DEBUG)) {//Debug statements
627: /* MUTANT (del_stmt) */ /* 			printf("Current hand count: %d\n", count); */ 
631: /* MUTANT (del_stmt) */ /* 		state->hand[player][count] = state->deck[player][deckCounter - 1]; */ //Add card to the hand
631: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - 0];//Add card to the hand
631: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - -1];//Add card to the hand
631: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - ((1)+1)];//Add card to the hand
632: /* MUTANT (del_stmt) */ /* 		state->deck[player][deckCounter - 1] = -1; */ 
632: /* MUTANT (rep_const) */		state->deck[player][deckCounter - 0] = -1;
632: /* MUTANT (rep_const) */		state->deck[player][deckCounter - -1] = -1;
632: /* MUTANT (rep_const) */		state->deck[player][deckCounter - ((1)+1)] = -1;
632: /* MUTANT (rep_const) */		state->deck[player][deckCounter - 1] = 0;
632: /* MUTANT (rep_const) */		state->deck[player][deckCounter - 1] = 1;
632: /* MUTANT (rep_const) */		state->deck[player][deckCounter - 1] = ((-1)+1);
632: /* MUTANT (rep_const) */		state->deck[player][deckCounter - 1] = ((-1)-1);
633: /* MUTANT (del_stmt) */ /* 		state->deckCount[player]--; */ 
633: /* MUTANT (rep_op) */		state->deckCount[player]++;
634: /* MUTANT (del_stmt) */ /* 		state->handCount[player]++; */ //Increment hand count
634: /* MUTANT (rep_op) */		state->handCount[player]--;//Increment hand count
637: /* MUTANT (rep_const) */	return 1;
637: /* MUTANT (rep_const) */	return -1;
645: /* MUTANT (rep_const) */		return 1;
645: /* MUTANT (rep_const) */		return -1;
647: /* MUTANT (rep_const) */		return 0;
647: /* MUTANT (rep_const) */		return 1;
647: /* MUTANT (rep_const) */		return -1;
647: /* MUTANT (rep_const) */		return ((2)+1);
647: /* MUTANT (rep_const) */		return ((2)-1);
649: /* MUTANT (rep_const) */		return 0;
649: /* MUTANT (rep_const) */		return 1;
649: /* MUTANT (rep_const) */		return -1;
649: /* MUTANT (rep_const) */		return ((5)+1);
649: /* MUTANT (rep_const) */		return ((5)-1);
651: /* MUTANT (rep_const) */		return 0;
651: /* MUTANT (rep_const) */		return 1;
651: /* MUTANT (rep_const) */		return -1;
651: /* MUTANT (rep_const) */		return ((8)+1);
651: /* MUTANT (rep_const) */		return ((8)-1);
653: /* MUTANT (rep_const) */		return 1;
653: /* MUTANT (rep_const) */		return -1;
655: /* MUTANT (rep_const) */		return 0;
655: /* MUTANT (rep_const) */		return 1;
655: /* MUTANT (rep_const) */		return -1;
655: /* MUTANT (rep_const) */		return ((3)+1);
655: /* MUTANT (rep_const) */		return ((3)-1);
657: /* MUTANT (rep_const) */		return 0;
657: /* MUTANT (rep_const) */		return 1;
657: /* MUTANT (rep_const) */		return -1;
657: /* MUTANT (rep_const) */		return ((6)+1);
657: /* MUTANT (rep_const) */		return ((6)-1);
659: /* MUTANT (rep_const) */		return 0;
659: /* MUTANT (rep_const) */		return 1;
659: /* MUTANT (rep_const) */		return -1;
659: /* MUTANT (rep_const) */		return ((6)+1);
659: /* MUTANT (rep_const) */		return ((6)-1);
661: /* MUTANT (rep_const) */		return 0;
661: /* MUTANT (rep_const) */		return 1;
661: /* MUTANT (rep_const) */		return -1;
661: /* MUTANT (rep_const) */		return ((5)+1);
661: /* MUTANT (rep_const) */		return ((5)-1);
663: /* MUTANT (rep_const) */		return 0;
663: /* MUTANT (rep_const) */		return 1;
663: /* MUTANT (rep_const) */		return -1;
663: /* MUTANT (rep_const) */		return ((4)+1);
663: /* MUTANT (rep_const) */		return ((4)-1);
665: /* MUTANT (rep_const) */		return 0;
665: /* MUTANT (rep_const) */		return 1;
665: /* MUTANT (rep_const) */		return -1;
665: /* MUTANT (rep_const) */		return ((4)+1);
665: /* MUTANT (rep_const) */		return ((4)-1);
667: /* MUTANT (rep_const) */		return 0;
667: /* MUTANT (rep_const) */		return 1;
667: /* MUTANT (rep_const) */		return -1;
667: /* MUTANT (rep_const) */		return ((5)+1);
667: /* MUTANT (rep_const) */		return ((5)-1);
669: /* MUTANT (rep_const) */		return 0;
669: /* MUTANT (rep_const) */		return 1;
669: /* MUTANT (rep_const) */		return -1;
669: /* MUTANT (rep_const) */		return ((4)+1);
669: /* MUTANT (rep_const) */		return ((4)-1);
671: /* MUTANT (rep_const) */		return 0;
671: /* MUTANT (rep_const) */		return 1;
671: /* MUTANT (rep_const) */		return -1;
671: /* MUTANT (rep_const) */		return ((4)+1);
671: /* MUTANT (rep_const) */		return ((4)-1);
673: /* MUTANT (rep_const) */		return 0;
673: /* MUTANT (rep_const) */		return 1;
673: /* MUTANT (rep_const) */		return -1;
673: /* MUTANT (rep_const) */		return ((3)+1);
673: /* MUTANT (rep_const) */		return ((3)-1);
675: /* MUTANT (rep_const) */		return 0;
675: /* MUTANT (rep_const) */		return 1;
675: /* MUTANT (rep_const) */		return -1;
675: /* MUTANT (rep_const) */		return ((4)+1);
675: /* MUTANT (rep_const) */		return ((4)-1);
677: /* MUTANT (rep_const) */		return 0;
677: /* MUTANT (rep_const) */		return 1;
677: /* MUTANT (rep_const) */		return -1;
677: /* MUTANT (rep_const) */		return ((3)+1);
677: /* MUTANT (rep_const) */		return ((3)-1);
679: /* MUTANT (rep_const) */		return 0;
679: /* MUTANT (rep_const) */		return 1;
679: /* MUTANT (rep_const) */		return -1;
679: /* MUTANT (rep_const) */		return ((5)+1);
679: /* MUTANT (rep_const) */		return ((5)-1);
681: /* MUTANT (rep_const) */		return 0;
681: /* MUTANT (rep_const) */		return 1;
681: /* MUTANT (rep_const) */		return -1;
681: /* MUTANT (rep_const) */		return ((3)+1);
681: /* MUTANT (rep_const) */		return ((3)-1);
683: /* MUTANT (rep_const) */		return 0;
683: /* MUTANT (rep_const) */		return 1;
683: /* MUTANT (rep_const) */		return -1;
683: /* MUTANT (rep_const) */		return ((5)+1);
683: /* MUTANT (rep_const) */		return ((5)-1);
685: /* MUTANT (rep_const) */		return 0;
685: /* MUTANT (rep_const) */		return 1;
685: /* MUTANT (rep_const) */		return -1;
685: /* MUTANT (rep_const) */		return ((3)+1);
685: /* MUTANT (rep_const) */		return ((3)-1);
687: /* MUTANT (rep_const) */		return 0;
687: /* MUTANT (rep_const) */		return 1;
687: /* MUTANT (rep_const) */		return -1;
687: /* MUTANT (rep_const) */		return ((4)+1);
687: /* MUTANT (rep_const) */		return ((4)-1);
689: /* MUTANT (rep_const) */		return 0;
689: /* MUTANT (rep_const) */		return 1;
689: /* MUTANT (rep_const) */		return -1;
689: /* MUTANT (rep_const) */		return ((2)+1);
689: /* MUTANT (rep_const) */		return ((2)-1);
691: /* MUTANT (rep_const) */		return 0;
691: /* MUTANT (rep_const) */		return 1;
691: /* MUTANT (rep_const) */		return -1;
691: /* MUTANT (rep_const) */		return ((5)+1);
691: /* MUTANT (rep_const) */		return ((5)-1);
693: /* MUTANT (rep_const) */		return 0;
693: /* MUTANT (rep_const) */		return 1;
693: /* MUTANT (rep_const) */		return -1;
693: /* MUTANT (rep_const) */		return ((4)+1);
693: /* MUTANT (rep_const) */		return ((4)-1);
695: /* MUTANT (rep_const) */		return 0;
695: /* MUTANT (rep_const) */		return 1;
695: /* MUTANT (rep_const) */		return -1;
695: /* MUTANT (rep_const) */		return ((4)+1);
695: /* MUTANT (rep_const) */		return ((4)-1);
697: /* MUTANT (rep_const) */		return 0;
697: /* MUTANT (rep_const) */		return 1;
697: /* MUTANT (rep_const) */		return -1;
697: /* MUTANT (rep_const) */		return ((4)+1);
697: /* MUTANT (rep_const) */		return ((4)-1);
700: /* MUTANT (rep_const) */	return 0;
700: /* MUTANT (rep_const) */	return 1;
700: /* MUTANT (rep_const) */	return ((-1)+1);
700: /* MUTANT (rep_const) */	return ((-1)-1);
704: /* MUTANT (del_stmt) */ /* 	int i; */ 
706: /* MUTANT (del_stmt) */ /* 	playedCard(handPos, NULL, NULL, state); */ 
707: /* MUTANT (rep_op) */	for (i = 0; i <= 3; i++) {
707: /* MUTANT (rep_op) */	for (i = 0; i > 3; i++) {
707: /* MUTANT (rep_op) */	for (i = 0; i >= 3; i++) {
707: /* MUTANT (rep_op) */	for (i = 0; i == 3; i++) {
707: /* MUTANT (rep_op) */	for (i = 0; i != 3; i++) {
707: /* MUTANT (rep_op) */	for (i = 0; i < 3; i--) {
707: /* MUTANT (rep_const) */	for (i = 1; i < 3; i++) {
707: /* MUTANT (rep_const) */	for (i = -1; i < 3; i++) {
707: /* MUTANT (rep_const) */	for (i = 0; i < 0; i++) {
707: /* MUTANT (rep_const) */	for (i = 0; i < 1; i++) {
707: /* MUTANT (rep_const) */	for (i = 0; i < -1; i++) {
707: /* MUTANT (rep_const) */	for (i = 0; i < ((3)+1); i++) {
707: /* MUTANT (rep_const) */	for (i = 0; i < ((3)-1); i++) {
708: /* MUTANT (del_stmt) */ /* 		drawCard(currentPlayer, state); */ 
711: /* MUTANT (rep_const) */	endPlayed(state, 1);
711: /* MUTANT (rep_const) */	endPlayed(state, -1);
712: /* MUTANT (del_stmt) */ /* 	return 0; */ 
712: /* MUTANT (rep_const) */	return 1;
712: /* MUTANT (rep_const) */	return -1;
717: /* MUTANT (del_stmt) */ /* 	playedCard(handPos, NULL, NULL, state); */ 
718: /* MUTANT (del_stmt) */ /* 	drawCard(currentPlayer, state); */ 
721: /* MUTANT (del_stmt) */ /* 	state->numActions += state->numActions + 2; */ 
721: /* MUTANT (rep_op) */	state->numActions -= state->numActions + 2;
721: /* MUTANT (rep_op) */	state->numActions *= state->numActions + 2;
721: /* MUTANT (rep_op) */	state->numActions %= state->numActions + 2;
721: /* MUTANT (rep_op) */	state->numActions += state->numActions - 2;
721: /* MUTANT (rep_op) */	state->numActions += state->numActions * 2;
721: /* MUTANT (rep_op) */	state->numActions += state->numActions % 2;
721: /* MUTANT (rep_const) */	state->numActions += state->numActions + 0;
721: /* MUTANT (rep_const) */	state->numActions += state->numActions + 1;
721: /* MUTANT (rep_const) */	state->numActions += state->numActions + -1;
721: /* MUTANT (rep_const) */	state->numActions += state->numActions + ((2)+1);
721: /* MUTANT (rep_const) */	state->numActions += state->numActions + ((2)-1);
724: /* MUTANT (del_stmt) */ /* 	endPlayed(state, 0); */ 
724: /* MUTANT (rep_const) */	endPlayed(state, 1);
724: /* MUTANT (rep_const) */	endPlayed(state, -1);
725: /* MUTANT (del_stmt) */ /* 	return 0; */ 
725: /* MUTANT (rep_const) */	return 1;
725: /* MUTANT (rep_const) */	return -1;
730: /* MUTANT (del_stmt) */ /* 	playedCard(handPos, NULL, NULL, state); */ 
731: /* MUTANT (del_stmt) */ /* 	drawCard(currentPlayer, state); */ 
734: /* MUTANT (del_stmt) */ /* 	state->numActions++; */ 
734: /* MUTANT (rep_op) */	state->numActions--;
737: /* MUTANT (del_stmt) */ /* 	endPlayed(state, 0); */ 
737: /* MUTANT (rep_const) */	endPlayed(state, 1);
737: /* MUTANT (rep_const) */	endPlayed(state, -1);
738: /* MUTANT (del_stmt) */ /* 	return 0; */ 
738: /* MUTANT (rep_const) */	return 1;
738: /* MUTANT (rep_const) */	return -1;
742: /* MUTANT (del_stmt) */ /* 	int i, j, k; */ 
744: /* MUTANT (del_stmt) */ /* 	playedCard(handPos, NULL, NULL, state); */ 
746: /* MUTANT (del_stmt) */ /* 	*bonus += 2; */ 
746: /* MUTANT (rep_op) */	*bonus -= 2;
746: /* MUTANT (rep_op) */	*bonus *= 2;
746: /* MUTANT (rep_op) */	*bonus %= 2;
746: /* MUTANT (rep_const) */	*bonus += 0;
746: /* MUTANT (rep_const) */	*bonus += 1;
746: /* MUTANT (rep_const) */	*bonus += -1;
746: /* MUTANT (rep_const) */	*bonus += ((2)+1);
746: /* MUTANT (rep_const) */	*bonus += ((2)-1);
747: /* MUTANT (rep_op) */	for (i = 0; i <= state->numPlayers; i++) {
747: /* MUTANT (rep_op) */	for (i = 0; i > state->numPlayers; i++) {
747: /* MUTANT (rep_op) */	for (i = 0; i >= state->numPlayers; i++) {
747: /* MUTANT (rep_op) */	for (i = 0; i == state->numPlayers; i++) {
747: /* MUTANT (rep_op) */	for (i = 0; i != state->numPlayers; i++) {
747: /* MUTANT (rep_op) */	for (i = 0; i < state->numPlayers; i--) {
747: /* MUTANT (rep_const) */	for (i = 1; i < state->numPlayers; i++) {
747: /* MUTANT (rep_const) */	for (i = -1; i < state->numPlayers; i++) {
748: /* MUTANT (rep_op) */		if (i == currentPlayer) {
748: /* MUTANT (negate) */		if(! (i != currentPlayer)) {
749: /* MUTANT (rep_op) */			for (j = 0; j <= state->handCount[i]; j++) {
749: /* MUTANT (rep_op) */			for (j = 0; j > state->handCount[i]; j++) {
749: /* MUTANT (rep_op) */			for (j = 0; j >= state->handCount[i]; j++) {
749: /* MUTANT (rep_op) */			for (j = 0; j == state->handCount[i]; j++) {
749: /* MUTANT (rep_op) */			for (j = 0; j != state->handCount[i]; j++) {
749: /* MUTANT (rep_op) */			for (j = 0; j < state->handCount[i]; j--) {
749: /* MUTANT (rep_const) */			for (j = 1; j < state->handCount[i]; j++) {
749: /* MUTANT (rep_const) */			for (j = -1; j < state->handCount[i]; j++) {
750: /* MUTANT (rep_op) */				if (state->hand[i][j] != copper) {
750: /* MUTANT (negate) */				if(! (state->hand[i][j] == copper)) {
751: /* MUTANT (del_stmt) */ /* 					discardCard(j, i, state, 0); */ 
751: /* MUTANT (rep_const) */					discardCard(j, i, state, 1);
751: /* MUTANT (rep_const) */					discardCard(j, i, state, -1);
753: /* MUTANT (rep_op) */				if (j != state->handCount[i]) {
753: /* MUTANT (negate) */				if(! (j == state->handCount[i])) {
754: /* MUTANT (rep_op) */					for (k = 0; k <= state->handCount[i]; k++) {
754: /* MUTANT (rep_op) */					for (k = 0; k > state->handCount[i]; k++) {
754: /* MUTANT (rep_op) */					for (k = 0; k >= state->handCount[i]; k++) {
754: /* MUTANT (rep_op) */					for (k = 0; k == state->handCount[i]; k++) {
754: /* MUTANT (rep_op) */					for (k = 0; k != state->handCount[i]; k++) {
754: /* MUTANT (rep_op) */					for (k = 0; k < state->handCount[i]; k--) {
754: /* MUTANT (rep_const) */					for (k = 1; k < state->handCount[i]; k++) {
754: /* MUTANT (rep_const) */					for (k = -1; k < state->handCount[i]; k++) {
755: /* MUTANT (negate) */						if(! (DEBUG))
765: /* MUTANT (rep_const) */	endPlayed(state, 1);
765: /* MUTANT (rep_const) */	endPlayed(state, -1);
767: /* MUTANT (del_stmt) */ /* 	return 0; */ 
767: /* MUTANT (rep_const) */	return 1;
767: /* MUTANT (rep_const) */	return -1;
771: /* MUTANT (del_stmt) */ /* 	int i; */ 
772: /* MUTANT (del_stmt) */ /* 	playedCard(handPos, NULL, NULL, state); */ 
774: /* MUTANT (rep_op) */	for (i = 0; i <= 4; i++) {
774: /* MUTANT (rep_op) */	for (i = 0; i > 4; i++) {
774: /* MUTANT (rep_op) */	for (i = 0; i >= 4; i++) {
774: /* MUTANT (rep_op) */	for (i = 0; i == 4; i++) {
774: /* MUTANT (rep_op) */	for (i = 0; i != 4; i++) {
774: /* MUTANT (rep_op) */	for (i = 0; i < 4; i--) {
774: /* MUTANT (rep_const) */	for (i = 1; i < 4; i++) {
774: /* MUTANT (rep_const) */	for (i = -1; i < 4; i++) {
774: /* MUTANT (rep_const) */	for (i = 0; i < 0; i++) {
774: /* MUTANT (rep_const) */	for (i = 0; i < 1; i++) {
774: /* MUTANT (rep_const) */	for (i = 0; i < -1; i++) {
774: /* MUTANT (rep_const) */	for (i = 0; i < ((4)+1); i++) {
774: /* MUTANT (rep_const) */	for (i = 0; i < ((4)-1); i++) {
775: /* MUTANT (del_stmt) */ /* 		drawCard(currentPlayer, state); */ 
779: /* MUTANT (rep_op) */	state->numBuys--;
782: /* MUTANT (rep_op) */	for (i = 0; i <= state->numPlayers; i++) {
782: /* MUTANT (rep_op) */	for (i = 0; i > state->numPlayers; i++) {
782: /* MUTANT (rep_op) */	for (i = 0; i >= state->numPlayers; i++) {
782: /* MUTANT (rep_op) */	for (i = 0; i == state->numPlayers; i++) {
782: /* MUTANT (rep_op) */	for (i = 0; i != state->numPlayers; i++) {
782: /* MUTANT (rep_op) */	for (i = 0; i < state->numPlayers; i--) {
782: /* MUTANT (rep_const) */	for (i = 1; i < state->numPlayers; i++) {
782: /* MUTANT (rep_const) */	for (i = -1; i < state->numPlayers; i++) {
783: /* MUTANT (rep_op) */		if (i == currentPlayer) {
783: /* MUTANT (negate) */		if(! (i != currentPlayer)) {
784: /* MUTANT (del_stmt) */ /* 			drawCard(i, state); */ 
789: /* MUTANT (rep_const) */	endPlayed(state, 1);
789: /* MUTANT (rep_const) */	endPlayed(state, -1);
791: /* MUTANT (del_stmt) */ /* 	return 0; */ 
791: /* MUTANT (rep_const) */	return 1;
791: /* MUTANT (rep_const) */	return -1;
797: /* MUTANT (del_stmt) */ /* 	int i; */ 
798: /* MUTANT (del_stmt) */ /* 	int j; */ 
799: /* MUTANT (del_stmt) */ /* 	int index; */ 
800: /* MUTANT (del_stmt) */ /* 	int currentPlayer = whoseTurn(state); */ 
801: /* MUTANT (del_stmt) */ /* 	int nextPlayer = currentPlayer + 1; */ 
801: /* MUTANT (rep_op) */	int nextPlayer = currentPlayer - 1;
801: /* MUTANT (rep_op) */	int nextPlayer = currentPlayer * 1;
801: /* MUTANT (rep_op) */	int nextPlayer = currentPlayer % 1;
801: /* MUTANT (rep_const) */	int nextPlayer = currentPlayer + 0;
801: /* MUTANT (rep_const) */	int nextPlayer = currentPlayer + -1;
801: /* MUTANT (rep_const) */	int nextPlayer = currentPlayer + ((1)+1);
803: /* MUTANT (del_stmt) */ /* 	int tributeRevealedCards[2] = { -1, -1 }; */ 
803: /* MUTANT (rep_const) */	int tributeRevealedCards[0] = { -1, -1 };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[1] = { -1, -1 };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[-1] = { -1, -1 };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[((2)+1)] = { -1, -1 };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[((2)-1)] = { -1, -1 };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = { 0, -1 };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = { 1, -1 };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = { ((-1)+1), -1 };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = { ((-1)-1), -1 };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = { -1, 0 };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = { -1, 1 };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = { -1, ((-1)+1) };
803: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = { -1, ((-1)-1) };
804: /* MUTANT (del_stmt) */ /* 	int temphand[MAX_HAND]; */ // moved above the if statement
805: /* MUTANT (del_stmt) */ /* 	int drawntreasure = 0; */ 
805: /* MUTANT (rep_const) */	int drawntreasure = 1;
805: /* MUTANT (rep_const) */	int drawntreasure = -1;
806: /* MUTANT (del_stmt) */ /* 	int cardDrawn; */ 
807: /* MUTANT (del_stmt) */ /* 	int z = 0; */ // this is the counter for the temp hand
807: /* MUTANT (rep_const) */	int z = 1;// this is the counter for the temp hand
807: /* MUTANT (rep_const) */	int z = -1;// this is the counter for the temp hand
808: /* MUTANT (rep_op) */	if (nextPlayer <= (state->numPlayers - 1)) {
808: /* MUTANT (rep_op) */	if (nextPlayer < (state->numPlayers - 1)) {
808: /* MUTANT (rep_op) */	if (nextPlayer >= (state->numPlayers - 1)) {
808: /* MUTANT (rep_op) */	if (nextPlayer == (state->numPlayers - 1)) {
808: /* MUTANT (rep_op) */	if (nextPlayer != (state->numPlayers - 1)) {
808: /* MUTANT (rep_const) */	if (nextPlayer > (state->numPlayers - 0)) {
808: /* MUTANT (rep_const) */	if (nextPlayer > (state->numPlayers - -1)) {
808: /* MUTANT (rep_const) */	if (nextPlayer > (state->numPlayers - ((1)+1))) {
808: /* MUTANT (negate) */	if(! (nextPlayer > (state->numPlayers - 1))) {
809: /* MUTANT (del_stmt) */ /* 		nextPlayer = 0; */ 
809: /* MUTANT (rep_const) */		nextPlayer = 1;
809: /* MUTANT (rep_const) */		nextPlayer = -1;
818: /* MUTANT (rep_op) */		while (drawntreasure <= 2) {
818: /* MUTANT (rep_op) */		while (drawntreasure > 2) {
818: /* MUTANT (rep_op) */		while (drawntreasure >= 2) {
818: /* MUTANT (rep_op) */		while (drawntreasure == 2) {
818: /* MUTANT (rep_op) */		while (drawntreasure != 2) {
818: /* MUTANT (rep_const) */		while (drawntreasure < 0) {
818: /* MUTANT (rep_const) */		while (drawntreasure < 1) {
818: /* MUTANT (rep_const) */		while (drawntreasure < -1) {
818: /* MUTANT (rep_const) */		while (drawntreasure < ((2)+1)) {
818: /* MUTANT (rep_const) */		while (drawntreasure < ((2)-1)) {
818: /* MUTANT (negate) */		while(! (drawntreasure < 2)) {
819: /* MUTANT (rep_op) */			if (drawCard(currentPlayer, state) != -1)
819: /* MUTANT (rep_const) */			if (drawCard(currentPlayer, state) == 0)
819: /* MUTANT (rep_const) */			if (drawCard(currentPlayer, state) == 1)
819: /* MUTANT (rep_const) */			if (drawCard(currentPlayer, state) == ((-1)+1))
819: /* MUTANT (rep_const) */			if (drawCard(currentPlayer, state) == ((-1)-1))
819: /* MUTANT (negate) */			if(! (drawCard(currentPlayer, state) == -1))
821: /* MUTANT (del_stmt) */ /* 			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; */ //top card of hand is most recently drawn card.
821: /* MUTANT (rep_const) */			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 0];//top card of hand is most recently drawn card.
821: /* MUTANT (rep_const) */			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - -1];//top card of hand is most recently drawn card.
821: /* MUTANT (rep_const) */			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - ((1)+1)];//top card of hand is most recently drawn card.
822: /* MUTANT (rep_op) */			if (cardDrawn != copper || cardDrawn == silver || cardDrawn == gold)
822: /* MUTANT (rep_op) */			if (cardDrawn == copper && cardDrawn == silver || cardDrawn == gold)
822: /* MUTANT (rep_op) */			if (cardDrawn == copper || cardDrawn != silver || cardDrawn == gold)
822: /* MUTANT (rep_op) */			if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
822: /* MUTANT (rep_op) */			if (cardDrawn == copper || cardDrawn == silver || cardDrawn != gold)
822: /* MUTANT (negate) */			if(! (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold))
823: /* MUTANT (rep_op) */				drawntreasure--;
825: /* MUTANT (del_stmt) */ /* 				temphand[z] = cardDrawn; */ 
826: /* MUTANT (del_stmt) */ /* 				state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1; */ 
826: /* MUTANT (rep_const) */				state->hand[currentPlayer][state->handCount[currentPlayer] - 0] = -1;
826: /* MUTANT (rep_const) */				state->hand[currentPlayer][state->handCount[currentPlayer] - -1] = -1;
826: /* MUTANT (rep_const) */				state->hand[currentPlayer][state->handCount[currentPlayer] - ((1)+1)] = -1;
826: /* MUTANT (rep_const) */				state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = 0;
826: /* MUTANT (rep_const) */				state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = 1;
826: /* MUTANT (rep_const) */				state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = ((-1)+1);
826: /* MUTANT (rep_const) */				state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = ((-1)-1);
827: /* MUTANT (del_stmt) */ /* 				state->handCount[currentPlayer]--; */  //this should just remove the top card (the most recently drawn one).
827: /* MUTANT (rep_op) */				state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
828: /* MUTANT (del_stmt) */ /* 				z++; */ 
828: /* MUTANT (rep_op) */				z--;
831: /* MUTANT (rep_op) */		while (z <= 0) {
831: /* MUTANT (rep_op) */		while (z < 0) {
831: /* MUTANT (rep_op) */		while (z >= 0) {
831: /* MUTANT (rep_op) */		while (z == 0) {
831: /* MUTANT (rep_op) */		while (z != 0) {
831: /* MUTANT (rep_const) */		while (z > 1) {
831: /* MUTANT (rep_const) */		while (z > -1) {
831: /* MUTANT (negate) */		while(! (z > 0)) {
832: /* MUTANT (del_stmt) */ /* 			state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; */  // discard all cards in play that have been drawn
832: /* MUTANT (rep_op) */			state->discard[currentPlayer][state->discardCount[currentPlayer]--] = temphand[z - 1]; // discard all cards in play that have been drawn
832: /* MUTANT (rep_const) */			state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 0]; // discard all cards in play that have been drawn
832: /* MUTANT (rep_const) */			state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - -1]; // discard all cards in play that have been drawn
832: /* MUTANT (rep_const) */			state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - ((1)+1)]; // discard all cards in play that have been drawn
833: /* MUTANT (del_stmt) */ /* 			z--; */ 
833: /* MUTANT (rep_op) */			z++;
835: /* MUTANT (rep_const) */		endPlayed(state, 1);
835: /* MUTANT (rep_const) */		endPlayed(state, -1);
836: /* MUTANT (del_stmt) */ /* 		return 0; */ 
836: /* MUTANT (rep_const) */		return 1;
836: /* MUTANT (rep_const) */		return -1;
842: /* MUTANT (rep_op) */		if (choice1 <= curse || choice1 > treasure_map)
842: /* MUTANT (rep_op) */		if (choice1 > curse || choice1 > treasure_map)
842: /* MUTANT (rep_op) */		if (choice1 >= curse || choice1 > treasure_map)
842: /* MUTANT (rep_op) */		if (choice1 == curse || choice1 > treasure_map)
842: /* MUTANT (rep_op) */		if (choice1 != curse || choice1 > treasure_map)
842: /* MUTANT (rep_op) */		if (choice1 < curse && choice1 > treasure_map)
842: /* MUTANT (rep_op) */		if (choice1 < curse || choice1 <= treasure_map)
842: /* MUTANT (rep_op) */		if (choice1 < curse || choice1 < treasure_map)
842: /* MUTANT (rep_op) */		if (choice1 < curse || choice1 >= treasure_map)
842: /* MUTANT (rep_op) */		if (choice1 < curse || choice1 == treasure_map)
842: /* MUTANT (rep_op) */		if (choice1 < curse || choice1 != treasure_map)
842: /* MUTANT (negate) */		if(! (choice1 < curse || choice1 > treasure_map))
843: /* MUTANT (rep_const) */			return 0;
843: /* MUTANT (rep_const) */			return 1;
843: /* MUTANT (rep_const) */			return ((-1)+1);
843: /* MUTANT (rep_const) */			return ((-1)-1);
845: /* MUTANT (rep_op) */		if (supplyCount(choice1, state) < 0) {
845: /* MUTANT (rep_op) */		if (supplyCount(choice1, state) > 0) {
845: /* MUTANT (rep_op) */		if (supplyCount(choice1, state) >= 0) {
845: /* MUTANT (rep_op) */		if (supplyCount(choice1, state) == 0) {
845: /* MUTANT (rep_op) */		if (supplyCount(choice1, state) != 0) {
845: /* MUTANT (rep_const) */		if (supplyCount(choice1, state) <= 1) {
845: /* MUTANT (rep_const) */		if (supplyCount(choice1, state) <= -1) {
845: /* MUTANT (negate) */		if(! (supplyCount(choice1, state) <= 0)) {
846: /* MUTANT (negate) */			if(! (DEBUG))
849: /* MUTANT (negate) */			if(! (DEBUG)) {
850: /* MUTANT (del_stmt) */ /* 				printf("Cards Left: %d\n", supplyCount(choice1, state)); */ 
852: /* MUTANT (rep_const) */			return 0;
852: /* MUTANT (rep_const) */			return 1;
852: /* MUTANT (rep_const) */			return ((-1)+1);
852: /* MUTANT (rep_const) */			return ((-1)-1);
854: /* MUTANT (rep_op) */		else if (5 <= getCost(choice1)) {
854: /* MUTANT (rep_op) */		else if (5 > getCost(choice1)) {
854: /* MUTANT (rep_op) */		else if (5 >= getCost(choice1)) {
854: /* MUTANT (rep_op) */		else if (5 == getCost(choice1)) {
854: /* MUTANT (rep_op) */		else if (5 != getCost(choice1)) {
854: /* MUTANT (rep_const) */		else if (0 < getCost(choice1)) {
854: /* MUTANT (rep_const) */		else if (1 < getCost(choice1)) {
854: /* MUTANT (rep_const) */		else if (-1 < getCost(choice1)) {
854: /* MUTANT (rep_const) */		else if (((5)+1) < getCost(choice1)) {
854: /* MUTANT (rep_const) */		else if (((5)-1) < getCost(choice1)) {
854: /* MUTANT (negate) */		else if(! (5 < getCost(choice1))) {
855: /* MUTANT (negate) */			if(! (DEBUG)) {
856: /* MUTANT (del_stmt) */ /* 				printf("That card is too expensive!\n"); */ 
857: /* MUTANT (del_stmt) */ /* 				printf("Coins: %d < %d\n", state->coins, getCost(choice1)); */ 
859: /* MUTANT (rep_const) */			return 0;
859: /* MUTANT (rep_const) */			return 1;
859: /* MUTANT (rep_const) */			return ((-1)+1);
859: /* MUTANT (rep_const) */			return ((-1)-1);
864: /* MUTANT (negate) */		if(! (DEBUG)) {
865: /* MUTANT (del_stmt) */ /* 			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]); */ 
865: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] - state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
865: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] * state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
865: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] % state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
865: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] - state->discardCount[currentPlayer]);
865: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] * state->discardCount[currentPlayer]);
865: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] % state->discardCount[currentPlayer]);
868: /* MUTANT (rep_const) */		gainCard(choice1, state, 1, currentPlayer);//Gain the card
868: /* MUTANT (rep_const) */		gainCard(choice1, state, -1, currentPlayer);//Gain the card
870: /* MUTANT (negate) */		if(! (DEBUG)) {
871: /* MUTANT (del_stmt) */ /* 			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]); */ 
871: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] - state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
871: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] * state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
871: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] % state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
871: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] - state->discardCount[currentPlayer]);
871: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] * state->discardCount[currentPlayer]);
871: /* MUTANT (rep_op) */			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] % state->discardCount[currentPlayer]);
875: /* MUTANT (rep_const) */		endPlayed(state, 0);
875: /* MUTANT (rep_const) */		endPlayed(state, -1);
875: /* MUTANT (rep_const) */		endPlayed(state, ((1)+1));
877: /* MUTANT (del_stmt) */ /* 		return 0; */ 
877: /* MUTANT (rep_const) */		return 1;
877: /* MUTANT (rep_const) */		return -1;
880: /* MUTANT (rep_const) */		return 0;
880: /* MUTANT (rep_const) */		return 1;
880: /* MUTANT (rep_const) */		return ((-1)+1);
880: /* MUTANT (rep_const) */		return ((-1)-1);
883: /* MUTANT (rep_op) */		if (choice1 <= state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 < state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 > state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 == state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 != state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] && choice1 < 0 || choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 <= 0 || choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 > 0 || choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 >= 0 || choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 == 0 || choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 != 0 || choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < 0 && choice1 == handPos)
883: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < 0 || choice1 != handPos)
883: /* MUTANT (rep_const) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < 1 || choice1 == handPos)
883: /* MUTANT (rep_const) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < -1 || choice1 == handPos)
883: /* MUTANT (negate) */		if(! (choice1 >= state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos))
884: /* MUTANT (rep_const) */			return 0;
884: /* MUTANT (rep_const) */			return 1;
884: /* MUTANT (rep_const) */			return ((-1)+1);
884: /* MUTANT (rep_const) */			return ((-1)-1);
886: /* MUTANT (del_stmt) */ /* 		j = state->hand[currentPlayer][choice1]; */   //store card we will trash
888: /* MUTANT (rep_op) */		if (state->hand[currentPlayer][choice1] <= copper || state->hand[currentPlayer][choice1] > gold)
888: /* MUTANT (rep_op) */		if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] > gold)
888: /* MUTANT (rep_op) */		if (state->hand[currentPlayer][choice1] >= copper || state->hand[currentPlayer][choice1] > gold)
888: /* MUTANT (rep_op) */		if (state->hand[currentPlayer][choice1] == copper || state->hand[currentPlayer][choice1] > gold)
888: /* MUTANT (rep_op) */		if (state->hand[currentPlayer][choice1] != copper || state->hand[currentPlayer][choice1] > gold)
888: /* MUTANT (rep_op) */		if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
888: /* MUTANT (rep_op) */		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] <= gold)
888: /* MUTANT (rep_op) */		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] < gold)
888: /* MUTANT (rep_op) */		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] >= gold)
888: /* MUTANT (rep_op) */		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] == gold)
888: /* MUTANT (rep_op) */		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] != gold)
888: /* MUTANT (negate) */		if(! (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold))
890: /* MUTANT (del_stmt) */ /* 			return -1; */ 
890: /* MUTANT (rep_const) */			return 0;
890: /* MUTANT (rep_const) */			return 1;
890: /* MUTANT (rep_const) */			return ((-1)+1);
890: /* MUTANT (rep_const) */			return ((-1)-1);
893: /* MUTANT (rep_op) */		if (choice2 <= gold || choice2 < copper)
893: /* MUTANT (rep_op) */		if (choice2 < gold || choice2 < copper)
893: /* MUTANT (rep_op) */		if (choice2 >= gold || choice2 < copper)
893: /* MUTANT (rep_op) */		if (choice2 == gold || choice2 < copper)
893: /* MUTANT (rep_op) */		if (choice2 != gold || choice2 < copper)
893: /* MUTANT (rep_op) */		if (choice2 > gold && choice2 < copper)
893: /* MUTANT (rep_op) */		if (choice2 > gold || choice2 <= copper)
893: /* MUTANT (rep_op) */		if (choice2 > gold || choice2 > copper)
893: /* MUTANT (rep_op) */		if (choice2 > gold || choice2 >= copper)
893: /* MUTANT (rep_op) */		if (choice2 > gold || choice2 == copper)
893: /* MUTANT (rep_op) */		if (choice2 > gold || choice2 != copper)
893: /* MUTANT (negate) */		if(! (choice2 > gold || choice2 < copper))
895: /* MUTANT (del_stmt) */ /* 			return -1; */ 
895: /* MUTANT (rep_const) */			return 0;
895: /* MUTANT (rep_const) */			return 1;
895: /* MUTANT (rep_const) */			return ((-1)+1);
895: /* MUTANT (rep_const) */			return ((-1)-1);
898: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) - 3) > getCost(choice2))
898: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) * 3) > getCost(choice2))
898: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) % 3) > getCost(choice2))
898: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) + 3) <= getCost(choice2))
898: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2))
898: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) + 3) >= getCost(choice2))
898: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) + 3) == getCost(choice2))
898: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) + 3) != getCost(choice2))
898: /* MUTANT (rep_const) */		if ((getCost(state->hand[currentPlayer][choice1]) + 0) > getCost(choice2))
898: /* MUTANT (rep_const) */		if ((getCost(state->hand[currentPlayer][choice1]) + 1) > getCost(choice2))
898: /* MUTANT (rep_const) */		if ((getCost(state->hand[currentPlayer][choice1]) + -1) > getCost(choice2))
898: /* MUTANT (rep_const) */		if ((getCost(state->hand[currentPlayer][choice1]) + ((3)+1)) > getCost(choice2))
898: /* MUTANT (rep_const) */		if ((getCost(state->hand[currentPlayer][choice1]) + ((3)-1)) > getCost(choice2))
898: /* MUTANT (negate) */		if(! ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)))
900: /* MUTANT (del_stmt) */ /* 			return -1; */ 
900: /* MUTANT (rep_const) */			return 0;
900: /* MUTANT (rep_const) */			return 1;
900: /* MUTANT (rep_const) */			return ((-1)+1);
900: /* MUTANT (rep_const) */			return ((-1)-1);
906: /* MUTANT (del_stmt) */ /* 		discardCard(choice1, currentPlayer, state, 1); */ 
906: /* MUTANT (rep_const) */		discardCard(choice1, currentPlayer, state, 0);
906: /* MUTANT (rep_const) */		discardCard(choice1, currentPlayer, state, -1);
906: /* MUTANT (rep_const) */		discardCard(choice1, currentPlayer, state, ((1)+1));
909: /* MUTANT (del_stmt) */ /* 		gainCard(choice2, state, 2, currentPlayer); */ 
909: /* MUTANT (rep_const) */		gainCard(choice2, state, 0, currentPlayer);
909: /* MUTANT (rep_const) */		gainCard(choice2, state, 1, currentPlayer);
909: /* MUTANT (rep_const) */		gainCard(choice2, state, -1, currentPlayer);
909: /* MUTANT (rep_const) */		gainCard(choice2, state, ((2)+1), currentPlayer);
909: /* MUTANT (rep_const) */		gainCard(choice2, state, ((2)-1), currentPlayer);
911: /* MUTANT (del_stmt) */ /* 		endPlayed(state, 0); */ 
911: /* MUTANT (rep_const) */		endPlayed(state, 1);
911: /* MUTANT (rep_const) */		endPlayed(state, -1);
913: /* MUTANT (del_stmt) */ /* 		return 0; */ 
913: /* MUTANT (rep_const) */		return 1;
913: /* MUTANT (rep_const) */		return -1;
916: /* MUTANT (rep_op) */		if (choice1 <= state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 < state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 > state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 == state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 != state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] && choice1 < 0 || choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 <= 0 || choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 > 0 || choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 >= 0 || choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 == 0 || choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 != 0 || choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < 0 && choice1 == handPos)
916: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < 0 || choice1 != handPos)
916: /* MUTANT (rep_const) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < 1 || choice1 == handPos)
916: /* MUTANT (rep_const) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < -1 || choice1 == handPos)
916: /* MUTANT (negate) */		if(! (choice1 >= state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos))
917: /* MUTANT (rep_const) */			return 0;
917: /* MUTANT (rep_const) */			return 1;
917: /* MUTANT (rep_const) */			return ((-1)+1);
917: /* MUTANT (rep_const) */			return ((-1)-1);
919: /* MUTANT (rep_op) */		if (choice2 <= curse || choice2 > treasure_map)
919: /* MUTANT (rep_op) */		if (choice2 > curse || choice2 > treasure_map)
919: /* MUTANT (rep_op) */		if (choice2 >= curse || choice2 > treasure_map)
919: /* MUTANT (rep_op) */		if (choice2 == curse || choice2 > treasure_map)
919: /* MUTANT (rep_op) */		if (choice2 != curse || choice2 > treasure_map)
919: /* MUTANT (rep_op) */		if (choice2 < curse && choice2 > treasure_map)
919: /* MUTANT (rep_op) */		if (choice2 < curse || choice2 <= treasure_map)
919: /* MUTANT (rep_op) */		if (choice2 < curse || choice2 < treasure_map)
919: /* MUTANT (rep_op) */		if (choice2 < curse || choice2 >= treasure_map)
919: /* MUTANT (rep_op) */		if (choice2 < curse || choice2 == treasure_map)
919: /* MUTANT (rep_op) */		if (choice2 < curse || choice2 != treasure_map)
919: /* MUTANT (negate) */		if(! (choice2 < curse || choice2 > treasure_map))
920: /* MUTANT (rep_const) */			return 0;
920: /* MUTANT (rep_const) */			return 1;
920: /* MUTANT (rep_const) */			return ((-1)+1);
920: /* MUTANT (rep_const) */			return ((-1)-1);
922: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) - 2) > getCost(choice2))
922: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) * 2) > getCost(choice2))
922: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) % 2) > getCost(choice2))
922: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) + 2) <= getCost(choice2))
922: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2))
922: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) + 2) >= getCost(choice2))
922: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) + 2) == getCost(choice2))
922: /* MUTANT (rep_op) */		if ((getCost(state->hand[currentPlayer][choice1]) + 2) != getCost(choice2))
922: /* MUTANT (rep_const) */		if ((getCost(state->hand[currentPlayer][choice1]) + 0) > getCost(choice2))
922: /* MUTANT (rep_const) */		if ((getCost(state->hand[currentPlayer][choice1]) + 1) > getCost(choice2))
922: /* MUTANT (rep_const) */		if ((getCost(state->hand[currentPlayer][choice1]) + -1) > getCost(choice2))
922: /* MUTANT (rep_const) */		if ((getCost(state->hand[currentPlayer][choice1]) + ((2)+1)) > getCost(choice2))
922: /* MUTANT (rep_const) */		if ((getCost(state->hand[currentPlayer][choice1]) + ((2)-1)) > getCost(choice2))
922: /* MUTANT (negate) */		if(! ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2)))
924: /* MUTANT (del_stmt) */ /* 			return -1; */ 
924: /* MUTANT (rep_const) */			return 0;
924: /* MUTANT (rep_const) */			return 1;
924: /* MUTANT (rep_const) */			return ((-1)+1);
924: /* MUTANT (rep_const) */			return ((-1)-1);
930: /* MUTANT (del_stmt) */ /* 		discardCard(choice1, currentPlayer, state, 1); */ 
930: /* MUTANT (rep_const) */		discardCard(choice1, currentPlayer, state, 0);
930: /* MUTANT (rep_const) */		discardCard(choice1, currentPlayer, state, -1);
930: /* MUTANT (rep_const) */		discardCard(choice1, currentPlayer, state, ((1)+1));
933: /* MUTANT (del_stmt) */ /* 		gainCard(choice2, state, 0, currentPlayer); */ 
933: /* MUTANT (rep_const) */		gainCard(choice2, state, 1, currentPlayer);
933: /* MUTANT (rep_const) */		gainCard(choice2, state, -1, currentPlayer);
935: /* MUTANT (del_stmt) */ /* 		endPlayed(state, 0); */ 
935: /* MUTANT (rep_const) */		endPlayed(state, 1);
935: /* MUTANT (rep_const) */		endPlayed(state, -1);
936: /* MUTANT (del_stmt) */ /* 		return 0; */ 
936: /* MUTANT (rep_const) */		return 1;
936: /* MUTANT (rep_const) */		return -1;
945: /* MUTANT (rep_op) */		if (!(choice1 != 1 || choice1 == 2))
945: /* MUTANT (rep_op) */		if (!(choice1 == 1 && choice1 == 2))
945: /* MUTANT (rep_op) */		if (!(choice1 == 1 || choice1 != 2))
945: /* MUTANT (rep_const) */		if (!(choice1 == 0 || choice1 == 2))
945: /* MUTANT (rep_const) */		if (!(choice1 == -1 || choice1 == 2))
945: /* MUTANT (rep_const) */		if (!(choice1 == ((1)+1) || choice1 == 2))
945: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == 0))
945: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == 1))
945: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == -1))
945: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == ((2)+1)))
945: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == ((2)-1)))
945: /* MUTANT (negate) */		if(! (!(choice1 == 1 || choice1 == 2)))
946: /* MUTANT (rep_const) */			return 0;
946: /* MUTANT (rep_const) */			return 1;
946: /* MUTANT (rep_const) */			return ((-1)+1);
946: /* MUTANT (rep_const) */			return ((-1)-1);
948: /* MUTANT (rep_op) */		if (choice1 != 1) {//Boolean true or going to discard an estate
948: /* MUTANT (rep_const) */		if (choice1 == 0) {//Boolean true or going to discard an estate
948: /* MUTANT (rep_const) */		if (choice1 == -1) {//Boolean true or going to discard an estate
948: /* MUTANT (rep_const) */		if (choice1 == ((1)+1)) {//Boolean true or going to discard an estate
948: /* MUTANT (negate) */		if(! (choice1 == 1)) {//Boolean true or going to discard an estate
949: /* MUTANT (del_stmt) */ /* 			int p = 0; */ //Iterator for hand!
949: /* MUTANT (rep_const) */			int p = 1;//Iterator for hand!
949: /* MUTANT (rep_const) */			int p = -1;//Iterator for hand!
950: /* MUTANT (del_stmt) */ /* 			int card_not_discarded = 1; */ //Flag for discard set!
950: /* MUTANT (rep_const) */			int card_not_discarded = 0;//Flag for discard set!
950: /* MUTANT (rep_const) */			int card_not_discarded = -1;//Flag for discard set!
950: /* MUTANT (rep_const) */			int card_not_discarded = ((1)+1);//Flag for discard set!
951: /* MUTANT (negate) */			while(! (card_not_discarded)) {
952: /* MUTANT (rep_op) */				if (p <= state->handCount[currentPlayer]) {
952: /* MUTANT (rep_op) */				if (p < state->handCount[currentPlayer]) {
952: /* MUTANT (rep_op) */				if (p > state->handCount[currentPlayer]) {
952: /* MUTANT (rep_op) */				if (p == state->handCount[currentPlayer]) {
952: /* MUTANT (rep_op) */				if (p != state->handCount[currentPlayer]) {
952: /* MUTANT (negate) */				if(! (p >= state->handCount[currentPlayer])) {
953: /* MUTANT (negate) */					if(! (DEBUG)) {
954: /* MUTANT (del_stmt) */ /* 						printf("No estate cards in your hand, invalid choice\n"); */ 						
956: /* MUTANT (rep_const) */					return 0;
956: /* MUTANT (rep_const) */					return 1;
956: /* MUTANT (rep_const) */					return ((-1)+1);
956: /* MUTANT (rep_const) */					return ((-1)-1);
958: /* MUTANT (rep_op) */				else if (state->hand[currentPlayer][p] != estate) {//Found an estate card!
958: /* MUTANT (negate) */				else if(! (state->hand[currentPlayer][p] == estate)) {//Found an estate card!
959: /* MUTANT (del_stmt) */ /* 					playedCard(handPos, &p, NULL, state); */ 
960: /* MUTANT (del_stmt) */ /* 					*bonus += 4; */ //Add 4 coins to the amount of coins
960: /* MUTANT (rep_op) */					*bonus -= 4;//Add 4 coins to the amount of coins
960: /* MUTANT (rep_op) */					*bonus *= 4;//Add 4 coins to the amount of coins
960: /* MUTANT (rep_op) */					*bonus %= 4;//Add 4 coins to the amount of coins
960: /* MUTANT (rep_const) */					*bonus += 0;//Add 4 coins to the amount of coins
960: /* MUTANT (rep_const) */					*bonus += 1;//Add 4 coins to the amount of coins
960: /* MUTANT (rep_const) */					*bonus += -1;//Add 4 coins to the amount of coins
960: /* MUTANT (rep_const) */					*bonus += ((4)+1);//Add 4 coins to the amount of coins
960: /* MUTANT (rep_const) */					*bonus += ((4)-1);//Add 4 coins to the amount of coins
961: /* MUTANT (del_stmt) */ /* 					discardCard(p, currentPlayer, state, 0); */ 
961: /* MUTANT (rep_const) */					discardCard(p, currentPlayer, state, 1);
961: /* MUTANT (rep_const) */					discardCard(p, currentPlayer, state, -1);
962: /* MUTANT (del_stmt) */ /* 					card_not_discarded = 0; */ //Exit the loop
962: /* MUTANT (rep_const) */					card_not_discarded = 1;//Exit the loop
962: /* MUTANT (rep_const) */					card_not_discarded = -1;//Exit the loop
965: /* MUTANT (del_stmt) */ /* 					p++; */ //Next card
965: /* MUTANT (rep_op) */					p--;//Next card
971: /* MUTANT (del_stmt) */ /* 			playedCard(handPos, NULL, NULL, state); */ 
972: /* MUTANT (del_stmt) */ /* 			gainCard(estate, state, 0, currentPlayer); */ //Gain an estate	
972: /* MUTANT (rep_const) */			gainCard(estate, state, 1, currentPlayer);//Gain an estate	
972: /* MUTANT (rep_const) */			gainCard(estate, state, -1, currentPlayer);//Gain an estate	
974: /* MUTANT (rep_op) */		state->numBuys--;//Increase buys by 1!
975: /* MUTANT (del_stmt) */ /* 		endPlayed(state, 0); */ 
975: /* MUTANT (rep_const) */		endPlayed(state, 1);
975: /* MUTANT (rep_const) */		endPlayed(state, -1);
976: /* MUTANT (del_stmt) */ /* 		return 0; */ 
976: /* MUTANT (rep_const) */		return 1;
976: /* MUTANT (rep_const) */		return -1;
982: /* MUTANT (rep_op) */		if (!(choice1 != 1 || choice1 == 2))
982: /* MUTANT (rep_op) */		if (!(choice1 == 1 && choice1 == 2))
982: /* MUTANT (rep_op) */		if (!(choice1 == 1 || choice1 != 2))
982: /* MUTANT (rep_const) */		if (!(choice1 == 0 || choice1 == 2))
982: /* MUTANT (rep_const) */		if (!(choice1 == -1 || choice1 == 2))
982: /* MUTANT (rep_const) */		if (!(choice1 == ((1)+1) || choice1 == 2))
982: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == 0))
982: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == 1))
982: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == -1))
982: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == ((2)+1)))
982: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == ((2)-1)))
982: /* MUTANT (negate) */		if(! (!(choice1 == 1 || choice1 == 2)))
983: /* MUTANT (rep_const) */			return 0;
983: /* MUTANT (rep_const) */			return 1;
983: /* MUTANT (rep_const) */			return ((-1)+1);
983: /* MUTANT (rep_const) */			return ((-1)-1);
985: /* MUTANT (del_stmt) */ /* 		playedCard(handPos, NULL, NULL, state); */ 
988: /* MUTANT (del_stmt) */ /* 		state->numActions++; */ 
988: /* MUTANT (rep_op) */		state->numActions--;
990: /* MUTANT (rep_op) */		if (choice1 != 1)      //+2 coins
990: /* MUTANT (rep_const) */		if (choice1 == 0)      //+2 coins
990: /* MUTANT (rep_const) */		if (choice1 == -1)      //+2 coins
990: /* MUTANT (rep_const) */		if (choice1 == ((1)+1))      //+2 coins
990: /* MUTANT (negate) */		if(! (choice1 == 1))      //+2 coins
992: /* MUTANT (del_stmt) */ /* 			*bonus += 2; */ 
992: /* MUTANT (rep_op) */			*bonus -= 2;
992: /* MUTANT (rep_op) */			*bonus *= 2;
992: /* MUTANT (rep_op) */			*bonus %= 2;
992: /* MUTANT (rep_const) */			*bonus += 0;
992: /* MUTANT (rep_const) */			*bonus += 1;
992: /* MUTANT (rep_const) */			*bonus += -1;
992: /* MUTANT (rep_const) */			*bonus += ((2)+1);
992: /* MUTANT (rep_const) */			*bonus += ((2)-1);
995: /* MUTANT (rep_op) */		else if (choice1 != 2)     //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
995: /* MUTANT (rep_const) */		else if (choice1 == 0)     //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
995: /* MUTANT (rep_const) */		else if (choice1 == 1)     //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
995: /* MUTANT (rep_const) */		else if (choice1 == -1)     //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
995: /* MUTANT (rep_const) */		else if (choice1 == ((2)+1))     //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
995: /* MUTANT (rep_const) */		else if (choice1 == ((2)-1))     //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
995: /* MUTANT (negate) */		else if(! (choice1 == 2))     //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
998: /* MUTANT (rep_op) */			while (numHandCards(state) <= 0)
998: /* MUTANT (rep_op) */			while (numHandCards(state) < 0)
998: /* MUTANT (rep_op) */			while (numHandCards(state) >= 0)
998: /* MUTANT (rep_op) */			while (numHandCards(state) == 0)
998: /* MUTANT (rep_op) */			while (numHandCards(state) != 0)
998: /* MUTANT (rep_const) */			while (numHandCards(state) > 1)
998: /* MUTANT (rep_const) */			while (numHandCards(state) > -1)
998: /* MUTANT (negate) */			while(! (numHandCards(state) > 0))
1000: /* MUTANT (del_stmt) */ /* 				discardCard(0, currentPlayer, state, 0); */ 
1000: /* MUTANT (rep_const) */				discardCard(1, currentPlayer, state, 0);
1000: /* MUTANT (rep_const) */				discardCard(-1, currentPlayer, state, 0);
1000: /* MUTANT (rep_const) */				discardCard(0, currentPlayer, state, 1);
1000: /* MUTANT (rep_const) */				discardCard(0, currentPlayer, state, -1);
1004: /* MUTANT (rep_op) */			for (i = 0; i <= 4; i++)
1004: /* MUTANT (rep_op) */			for (i = 0; i > 4; i++)
1004: /* MUTANT (rep_op) */			for (i = 0; i >= 4; i++)
1004: /* MUTANT (rep_op) */			for (i = 0; i == 4; i++)
1004: /* MUTANT (rep_op) */			for (i = 0; i != 4; i++)
1004: /* MUTANT (rep_op) */			for (i = 0; i < 4; i--)
1004: /* MUTANT (rep_const) */			for (i = 1; i < 4; i++)
1004: /* MUTANT (rep_const) */			for (i = -1; i < 4; i++)
1004: /* MUTANT (rep_const) */			for (i = 0; i < 0; i++)
1004: /* MUTANT (rep_const) */			for (i = 0; i < 1; i++)
1004: /* MUTANT (rep_const) */			for (i = 0; i < -1; i++)
1004: /* MUTANT (rep_const) */			for (i = 0; i < ((4)+1); i++)
1004: /* MUTANT (rep_const) */			for (i = 0; i < ((4)-1); i++)
1006: /* MUTANT (del_stmt) */ /* 				drawCard(currentPlayer, state); */ 
1010: /* MUTANT (rep_op) */			for (i = 0; i <= state->numPlayers; i++)
1010: /* MUTANT (rep_op) */			for (i = 0; i > state->numPlayers; i++)
1010: /* MUTANT (rep_op) */			for (i = 0; i >= state->numPlayers; i++)
1010: /* MUTANT (rep_op) */			for (i = 0; i == state->numPlayers; i++)
1010: /* MUTANT (rep_op) */			for (i = 0; i != state->numPlayers; i++)
1010: /* MUTANT (rep_op) */			for (i = 0; i < state->numPlayers; i--)
1010: /* MUTANT (rep_const) */			for (i = 1; i < state->numPlayers; i++)
1010: /* MUTANT (rep_const) */			for (i = -1; i < state->numPlayers; i++)
1012: /* MUTANT (rep_op) */				if (i == currentPlayer)
1012: /* MUTANT (negate) */				if(! (i != currentPlayer))
1014: /* MUTANT (rep_op) */					if (state->handCount[i] <= 4)
1014: /* MUTANT (rep_op) */					if (state->handCount[i] < 4)
1014: /* MUTANT (rep_op) */					if (state->handCount[i] >= 4)
1014: /* MUTANT (rep_op) */					if (state->handCount[i] == 4)
1014: /* MUTANT (rep_op) */					if (state->handCount[i] != 4)
1014: /* MUTANT (rep_const) */					if (state->handCount[i] > 0)
1014: /* MUTANT (rep_const) */					if (state->handCount[i] > 1)
1014: /* MUTANT (rep_const) */					if (state->handCount[i] > -1)
1014: /* MUTANT (rep_const) */					if (state->handCount[i] > ((4)+1))
1014: /* MUTANT (rep_const) */					if (state->handCount[i] > ((4)-1))
1014: /* MUTANT (negate) */					if(! (state->handCount[i] > 4))
1017: /* MUTANT (rep_op) */						while (state->handCount[i] <= 0)
1017: /* MUTANT (rep_op) */						while (state->handCount[i] < 0)
1017: /* MUTANT (rep_op) */						while (state->handCount[i] >= 0)
1017: /* MUTANT (rep_op) */						while (state->handCount[i] == 0)
1017: /* MUTANT (rep_op) */						while (state->handCount[i] != 0)
1017: /* MUTANT (rep_const) */						while (state->handCount[i] > 1)
1017: /* MUTANT (rep_const) */						while (state->handCount[i] > -1)
1017: /* MUTANT (negate) */						while(! (state->handCount[i] > 0))
1019: /* MUTANT (del_stmt) */ /* 							discardCard(0, i, state, 0); */ 
1019: /* MUTANT (rep_const) */							discardCard(1, i, state, 0);
1019: /* MUTANT (rep_const) */							discardCard(-1, i, state, 0);
1019: /* MUTANT (rep_const) */							discardCard(0, i, state, 1);
1019: /* MUTANT (rep_const) */							discardCard(0, i, state, -1);
1023: /* MUTANT (rep_op) */						for (j = 0; j <= 4; j++)
1023: /* MUTANT (rep_op) */						for (j = 0; j > 4; j++)
1023: /* MUTANT (rep_op) */						for (j = 0; j >= 4; j++)
1023: /* MUTANT (rep_op) */						for (j = 0; j == 4; j++)
1023: /* MUTANT (rep_op) */						for (j = 0; j != 4; j++)
1023: /* MUTANT (rep_op) */						for (j = 0; j < 4; j--)
1023: /* MUTANT (rep_const) */						for (j = 1; j < 4; j++)
1023: /* MUTANT (rep_const) */						for (j = -1; j < 4; j++)
1023: /* MUTANT (rep_const) */						for (j = 0; j < 0; j++)
1023: /* MUTANT (rep_const) */						for (j = 0; j < 1; j++)
1023: /* MUTANT (rep_const) */						for (j = 0; j < -1; j++)
1023: /* MUTANT (rep_const) */						for (j = 0; j < ((4)+1); j++)
1023: /* MUTANT (rep_const) */						for (j = 0; j < ((4)-1); j++)
1025: /* MUTANT (del_stmt) */ /* 							drawCard(i, state); */ 
1032: /* MUTANT (rep_const) */		endPlayed(state, 1);
1032: /* MUTANT (rep_const) */		endPlayed(state, -1);
1033: /* MUTANT (del_stmt) */ /* 		return 0; */ 
1033: /* MUTANT (rep_const) */		return 1;
1033: /* MUTANT (rep_const) */		return -1;
1036: /* MUTANT (rep_op) */		if (!(choice1 != 1 || choice1 == 2 || choice1 == 3))
1036: /* MUTANT (rep_op) */		if (!(choice1 == 1 && choice1 == 2 || choice1 == 3))
1036: /* MUTANT (rep_op) */		if (!(choice1 == 1 || choice1 != 2 || choice1 == 3))
1036: /* MUTANT (rep_op) */		if (!(choice1 == 1 || choice1 == 2 && choice1 == 3))
1036: /* MUTANT (rep_op) */		if (!(choice1 == 1 || choice1 == 2 || choice1 != 3))
1036: /* MUTANT (rep_const) */		if (!(choice1 == 0 || choice1 == 2 || choice1 == 3))
1036: /* MUTANT (rep_const) */		if (!(choice1 == -1 || choice1 == 2 || choice1 == 3))
1036: /* MUTANT (rep_const) */		if (!(choice1 == ((1)+1) || choice1 == 2 || choice1 == 3))
1036: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == 0 || choice1 == 3))
1036: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == 1 || choice1 == 3))
1036: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == -1 || choice1 == 3))
1036: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == ((2)+1) || choice1 == 3))
1036: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == ((2)-1) || choice1 == 3))
1036: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == 2 || choice1 == 0))
1036: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == 2 || choice1 == 1))
1036: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == 2 || choice1 == -1))
1036: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == 2 || choice1 == ((3)+1)))
1036: /* MUTANT (rep_const) */		if (!(choice1 == 1 || choice1 == 2 || choice1 == ((3)-1)))
1036: /* MUTANT (negate) */		if(! (!(choice1 == 1 || choice1 == 2 || choice1 == 3)))
1037: /* MUTANT (rep_const) */			return 0;
1037: /* MUTANT (rep_const) */			return 1;
1037: /* MUTANT (rep_const) */			return ((-1)+1);
1037: /* MUTANT (rep_const) */			return ((-1)-1);
1038: /* MUTANT (rep_op) */		if (choice1 != 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 || ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 <= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 < state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 > state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 == state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 != state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] && choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 <= 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 > 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 >= 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 == 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 != 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) && (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 <= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 < state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 > state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 == state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 != state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] && choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 <= 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 > 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 >= 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 == 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 != 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) && choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 != choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 && (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 != handPos || choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos && choice3 == handPos)))
1038: /* MUTANT (rep_op) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 != handPos)))
1038: /* MUTANT (rep_const) */		if (choice1 == 0 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_const) */		if (choice1 == 1 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_const) */		if (choice1 == -1 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_const) */		if (choice1 == ((3)+1) && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_const) */		if (choice1 == ((3)-1) && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_const) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 1) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_const) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < -1) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_const) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 1) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (rep_const) */		if (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < -1) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos)))
1038: /* MUTANT (negate) */		if(! (choice1 == 3 && ((choice2 >= state->handCount[currentPlayer] || choice2 < 0) || (choice3 >= state->handCount[currentPlayer] || choice3 < 0) || choice2 == choice3 || (choice2 == handPos || choice3 == handPos))))
1039: /* MUTANT (rep_const) */			return 0;
1039: /* MUTANT (rep_const) */			return 1;
1039: /* MUTANT (rep_const) */			return ((-1)+1);
1039: /* MUTANT (rep_const) */			return ((-1)-1);
1041: /* MUTANT (rep_op) */		if (choice1 != 1)
1041: /* MUTANT (rep_const) */		if (choice1 == 0)
1041: /* MUTANT (rep_const) */		if (choice1 == -1)
1041: /* MUTANT (rep_const) */		if (choice1 == ((1)+1))
1041: /* MUTANT (negate) */		if(! (choice1 == 1))
1043: /* MUTANT (del_stmt) */ /* 			playedCard(handPos, NULL, NULL, state); */ 
1045: /* MUTANT (del_stmt) */ /* 			drawCard(currentPlayer, state); */ 
1046: /* MUTANT (del_stmt) */ /* 			drawCard(currentPlayer, state); */ 
1048: /* MUTANT (rep_op) */		else if (choice1 != 2)
1048: /* MUTANT (rep_const) */		else if (choice1 == 0)
1048: /* MUTANT (rep_const) */		else if (choice1 == 1)
1048: /* MUTANT (rep_const) */		else if (choice1 == -1)
1048: /* MUTANT (rep_const) */		else if (choice1 == ((2)+1))
1048: /* MUTANT (rep_const) */		else if (choice1 == ((2)-1))
1048: /* MUTANT (negate) */		else if(! (choice1 == 2))
1051: /* MUTANT (del_stmt) */ /* 			playedCard(handPos, NULL, NULL, state); */ 
1052: /* MUTANT (del_stmt) */ /* 			*bonus += 2; */ 
1052: /* MUTANT (rep_op) */			*bonus -= 2;
1052: /* MUTANT (rep_op) */			*bonus *= 2;
1052: /* MUTANT (rep_op) */			*bonus %= 2;
1052: /* MUTANT (rep_const) */			*bonus += 0;
1052: /* MUTANT (rep_const) */			*bonus += 1;
1052: /* MUTANT (rep_const) */			*bonus += -1;
1052: /* MUTANT (rep_const) */			*bonus += ((2)+1);
1052: /* MUTANT (rep_const) */			*bonus += ((2)-1);
1056: /* MUTANT (del_stmt) */ /* 			playedCard(handPos, &choice2, &choice3, state); */ 
1058: /* MUTANT (rep_op) */			if (choice2 <= choice3) {
1058: /* MUTANT (rep_op) */			if (choice2 > choice3) {
1058: /* MUTANT (rep_op) */			if (choice2 >= choice3) {
1058: /* MUTANT (rep_op) */			if (choice2 == choice3) {
1058: /* MUTANT (rep_op) */			if (choice2 != choice3) {
1058: /* MUTANT (negate) */			if(! (choice2 < choice3)) {
1059: /* MUTANT (del_stmt) */ /* 				int tmp = choice2; */ 
1060: /* MUTANT (del_stmt) */ /* 				choice2 = choice3; */ 
1061: /* MUTANT (del_stmt) */ /* 				choice3 = tmp; */ 
1065: /* MUTANT (rep_const) */			discardCard(choice2, currentPlayer, state, 0);
1065: /* MUTANT (rep_const) */			discardCard(choice2, currentPlayer, state, -1);
1065: /* MUTANT (rep_const) */			discardCard(choice2, currentPlayer, state, ((1)+1));
1066: /* MUTANT (del_stmt) */ /* 			discardCard(choice3, currentPlayer, state, 1); */ 			
1066: /* MUTANT (rep_const) */			discardCard(choice3, currentPlayer, state, 0);			
1066: /* MUTANT (rep_const) */			discardCard(choice3, currentPlayer, state, -1);			
1066: /* MUTANT (rep_const) */			discardCard(choice3, currentPlayer, state, ((1)+1));			
1068: /* MUTANT (rep_const) */		endPlayed(state, 1);
1068: /* MUTANT (rep_const) */		endPlayed(state, -1);
1069: /* MUTANT (del_stmt) */ /* 		return 0; */ 
1069: /* MUTANT (rep_const) */		return 1;
1069: /* MUTANT (rep_const) */		return -1;
1073: /* MUTANT (rep_op) */		if ((state->discardCount[nextPlayer] - state->deckCount[nextPlayer]) <= 1) {
1073: /* MUTANT (rep_op) */		if ((state->discardCount[nextPlayer] * state->deckCount[nextPlayer]) <= 1) {
1073: /* MUTANT (rep_op) */		if ((state->discardCount[nextPlayer] % state->deckCount[nextPlayer]) <= 1) {
1073: /* MUTANT (rep_op) */		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) < 1) {
1073: /* MUTANT (rep_op) */		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) > 1) {
1073: /* MUTANT (rep_op) */		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) >= 1) {
1073: /* MUTANT (rep_op) */		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) == 1) {
1073: /* MUTANT (rep_op) */		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) != 1) {
1073: /* MUTANT (rep_const) */		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 0) {
1073: /* MUTANT (rep_const) */		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= -1) {
1073: /* MUTANT (rep_const) */		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= ((1)+1)) {
1073: /* MUTANT (negate) */		if(! ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)) {
1074: /* MUTANT (rep_op) */			if (state->deckCount[nextPlayer] <= 0) {
1074: /* MUTANT (rep_op) */			if (state->deckCount[nextPlayer] < 0) {
1074: /* MUTANT (rep_op) */			if (state->deckCount[nextPlayer] >= 0) {
1074: /* MUTANT (rep_op) */			if (state->deckCount[nextPlayer] == 0) {
1074: /* MUTANT (rep_op) */			if (state->deckCount[nextPlayer] != 0) {
1074: /* MUTANT (rep_const) */			if (state->deckCount[nextPlayer] > 1) {
1074: /* MUTANT (rep_const) */			if (state->deckCount[nextPlayer] > -1) {
1074: /* MUTANT (negate) */			if(! (state->deckCount[nextPlayer] > 0)) {
1075: /* MUTANT (del_stmt) */ /* 				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1]; */ 
1075: /* MUTANT (rep_const) */				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
1075: /* MUTANT (rep_const) */				tributeRevealedCards[-1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
1075: /* MUTANT (rep_const) */				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 0];
1075: /* MUTANT (rep_const) */				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - -1];
1075: /* MUTANT (rep_const) */				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - ((1)+1)];
1076: /* MUTANT (del_stmt) */ /* 				state->deckCount[nextPlayer]--; */ 
1076: /* MUTANT (rep_op) */				state->deckCount[nextPlayer]++;
1077: /* MUTANT (del_stmt) */ /* 				state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[0]; */ 
1077: /* MUTANT (rep_const) */				state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[1];
1077: /* MUTANT (rep_const) */				state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[-1];
1078: /* MUTANT (del_stmt) */ /* 				state->discardCount[nextPlayer]++; */ 
1078: /* MUTANT (rep_op) */				state->discardCount[nextPlayer]--;
1080: /* MUTANT (rep_op) */			else if (state->discardCount[nextPlayer] <= 0) {
1080: /* MUTANT (rep_op) */			else if (state->discardCount[nextPlayer] < 0) {
1080: /* MUTANT (rep_op) */			else if (state->discardCount[nextPlayer] >= 0) {
1080: /* MUTANT (rep_op) */			else if (state->discardCount[nextPlayer] == 0) {
1080: /* MUTANT (rep_op) */			else if (state->discardCount[nextPlayer] != 0) {
1080: /* MUTANT (rep_const) */			else if (state->discardCount[nextPlayer] > 1) {
1080: /* MUTANT (rep_const) */			else if (state->discardCount[nextPlayer] > -1) {
1080: /* MUTANT (negate) */			else if(! (state->discardCount[nextPlayer] > 0)) {
1081: /* MUTANT (del_stmt) */ /* 				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1]; */ 
1081: /* MUTANT (rep_const) */				tributeRevealedCards[1] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
1081: /* MUTANT (rep_const) */				tributeRevealedCards[-1] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
1081: /* MUTANT (rep_const) */				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 0];
1081: /* MUTANT (rep_const) */				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - -1];
1081: /* MUTANT (rep_const) */				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - ((1)+1)];
1085: /* MUTANT (negate) */				if(! (DEBUG)) {
1086: /* MUTANT (del_stmt) */ /* 					printf("No cards to reveal\n"); */ 
1088: /* MUTANT (rep_const) */				endPlayed(state, 1);
1088: /* MUTANT (rep_const) */				endPlayed(state, -1);
1089: /* MUTANT (del_stmt) */ /* 				return 0; */ 
1089: /* MUTANT (rep_const) */				return 1;
1089: /* MUTANT (rep_const) */				return -1;
1094: /* MUTANT (rep_op) */			if (state->deckCount[nextPlayer] != 0) {
1094: /* MUTANT (rep_const) */			if (state->deckCount[nextPlayer] == 1) {
1094: /* MUTANT (rep_const) */			if (state->deckCount[nextPlayer] == -1) {
1094: /* MUTANT (negate) */			if(! (state->deckCount[nextPlayer] == 0)) {
1095: /* MUTANT (del_stmt) */ /* 				j = state->discardCount[nextPlayer]; */ 
1096: /* MUTANT (rep_op) */				for (i = 0; i <= j; i++) {
1096: /* MUTANT (rep_op) */				for (i = 0; i > j; i++) {
1096: /* MUTANT (rep_op) */				for (i = 0; i >= j; i++) {
1096: /* MUTANT (rep_op) */				for (i = 0; i == j; i++) {
1096: /* MUTANT (rep_op) */				for (i = 0; i != j; i++) {
1096: /* MUTANT (rep_op) */				for (i = 0; i < j; i--) {
1096: /* MUTANT (rep_const) */				for (i = 1; i < j; i++) {
1096: /* MUTANT (rep_const) */				for (i = -1; i < j; i++) {
1097: /* MUTANT (del_stmt) */ /* 					state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; */ //Move to deck
1098: /* MUTANT (del_stmt) */ /* 					state->deckCount[nextPlayer]++; */ 
1098: /* MUTANT (rep_op) */					state->deckCount[nextPlayer]--;
1099: /* MUTANT (del_stmt) */ /* 					state->discard[nextPlayer][i] = -1; */ 
1099: /* MUTANT (rep_const) */					state->discard[nextPlayer][i] = 0;
1099: /* MUTANT (rep_const) */					state->discard[nextPlayer][i] = 1;
1099: /* MUTANT (rep_const) */					state->discard[nextPlayer][i] = ((-1)+1);
1099: /* MUTANT (rep_const) */					state->discard[nextPlayer][i] = ((-1)-1);
1100: /* MUTANT (del_stmt) */ /* 					state->discardCount[nextPlayer]--; */ 
1100: /* MUTANT (rep_op) */					state->discardCount[nextPlayer]++;
1105: /* MUTANT (rep_const) */			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
1105: /* MUTANT (rep_const) */			tributeRevealedCards[-1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
1105: /* MUTANT (rep_const) */			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 0];
1105: /* MUTANT (rep_const) */			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - -1];
1105: /* MUTANT (rep_const) */			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - ((1)+1)];
1106: /* MUTANT (del_stmt) */ /* 			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = -1; */ 
1106: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - 0] = -1;
1106: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - -1] = -1;
1106: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - ((1)+1)] = -1;
1106: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = 0;
1106: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = 1;
1106: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = ((-1)+1);
1106: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = ((-1)-1);
1107: /* MUTANT (del_stmt) */ /* 			state->deckCount[nextPlayer]--; */ 
1107: /* MUTANT (rep_op) */			state->deckCount[nextPlayer]++;
1109: /* MUTANT (rep_op) */			if (state->deckCount[nextPlayer] != 0) {
1109: /* MUTANT (rep_const) */			if (state->deckCount[nextPlayer] == 1) {
1109: /* MUTANT (rep_const) */			if (state->deckCount[nextPlayer] == -1) {
1109: /* MUTANT (negate) */			if(! (state->deckCount[nextPlayer] == 0)) {
1110: /* MUTANT (del_stmt) */ /* 				j = state->discardCount[nextPlayer]; */ 
1111: /* MUTANT (rep_op) */				for (i = 0; i <= j; i++) {
1111: /* MUTANT (rep_op) */				for (i = 0; i > j; i++) {
1111: /* MUTANT (rep_op) */				for (i = 0; i >= j; i++) {
1111: /* MUTANT (rep_op) */				for (i = 0; i == j; i++) {
1111: /* MUTANT (rep_op) */				for (i = 0; i != j; i++) {
1111: /* MUTANT (rep_op) */				for (i = 0; i < j; i--) {
1111: /* MUTANT (rep_const) */				for (i = 1; i < j; i++) {
1111: /* MUTANT (rep_const) */				for (i = -1; i < j; i++) {
1112: /* MUTANT (del_stmt) */ /* 					state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; */ //Move to deck
1113: /* MUTANT (del_stmt) */ /* 					state->deckCount[nextPlayer]++; */ 
1113: /* MUTANT (rep_op) */					state->deckCount[nextPlayer]--;
1114: /* MUTANT (del_stmt) */ /* 					state->discard[nextPlayer][i] = -1; */ 
1114: /* MUTANT (rep_const) */					state->discard[nextPlayer][i] = 0;
1114: /* MUTANT (rep_const) */					state->discard[nextPlayer][i] = 1;
1114: /* MUTANT (rep_const) */					state->discard[nextPlayer][i] = ((-1)+1);
1114: /* MUTANT (rep_const) */					state->discard[nextPlayer][i] = ((-1)-1);
1115: /* MUTANT (del_stmt) */ /* 					state->discardCount[nextPlayer]--; */ 
1115: /* MUTANT (rep_op) */					state->discardCount[nextPlayer]++;
1121: /* MUTANT (rep_const) */			state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[1];
1121: /* MUTANT (rep_const) */			state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[-1];
1122: /* MUTANT (del_stmt) */ /* 			state->discardCount[nextPlayer]++; */ 
1122: /* MUTANT (rep_op) */			state->discardCount[nextPlayer]--;
1124: /* MUTANT (del_stmt) */ /* 			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1]; */ 
1124: /* MUTANT (rep_const) */			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
1124: /* MUTANT (rep_const) */			tributeRevealedCards[-1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
1124: /* MUTANT (rep_const) */			tributeRevealedCards[((1)+1)] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
1124: /* MUTANT (rep_const) */			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 0];
1124: /* MUTANT (rep_const) */			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - -1];
1124: /* MUTANT (rep_const) */			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - ((1)+1)];
1125: /* MUTANT (del_stmt) */ /* 			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = -1; */ 
1125: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - 0] = -1;
1125: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - -1] = -1;
1125: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - ((1)+1)] = -1;
1125: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = 0;
1125: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = 1;
1125: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = ((-1)+1);
1125: /* MUTANT (rep_const) */			state->deck[nextPlayer][state->deckCount[nextPlayer] - 1] = ((-1)-1);
1126: /* MUTANT (del_stmt) */ /* 			state->deckCount[nextPlayer]--; */ 
1126: /* MUTANT (rep_op) */			state->deckCount[nextPlayer]++;
1127: /* MUTANT (del_stmt) */ /* 			state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[1]; */ 
1127: /* MUTANT (rep_const) */			state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[0];
1127: /* MUTANT (rep_const) */			state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[-1];
1127: /* MUTANT (rep_const) */			state->discard[nextPlayer][state->discardCount[nextPlayer]] = tributeRevealedCards[((1)+1)];
1128: /* MUTANT (del_stmt) */ /* 			state->discardCount[nextPlayer]++; */ 
1128: /* MUTANT (rep_op) */			state->discardCount[nextPlayer]--;
1131: /* MUTANT (rep_op) */		if (tributeRevealedCards[0] != tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
1131: /* MUTANT (rep_const) */		if (tributeRevealedCards[1] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
1131: /* MUTANT (rep_const) */		if (tributeRevealedCards[-1] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
1131: /* MUTANT (rep_const) */		if (tributeRevealedCards[0] == tributeRevealedCards[0]) {//If we have a duplicate card, just drop one 
1131: /* MUTANT (rep_const) */		if (tributeRevealedCards[0] == tributeRevealedCards[-1]) {//If we have a duplicate card, just drop one 
1131: /* MUTANT (rep_const) */		if (tributeRevealedCards[0] == tributeRevealedCards[((1)+1)]) {//If we have a duplicate card, just drop one 
1131: /* MUTANT (negate) */		if(! (tributeRevealedCards[0] == tributeRevealedCards[1])) {//If we have a duplicate card, just drop one 
1132: /* MUTANT (del_stmt) */ /* 			tributeRevealedCards[1] = -1; */ 
1132: /* MUTANT (rep_const) */			tributeRevealedCards[0] = -1;
1132: /* MUTANT (rep_const) */			tributeRevealedCards[-1] = -1;
1132: /* MUTANT (rep_const) */			tributeRevealedCards[((1)+1)] = -1;
1132: /* MUTANT (rep_const) */			tributeRevealedCards[1] = 0;
1132: /* MUTANT (rep_const) */			tributeRevealedCards[1] = 1;
1132: /* MUTANT (rep_const) */			tributeRevealedCards[1] = ((-1)+1);
1132: /* MUTANT (rep_const) */			tributeRevealedCards[1] = ((-1)-1);
1135: /* MUTANT (rep_op) */		for (i = 0; i <= 2; i++) {
1135: /* MUTANT (rep_op) */		for (i = 0; i > 2; i++) {
1135: /* MUTANT (rep_op) */		for (i = 0; i >= 2; i++) {
1135: /* MUTANT (rep_op) */		for (i = 0; i == 2; i++) {
1135: /* MUTANT (rep_op) */		for (i = 0; i != 2; i++) {
1135: /* MUTANT (rep_op) */		for (i = 0; i < 2; i--) {
1135: /* MUTANT (rep_const) */		for (i = 1; i < 2; i++) {
1135: /* MUTANT (rep_const) */		for (i = -1; i < 2; i++) {
1135: /* MUTANT (rep_const) */		for (i = 0; i < 0; i++) {
1135: /* MUTANT (rep_const) */		for (i = 0; i < 1; i++) {
1135: /* MUTANT (rep_const) */		for (i = 0; i < -1; i++) {
1135: /* MUTANT (rep_const) */		for (i = 0; i < ((2)+1); i++) {
1135: /* MUTANT (rep_const) */		for (i = 0; i < ((2)-1); i++) {
1136: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] != copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
1136: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == copper && tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
1136: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] != silver || tributeRevealedCards[i] == gold) {//Treasure cards
1136: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver && tributeRevealedCards[i] == gold) {//Treasure cards
1136: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] != gold) {//Treasure cards
1136: /* MUTANT (negate) */			if(! (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)) {//Treasure cards
1137: /* MUTANT (del_stmt) */ /* 				*bonus += 2; */ 
1137: /* MUTANT (rep_op) */				*bonus -= 2;
1137: /* MUTANT (rep_op) */				*bonus *= 2;
1137: /* MUTANT (rep_op) */				*bonus %= 2;
1137: /* MUTANT (rep_const) */				*bonus += 0;
1137: /* MUTANT (rep_const) */				*bonus += 1;
1137: /* MUTANT (rep_const) */				*bonus += -1;
1137: /* MUTANT (rep_const) */				*bonus += ((2)+1);
1137: /* MUTANT (rep_const) */				*bonus += ((2)-1);
1140: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] != estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
1140: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == estate && tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
1140: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] != duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
1140: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy && tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
1140: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] != province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
1140: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province && tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
1140: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] != gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
1140: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens && tributeRevealedCards[i] == great_hall) {//Victory Card Found
1140: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] != great_hall) {//Victory Card Found
1140: /* MUTANT (negate) */			if(! (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)) {//Victory Card Found
1141: /* MUTANT (del_stmt) */ /* 				drawCard(currentPlayer, state); */ 
1142: /* MUTANT (del_stmt) */ /* 				drawCard(currentPlayer, state); */ 
1144: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] <= adventurer && tributeRevealedCards[i] <= treasure_map){//Action Card
1144: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] < adventurer && tributeRevealedCards[i] <= treasure_map){//Action Card
1144: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] > adventurer && tributeRevealedCards[i] <= treasure_map){//Action Card
1144: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] == adventurer && tributeRevealedCards[i] <= treasure_map){//Action Card
1144: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] != adventurer && tributeRevealedCards[i] <= treasure_map){//Action Card
1144: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] >= adventurer || tributeRevealedCards[i] <= treasure_map){//Action Card
1144: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] >= adventurer && tributeRevealedCards[i] < treasure_map){//Action Card
1144: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] >= adventurer && tributeRevealedCards[i] > treasure_map){//Action Card
1144: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] >= adventurer && tributeRevealedCards[i] >= treasure_map){//Action Card
1144: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] >= adventurer && tributeRevealedCards[i] == treasure_map){//Action Card
1144: /* MUTANT (rep_op) */			if (tributeRevealedCards[i] >= adventurer && tributeRevealedCards[i] != treasure_map){//Action Card
1144: /* MUTANT (negate) */			if(! (tributeRevealedCards[i] >= adventurer && tributeRevealedCards[i] <= treasure_map)){//Action Card
1145: /* MUTANT (del_stmt) */ /* 				state->numActions = state->numActions + 2; */ 
1145: /* MUTANT (rep_op) */				state->numActions = state->numActions - 2;
1145: /* MUTANT (rep_op) */				state->numActions = state->numActions * 2;
1145: /* MUTANT (rep_op) */				state->numActions = state->numActions % 2;
1145: /* MUTANT (rep_const) */				state->numActions = state->numActions + 0;
1145: /* MUTANT (rep_const) */				state->numActions = state->numActions + 1;
1145: /* MUTANT (rep_const) */				state->numActions = state->numActions + -1;
1145: /* MUTANT (rep_const) */				state->numActions = state->numActions + ((2)+1);
1145: /* MUTANT (rep_const) */				state->numActions = state->numActions + ((2)-1);
1149: /* MUTANT (rep_const) */		endPlayed(state, 1);
1149: /* MUTANT (rep_const) */		endPlayed(state, -1);
1151: /* MUTANT (del_stmt) */ /* 		return 0; */ 
1151: /* MUTANT (rep_const) */		return 1;
1151: /* MUTANT (rep_const) */		return -1;
1154: /* MUTANT (rep_const) */		j = 1;        //used to check if player has enough cards to discard
1154: /* MUTANT (rep_const) */		j = -1;        //used to check if player has enough cards to discard
1156: /* MUTANT (rep_op) */		if (choice2 <= 2 || choice2 < 0)
1156: /* MUTANT (rep_op) */		if (choice2 < 2 || choice2 < 0)
1156: /* MUTANT (rep_op) */		if (choice2 >= 2 || choice2 < 0)
1156: /* MUTANT (rep_op) */		if (choice2 == 2 || choice2 < 0)
1156: /* MUTANT (rep_op) */		if (choice2 != 2 || choice2 < 0)
1156: /* MUTANT (rep_op) */		if (choice2 > 2 && choice2 < 0)
1156: /* MUTANT (rep_op) */		if (choice2 > 2 || choice2 <= 0)
1156: /* MUTANT (rep_op) */		if (choice2 > 2 || choice2 > 0)
1156: /* MUTANT (rep_op) */		if (choice2 > 2 || choice2 >= 0)
1156: /* MUTANT (rep_op) */		if (choice2 > 2 || choice2 == 0)
1156: /* MUTANT (rep_op) */		if (choice2 > 2 || choice2 != 0)
1156: /* MUTANT (rep_const) */		if (choice2 > 0 || choice2 < 0)
1156: /* MUTANT (rep_const) */		if (choice2 > 1 || choice2 < 0)
1156: /* MUTANT (rep_const) */		if (choice2 > -1 || choice2 < 0)
1156: /* MUTANT (rep_const) */		if (choice2 > ((2)+1) || choice2 < 0)
1156: /* MUTANT (rep_const) */		if (choice2 > ((2)-1) || choice2 < 0)
1156: /* MUTANT (rep_const) */		if (choice2 > 2 || choice2 < 1)
1156: /* MUTANT (rep_const) */		if (choice2 > 2 || choice2 < -1)
1156: /* MUTANT (negate) */		if(! (choice2 > 2 || choice2 < 0))
1158: /* MUTANT (del_stmt) */ /* 			return -1; */ 
1158: /* MUTANT (rep_const) */			return 0;
1158: /* MUTANT (rep_const) */			return 1;
1158: /* MUTANT (rep_const) */			return ((-1)+1);
1158: /* MUTANT (rep_const) */			return ((-1)-1);
1161: /* MUTANT (rep_op) */		if (choice1 != handPos || choice1 >= numHandCards(state) || choice1 < 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos && choice1 >= numHandCards(state) || choice1 < 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos || choice1 <= numHandCards(state) || choice1 < 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos || choice1 < numHandCards(state) || choice1 < 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos || choice1 > numHandCards(state) || choice1 < 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos || choice1 == numHandCards(state) || choice1 < 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos || choice1 != numHandCards(state) || choice1 < 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos || choice1 >= numHandCards(state) && choice1 < 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos || choice1 >= numHandCards(state) || choice1 <= 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos || choice1 >= numHandCards(state) || choice1 > 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos || choice1 >= numHandCards(state) || choice1 >= 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos || choice1 >= numHandCards(state) || choice1 == 0)
1161: /* MUTANT (rep_op) */		if (choice1 == handPos || choice1 >= numHandCards(state) || choice1 != 0)
1161: /* MUTANT (rep_const) */		if (choice1 == handPos || choice1 >= numHandCards(state) || choice1 < 1)
1161: /* MUTANT (rep_const) */		if (choice1 == handPos || choice1 >= numHandCards(state) || choice1 < -1)
1161: /* MUTANT (negate) */		if(! (choice1 == handPos || choice1 >= numHandCards(state) || choice1 < 0))
1163: /* MUTANT (del_stmt) */ /* 			return -1; */ 
1163: /* MUTANT (rep_const) */			return 0;
1163: /* MUTANT (rep_const) */			return 1;
1163: /* MUTANT (rep_const) */			return ((-1)+1);
1163: /* MUTANT (rep_const) */			return ((-1)-1);
1166: /* MUTANT (rep_op) */		for (i = 0; i <= state->handCount[currentPlayer]; i++)
1166: /* MUTANT (rep_op) */		for (i = 0; i > state->handCount[currentPlayer]; i++)
1166: /* MUTANT (rep_op) */		for (i = 0; i >= state->handCount[currentPlayer]; i++)
1166: /* MUTANT (rep_op) */		for (i = 0; i == state->handCount[currentPlayer]; i++)
1166: /* MUTANT (rep_op) */		for (i = 0; i != state->handCount[currentPlayer]; i++)
1166: /* MUTANT (rep_op) */		for (i = 0; i < state->handCount[currentPlayer]; i--)
1166: /* MUTANT (rep_const) */		for (i = 1; i < state->handCount[currentPlayer]; i++)
1166: /* MUTANT (rep_const) */		for (i = -1; i < state->handCount[currentPlayer]; i++)
1168: /* MUTANT (rep_op) */			if (i == handPos && i == state->hand[currentPlayer][choice1])
1168: /* MUTANT (rep_op) */			if (i != handPos || i == state->hand[currentPlayer][choice1])
1168: /* MUTANT (rep_op) */			if (i != handPos && i != state->hand[currentPlayer][choice1])
1168: /* MUTANT (negate) */			if(! (i != handPos && i == state->hand[currentPlayer][choice1]))
1170: /* MUTANT (del_stmt) */ /* 				j++; */ 
1170: /* MUTANT (rep_op) */				j--;
1173: /* MUTANT (rep_op) */		if (j <= choice2)
1173: /* MUTANT (rep_op) */		if (j > choice2)
1173: /* MUTANT (rep_op) */		if (j >= choice2)
1173: /* MUTANT (rep_op) */		if (j == choice2)
1173: /* MUTANT (rep_op) */		if (j != choice2)
1173: /* MUTANT (negate) */		if(! (j < choice2))
1175: /* MUTANT (del_stmt) */ /* 			return -1; */ 
1175: /* MUTANT (rep_const) */			return 0;
1175: /* MUTANT (rep_const) */			return 1;
1175: /* MUTANT (rep_const) */			return ((-1)+1);
1175: /* MUTANT (rep_const) */			return ((-1)-1);
1180: /* MUTANT (negate) */		if(! (DEBUG))
1184: /* MUTANT (del_stmt) */ /* 		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2; */ 
1184: /* MUTANT (rep_op) */		state->supplyCount[state->hand[currentPlayer][choice1]] -= choice2;
1184: /* MUTANT (rep_op) */		state->supplyCount[state->hand[currentPlayer][choice1]] *= choice2;
1184: /* MUTANT (rep_op) */		state->supplyCount[state->hand[currentPlayer][choice1]] %= choice2;
1187: /* MUTANT (rep_op) */		for (i = 0; i <= state->numPlayers; i++)
1187: /* MUTANT (rep_op) */		for (i = 0; i > state->numPlayers; i++)
1187: /* MUTANT (rep_op) */		for (i = 0; i >= state->numPlayers; i++)
1187: /* MUTANT (rep_op) */		for (i = 0; i == state->numPlayers; i++)
1187: /* MUTANT (rep_op) */		for (i = 0; i != state->numPlayers; i++)
1187: /* MUTANT (rep_op) */		for (i = 0; i < state->numPlayers; i--)
1187: /* MUTANT (rep_const) */		for (i = 1; i < state->numPlayers; i++)
1187: /* MUTANT (rep_const) */		for (i = -1; i < state->numPlayers; i++)
1189: /* MUTANT (rep_op) */			if (i == currentPlayer)
1189: /* MUTANT (negate) */			if(! (i != currentPlayer))
1191: /* MUTANT (del_stmt) */ /* 				gainCard(state->hand[currentPlayer][choice1], state, 0, i); */ 
1191: /* MUTANT (rep_const) */				gainCard(state->hand[currentPlayer][choice1], state, 1, i);
1191: /* MUTANT (rep_const) */				gainCard(state->hand[currentPlayer][choice1], state, -1, i);
1196: /* MUTANT (rep_op) */		for (j = 0; j <= choice2; j++)
1196: /* MUTANT (rep_op) */		for (j = 0; j > choice2; j++)
1196: /* MUTANT (rep_op) */		for (j = 0; j >= choice2; j++)
1196: /* MUTANT (rep_op) */		for (j = 0; j == choice2; j++)
1196: /* MUTANT (rep_op) */		for (j = 0; j != choice2; j++)
1196: /* MUTANT (rep_op) */		for (j = 0; j < choice2; j--)
1196: /* MUTANT (rep_const) */		for (j = 1; j < choice2; j++)
1196: /* MUTANT (rep_const) */		for (j = -1; j < choice2; j++)
1198: /* MUTANT (rep_op) */			for (i = state->handCount[currentPlayer] - 1; i <= 0; i--)
1198: /* MUTANT (rep_op) */			for (i = state->handCount[currentPlayer] - 1; i < 0; i--)
1198: /* MUTANT (rep_op) */			for (i = state->handCount[currentPlayer] - 1; i > 0; i--)
1198: /* MUTANT (rep_op) */			for (i = state->handCount[currentPlayer] - 1; i == 0; i--)
1198: /* MUTANT (rep_op) */			for (i = state->handCount[currentPlayer] - 1; i != 0; i--)
1198: /* MUTANT (rep_op) */			for (i = state->handCount[currentPlayer] - 1; i >= 0; i++)
1198: /* MUTANT (rep_const) */			for (i = state->handCount[currentPlayer] - 0; i >= 0; i--)
1198: /* MUTANT (rep_const) */			for (i = state->handCount[currentPlayer] - -1; i >= 0; i--)
1198: /* MUTANT (rep_const) */			for (i = state->handCount[currentPlayer] - ((1)+1); i >= 0; i--)
1198: /* MUTANT (rep_const) */			for (i = state->handCount[currentPlayer] - 1; i >= 1; i--)
1198: /* MUTANT (rep_const) */			for (i = state->handCount[currentPlayer] - 1; i >= -1; i--)
1200: /* MUTANT (rep_op) */				if (state->hand[currentPlayer][i] != state->hand[currentPlayer][choice1])
1200: /* MUTANT (negate) */				if(! (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]))
1202: /* MUTANT (del_stmt) */ /* 					discardCard(i, currentPlayer, state, 1); */ 
1202: /* MUTANT (rep_const) */					discardCard(i, currentPlayer, state, 0);
1202: /* MUTANT (rep_const) */					discardCard(i, currentPlayer, state, -1);
1202: /* MUTANT (rep_const) */					discardCard(i, currentPlayer, state, ((1)+1));
1203: /* MUTANT (del_stmt) */ /* 					break; */ 
1208: /* MUTANT (rep_const) */		endPlayed(state, 1);
1208: /* MUTANT (rep_const) */		endPlayed(state, -1);
1210: /* MUTANT (del_stmt) */ /* 		return 0; */ 
1210: /* MUTANT (rep_const) */		return 1;
1210: /* MUTANT (rep_const) */		return -1;
1216: /* MUTANT (rep_op) */		if (choice1 <= curse || choice1 > treasure_map)
1216: /* MUTANT (rep_op) */		if (choice1 > curse || choice1 > treasure_map)
1216: /* MUTANT (rep_op) */		if (choice1 >= curse || choice1 > treasure_map)
1216: /* MUTANT (rep_op) */		if (choice1 == curse || choice1 > treasure_map)
1216: /* MUTANT (rep_op) */		if (choice1 != curse || choice1 > treasure_map)
1216: /* MUTANT (rep_op) */		if (choice1 < curse && choice1 > treasure_map)
1216: /* MUTANT (rep_op) */		if (choice1 < curse || choice1 <= treasure_map)
1216: /* MUTANT (rep_op) */		if (choice1 < curse || choice1 < treasure_map)
1216: /* MUTANT (rep_op) */		if (choice1 < curse || choice1 >= treasure_map)
1216: /* MUTANT (rep_op) */		if (choice1 < curse || choice1 == treasure_map)
1216: /* MUTANT (rep_op) */		if (choice1 < curse || choice1 != treasure_map)
1216: /* MUTANT (negate) */		if(! (choice1 < curse || choice1 > treasure_map))
1217: /* MUTANT (rep_const) */			return 0;
1217: /* MUTANT (rep_const) */			return 1;
1217: /* MUTANT (rep_const) */			return ((-1)+1);
1217: /* MUTANT (rep_const) */			return ((-1)-1);
1219: /* MUTANT (rep_op) */		if (state->supplyCount[choice1] != -1)
1219: /* MUTANT (rep_const) */		if (state->supplyCount[choice1] == 0)
1219: /* MUTANT (rep_const) */		if (state->supplyCount[choice1] == 1)
1219: /* MUTANT (rep_const) */		if (state->supplyCount[choice1] == ((-1)+1))
1219: /* MUTANT (rep_const) */		if (state->supplyCount[choice1] == ((-1)-1))
1219: /* MUTANT (negate) */		if(! (state->supplyCount[choice1] == -1))
1221: /* MUTANT (del_stmt) */ /* 			return -1; */ 
1221: /* MUTANT (rep_const) */			return 0;
1221: /* MUTANT (rep_const) */			return 1;
1221: /* MUTANT (rep_const) */			return ((-1)+1);
1221: /* MUTANT (rep_const) */			return ((-1)-1);
1227: /* MUTANT (del_stmt) */ /* 		*bonus += 2; */ 
1227: /* MUTANT (rep_op) */		*bonus -= 2;
1227: /* MUTANT (rep_op) */		*bonus *= 2;
1227: /* MUTANT (rep_op) */		*bonus %= 2;
1227: /* MUTANT (rep_const) */		*bonus += 0;
1227: /* MUTANT (rep_const) */		*bonus += 1;
1227: /* MUTANT (rep_const) */		*bonus += -1;
1227: /* MUTANT (rep_const) */		*bonus += ((2)+1);
1227: /* MUTANT (rep_const) */		*bonus += ((2)-1);
1230: /* MUTANT (del_stmt) */ /* 		state->embargoTokens[choice1]++; */ 
1230: /* MUTANT (rep_op) */		state->embargoTokens[choice1]--;
1233: /* MUTANT (del_stmt) */ /* 		endPlayed(state, 1); */ 
1233: /* MUTANT (rep_const) */		endPlayed(state, 0);
1233: /* MUTANT (rep_const) */		endPlayed(state, -1);
1233: /* MUTANT (rep_const) */		endPlayed(state, ((1)+1));
1234: /* MUTANT (del_stmt) */ /* 		return 0; */ 
1234: /* MUTANT (rep_const) */		return 1;
1234: /* MUTANT (rep_const) */		return -1;
1237: /* MUTANT (rep_op) */		if (state->outpostTurn != 1)
1237: /* MUTANT (rep_const) */		if (state->outpostTurn == 0)
1237: /* MUTANT (rep_const) */		if (state->outpostTurn == -1)
1237: /* MUTANT (rep_const) */		if (state->outpostTurn == ((1)+1))
1237: /* MUTANT (negate) */		if(! (state->outpostTurn == 1))
1238: /* MUTANT (rep_const) */			return 0;
1238: /* MUTANT (rep_const) */			return 1;
1238: /* MUTANT (rep_const) */			return ((-1)+1);
1238: /* MUTANT (rep_const) */			return ((-1)-1);
1240: /* MUTANT (del_stmt) */ /* 		playedCard(handPos, NULL, NULL, state); */ 
1242: /* MUTANT (del_stmt) */ /* 		state->outpostPlayed = 1; */ 
1242: /* MUTANT (rep_const) */		state->outpostPlayed = 0;
1242: /* MUTANT (rep_const) */		state->outpostPlayed = -1;
1242: /* MUTANT (rep_const) */		state->outpostPlayed = ((1)+1);
1245: /* MUTANT (del_stmt) */ /* 		return 0; */ 
1245: /* MUTANT (rep_const) */		return 1;
1245: /* MUTANT (rep_const) */		return -1;
1248: /* MUTANT (rep_op) */		if (choice1 <= state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 < state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 > state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 == state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 != state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] && choice1 < 0 || choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 <= 0 || choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 > 0 || choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 >= 0 || choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 == 0 || choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 != 0 || choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < 0 && choice1 == handPos)
1248: /* MUTANT (rep_op) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < 0 || choice1 != handPos)
1248: /* MUTANT (rep_const) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < 1 || choice1 == handPos)
1248: /* MUTANT (rep_const) */		if (choice1 >= state->handCount[currentPlayer] || choice1 < -1 || choice1 == handPos)
1248: /* MUTANT (negate) */		if(! (choice1 >= state->handCount[currentPlayer] || choice1 < 0 || choice1 == handPos))
1249: /* MUTANT (rep_const) */			return 0;
1249: /* MUTANT (rep_const) */			return 1;
1249: /* MUTANT (rep_const) */			return ((-1)+1);
1249: /* MUTANT (rep_const) */			return ((-1)-1);
1251: /* MUTANT (del_stmt) */ /* 		playedCard(handPos, &choice1, NULL, state); */ 
1254: /* MUTANT (del_stmt) */ /* 		state->numBuys++; */ 
1254: /* MUTANT (rep_op) */		state->numBuys--;
1257: /* MUTANT (del_stmt) */ /* 		*bonus += getCost(handCard(choice1, state)); */ 
1257: /* MUTANT (rep_op) */		*bonus -= getCost(handCard(choice1, state));
1257: /* MUTANT (rep_op) */		*bonus *= getCost(handCard(choice1, state));
1257: /* MUTANT (rep_op) */		*bonus %= getCost(handCard(choice1, state));
1260: /* MUTANT (del_stmt) */ /* 		discardCard(choice1, currentPlayer, state, 1); */ 
1260: /* MUTANT (rep_const) */		discardCard(choice1, currentPlayer, state, 0);
1260: /* MUTANT (rep_const) */		discardCard(choice1, currentPlayer, state, -1);
1260: /* MUTANT (rep_const) */		discardCard(choice1, currentPlayer, state, ((1)+1));
1262: /* MUTANT (del_stmt) */ /* 		endPlayed(state, 0); */ 
1262: /* MUTANT (rep_const) */		endPlayed(state, 1);
1262: /* MUTANT (rep_const) */		endPlayed(state, -1);
1263: /* MUTANT (del_stmt) */ /* 		return 0; */ 
1263: /* MUTANT (rep_const) */		return 1;
1263: /* MUTANT (rep_const) */		return -1;
1267: /* MUTANT (rep_op) */		for (i = 0; i <= state->numPlayers; i++) {
1267: /* MUTANT (rep_op) */		for (i = 0; i > state->numPlayers; i++) {
1267: /* MUTANT (rep_op) */		for (i = 0; i >= state->numPlayers; i++) {
1267: /* MUTANT (rep_op) */		for (i = 0; i == state->numPlayers; i++) {
1267: /* MUTANT (rep_op) */		for (i = 0; i != state->numPlayers; i++) {
1267: /* MUTANT (rep_op) */		for (i = 0; i < state->numPlayers; i--) {
1267: /* MUTANT (rep_const) */		for (i = 1; i < state->numPlayers; i++) {
1267: /* MUTANT (rep_const) */		for (i = -1; i < state->numPlayers; i++) {
1268: /* MUTANT (rep_op) */			if (i == currentPlayer) {
1268: /* MUTANT (negate) */			if(! (i != currentPlayer)) {
1269: /* MUTANT (rep_op) */				if (state->deckCount[i] - state->discardCount[i] > 0) {
1269: /* MUTANT (rep_op) */				if (state->deckCount[i] * state->discardCount[i] > 0) {
1269: /* MUTANT (rep_op) */				if (state->deckCount[i] % state->discardCount[i] > 0) {
1269: /* MUTANT (rep_op) */				if (state->deckCount[i] + state->discardCount[i] <= 0) {
1269: /* MUTANT (rep_op) */				if (state->deckCount[i] + state->discardCount[i] < 0) {
1269: /* MUTANT (rep_op) */				if (state->deckCount[i] + state->discardCount[i] >= 0) {
1269: /* MUTANT (rep_op) */				if (state->deckCount[i] + state->discardCount[i] == 0) {
1269: /* MUTANT (rep_op) */				if (state->deckCount[i] + state->discardCount[i] != 0) {
1269: /* MUTANT (rep_const) */				if (state->deckCount[i] + state->discardCount[i] > 1) {
1269: /* MUTANT (rep_const) */				if (state->deckCount[i] + state->discardCount[i] > -1) {
1269: /* MUTANT (negate) */				if(! (state->deckCount[i] + state->discardCount[i] > 0)) {
1270: /* MUTANT (rep_op) */					if (state->deckCount[i] != 0) {
1270: /* MUTANT (rep_const) */					if (state->deckCount[i] == 1) {
1270: /* MUTANT (rep_const) */					if (state->deckCount[i] == -1) {
1270: /* MUTANT (negate) */					if(! (state->deckCount[i] == 0)) {
1271: /* MUTANT (del_stmt) */ /* 						j = state->discardCount[i]; */ 
1272: /* MUTANT (rep_op) */						for (index = 0; index <= j; index++) {
1272: /* MUTANT (rep_op) */						for (index = 0; index > j; index++) {
1272: /* MUTANT (rep_op) */						for (index = 0; index >= j; index++) {
1272: /* MUTANT (rep_op) */						for (index = 0; index == j; index++) {
1272: /* MUTANT (rep_op) */						for (index = 0; index != j; index++) {
1272: /* MUTANT (rep_op) */						for (index = 0; index < j; index--) {
1272: /* MUTANT (rep_const) */						for (index = 1; index < j; index++) {
1272: /* MUTANT (rep_const) */						for (index = -1; index < j; index++) {
1273: /* MUTANT (del_stmt) */ /* 							state->deck[i][index] = state->discard[i][index]; */ //Move to deck
1274: /* MUTANT (del_stmt) */ /* 							state->deckCount[i]++; */ 
1274: /* MUTANT (rep_op) */							state->deckCount[i]--;
1275: /* MUTANT (del_stmt) */ /* 							state->discard[i][index] = -1; */ 
1275: /* MUTANT (rep_const) */							state->discard[i][index] = 0;
1275: /* MUTANT (rep_const) */							state->discard[i][index] = 1;
1275: /* MUTANT (rep_const) */							state->discard[i][index] = ((-1)+1);
1275: /* MUTANT (rep_const) */							state->discard[i][index] = ((-1)-1);
1276: /* MUTANT (del_stmt) */ /* 							state->discardCount[i]--; */ 
1276: /* MUTANT (rep_op) */							state->discardCount[i]++;
1281: /* MUTANT (rep_const) */					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i] - 0];
1281: /* MUTANT (rep_const) */					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i] - -1];
1281: /* MUTANT (rep_const) */					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i] - ((1)+1)];
1282: /* MUTANT (del_stmt) */ /* 					state->discardCount[i]++; */ 
1282: /* MUTANT (rep_op) */					state->discardCount[i]--;
1284: /* MUTANT (del_stmt) */ /* 					gainCard(curse, state, 1, i); */ 
1284: /* MUTANT (rep_const) */					gainCard(curse, state, 0, i);
1284: /* MUTANT (rep_const) */					gainCard(curse, state, -1, i);
1284: /* MUTANT (rep_const) */					gainCard(curse, state, ((1)+1), i);
1287: /* MUTANT (del_stmt) */ /* 					gainCard(curse, state, 1, i); */ 
1287: /* MUTANT (rep_const) */					gainCard(curse, state, 0, i);
1287: /* MUTANT (rep_const) */					gainCard(curse, state, -1, i);
1287: /* MUTANT (rep_const) */					gainCard(curse, state, ((1)+1), i);
1291: /* MUTANT (rep_const) */		endPlayed(state, 1);
1291: /* MUTANT (rep_const) */		endPlayed(state, -1);
1292: /* MUTANT (del_stmt) */ /* 		return 0; */ 
1292: /* MUTANT (rep_const) */		return 1;
1292: /* MUTANT (rep_const) */		return -1;
1296: /* MUTANT (rep_const) */		index = 0;
1296: /* MUTANT (rep_const) */		index = 1;
1296: /* MUTANT (rep_const) */		index = ((-1)+1);
1296: /* MUTANT (rep_const) */		index = ((-1)-1);
1297: /* MUTANT (rep_op) */		for (i = 0; i <= state->handCount[currentPlayer]; i++)
1297: /* MUTANT (rep_op) */		for (i = 0; i > state->handCount[currentPlayer]; i++)
1297: /* MUTANT (rep_op) */		for (i = 0; i >= state->handCount[currentPlayer]; i++)
1297: /* MUTANT (rep_op) */		for (i = 0; i == state->handCount[currentPlayer]; i++)
1297: /* MUTANT (rep_op) */		for (i = 0; i != state->handCount[currentPlayer]; i++)
1297: /* MUTANT (rep_op) */		for (i = 0; i < state->handCount[currentPlayer]; i--)
1297: /* MUTANT (rep_const) */		for (i = 1; i < state->handCount[currentPlayer]; i++)
1297: /* MUTANT (rep_const) */		for (i = -1; i < state->handCount[currentPlayer]; i++)
1299: /* MUTANT (rep_op) */			if (state->hand[currentPlayer][i] != treasure_map && i != handPos)
1299: /* MUTANT (rep_op) */			if (state->hand[currentPlayer][i] == treasure_map || i != handPos)
1299: /* MUTANT (rep_op) */			if (state->hand[currentPlayer][i] == treasure_map && i == handPos)
1299: /* MUTANT (negate) */			if(! (state->hand[currentPlayer][i] == treasure_map && i != handPos))
1301: /* MUTANT (del_stmt) */ /* 				index = i; */ 
1302: /* MUTANT (del_stmt) */ /* 				break; */ 
1305: /* MUTANT (rep_op) */		if (index <= -1){
1305: /* MUTANT (rep_op) */		if (index < -1){
1305: /* MUTANT (rep_op) */		if (index >= -1){
1305: /* MUTANT (rep_op) */		if (index == -1){
1305: /* MUTANT (rep_op) */		if (index != -1){
1305: /* MUTANT (rep_const) */		if (index > 0){
1305: /* MUTANT (rep_const) */		if (index > 1){
1305: /* MUTANT (rep_const) */		if (index > ((-1)+1)){
1305: /* MUTANT (rep_const) */		if (index > ((-1)-1)){
1305: /* MUTANT (negate) */		if(! (index > -1)){
1306: /* MUTANT (del_stmt) */ /* 			playedCard(handPos, &index, NULL, state); */ 
1308: /* MUTANT (del_stmt) */ /* 			discardCard(index, currentPlayer, state, 1); */ 
1308: /* MUTANT (rep_const) */			discardCard(index, currentPlayer, state, 0);
1308: /* MUTANT (rep_const) */			discardCard(index, currentPlayer, state, -1);
1308: /* MUTANT (rep_const) */			discardCard(index, currentPlayer, state, ((1)+1));
1311: /* MUTANT (rep_op) */			for (i = 0; i <= 4; i++)
1311: /* MUTANT (rep_op) */			for (i = 0; i > 4; i++)
1311: /* MUTANT (rep_op) */			for (i = 0; i >= 4; i++)
1311: /* MUTANT (rep_op) */			for (i = 0; i == 4; i++)
1311: /* MUTANT (rep_op) */			for (i = 0; i != 4; i++)
1311: /* MUTANT (rep_op) */			for (i = 0; i < 4; i--)
1311: /* MUTANT (rep_const) */			for (i = 1; i < 4; i++)
1311: /* MUTANT (rep_const) */			for (i = -1; i < 4; i++)
1311: /* MUTANT (rep_const) */			for (i = 0; i < 0; i++)
1311: /* MUTANT (rep_const) */			for (i = 0; i < 1; i++)
1311: /* MUTANT (rep_const) */			for (i = 0; i < -1; i++)
1311: /* MUTANT (rep_const) */			for (i = 0; i < ((4)+1); i++)
1311: /* MUTANT (rep_const) */			for (i = 0; i < ((4)-1); i++)
1313: /* MUTANT (del_stmt) */ /* 				gainCard(gold, state, 1, currentPlayer); */ 
1313: /* MUTANT (rep_const) */				gainCard(gold, state, 0, currentPlayer);
1313: /* MUTANT (rep_const) */				gainCard(gold, state, -1, currentPlayer);
1313: /* MUTANT (rep_const) */				gainCard(gold, state, ((1)+1), currentPlayer);
1317: /* MUTANT (del_stmt) */ /* 			return -1; */ 
1317: /* MUTANT (rep_const) */			return 0;
1317: /* MUTANT (rep_const) */			return 1;
1317: /* MUTANT (rep_const) */			return ((-1)+1);
1317: /* MUTANT (rep_const) */			return ((-1)-1);
1319: /* MUTANT (rep_const) */		endPlayed(state, 0);
1319: /* MUTANT (rep_const) */		endPlayed(state, -1);
1319: /* MUTANT (rep_const) */		endPlayed(state, ((1)+1));
1320: /* MUTANT (del_stmt) */ /* 		return 0; */ 
1320: /* MUTANT (rep_const) */		return 1;
1320: /* MUTANT (rep_const) */		return -1;
1324: /* MUTANT (rep_const) */	return 0;
1324: /* MUTANT (rep_const) */	return 1;
1324: /* MUTANT (rep_const) */	return ((-1)+1);
1324: /* MUTANT (rep_const) */	return ((-1)-1);
1331: /* MUTANT (rep_op) */	if (trashFlag <= 1)
1331: /* MUTANT (rep_op) */	if (trashFlag > 1)
1331: /* MUTANT (rep_op) */	if (trashFlag >= 1)
1331: /* MUTANT (rep_op) */	if (trashFlag == 1)
1331: /* MUTANT (rep_op) */	if (trashFlag != 1)
1331: /* MUTANT (rep_const) */	if (trashFlag < 0)
1331: /* MUTANT (rep_const) */	if (trashFlag < -1)
1331: /* MUTANT (rep_const) */	if (trashFlag < ((1)+1))
1331: /* MUTANT (negate) */	if(! (trashFlag < 1))
1334: /* MUTANT (del_stmt) */ /* 		state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][handPos]; */ 
1335: /* MUTANT (del_stmt) */ /* 		state->discardCount[currentPlayer]++; */ 
1335: /* MUTANT (rep_op) */		state->discardCount[currentPlayer]--;
1339: /* MUTANT (rep_const) */	state->hand[currentPlayer][handPos] = 0;
1339: /* MUTANT (rep_const) */	state->hand[currentPlayer][handPos] = 1;
1339: /* MUTANT (rep_const) */	state->hand[currentPlayer][handPos] = ((-1)+1);
1339: /* MUTANT (rep_const) */	state->hand[currentPlayer][handPos] = ((-1)-1);
1342: /* MUTANT (rep_op) */	if (handPos != (state->handCount[currentPlayer] - 1))   //last card in hand array is played
1342: /* MUTANT (rep_const) */	if (handPos == (state->handCount[currentPlayer] - 0))   //last card in hand array is played
1342: /* MUTANT (rep_const) */	if (handPos == (state->handCount[currentPlayer] - -1))   //last card in hand array is played
1342: /* MUTANT (rep_const) */	if (handPos == (state->handCount[currentPlayer] - ((1)+1)))   //last card in hand array is played
1342: /* MUTANT (negate) */	if(! (handPos == (state->handCount[currentPlayer] - 1)))   //last card in hand array is played
1345: /* MUTANT (del_stmt) */ /* 		state->handCount[currentPlayer]--; */ 
1345: /* MUTANT (rep_op) */		state->handCount[currentPlayer]++;
1347: /* MUTANT (rep_op) */	else if (state->handCount[currentPlayer] != 1) //only one card in hand
1347: /* MUTANT (rep_const) */	else if (state->handCount[currentPlayer] == 0) //only one card in hand
1347: /* MUTANT (rep_const) */	else if (state->handCount[currentPlayer] == -1) //only one card in hand
1347: /* MUTANT (rep_const) */	else if (state->handCount[currentPlayer] == ((1)+1)) //only one card in hand
1347: /* MUTANT (negate) */	else if(! (state->handCount[currentPlayer] == 1)) //only one card in hand
1350: /* MUTANT (del_stmt) */ /* 		state->handCount[currentPlayer]--; */ 
1350: /* MUTANT (rep_op) */		state->handCount[currentPlayer]++;
1355: /* MUTANT (del_stmt) */ /* 		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)]; */ 
1355: /* MUTANT (rep_const) */		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 0)];
1355: /* MUTANT (rep_const) */		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - -1)];
1355: /* MUTANT (rep_const) */		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - ((1)+1))];
1357: /* MUTANT (del_stmt) */ /* 		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1; */ 
1357: /* MUTANT (rep_const) */		state->hand[currentPlayer][state->handCount[currentPlayer] - 0] = -1;
1357: /* MUTANT (rep_const) */		state->hand[currentPlayer][state->handCount[currentPlayer] - -1] = -1;
1357: /* MUTANT (rep_const) */		state->hand[currentPlayer][state->handCount[currentPlayer] - ((1)+1)] = -1;
1357: /* MUTANT (rep_const) */		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = 0;
1357: /* MUTANT (rep_const) */		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = 1;
1357: /* MUTANT (rep_const) */		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = ((-1)+1);
1357: /* MUTANT (rep_const) */		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = ((-1)-1);
1359: /* MUTANT (del_stmt) */ /* 		state->handCount[currentPlayer]--; */ 
1359: /* MUTANT (rep_op) */		state->handCount[currentPlayer]++;
1362: /* MUTANT (rep_const) */	return 1;
1362: /* MUTANT (rep_const) */	return -1;
1370: /* MUTANT (rep_op) */	if (supplyCount(supplyPos, state) <= 1)
1370: /* MUTANT (rep_op) */	if (supplyCount(supplyPos, state) > 1)
1370: /* MUTANT (rep_op) */	if (supplyCount(supplyPos, state) >= 1)
1370: /* MUTANT (rep_op) */	if (supplyCount(supplyPos, state) == 1)
1370: /* MUTANT (rep_op) */	if (supplyCount(supplyPos, state) != 1)
1370: /* MUTANT (rep_const) */	if (supplyCount(supplyPos, state) < 0)
1370: /* MUTANT (rep_const) */	if (supplyCount(supplyPos, state) < -1)
1370: /* MUTANT (rep_const) */	if (supplyCount(supplyPos, state) < ((1)+1))
1370: /* MUTANT (negate) */	if(! (supplyCount(supplyPos, state) < 1))
1372: /* MUTANT (del_stmt) */ /* 		return -1; */ 
1372: /* MUTANT (rep_const) */		return 0;
1372: /* MUTANT (rep_const) */		return 1;
1372: /* MUTANT (rep_const) */		return ((-1)+1);
1372: /* MUTANT (rep_const) */		return ((-1)-1);
1380: /* MUTANT (rep_op) */	if (toFlag != 1)
1380: /* MUTANT (rep_const) */	if (toFlag == 0)
1380: /* MUTANT (rep_const) */	if (toFlag == -1)
1380: /* MUTANT (rep_const) */	if (toFlag == ((1)+1))
1380: /* MUTANT (negate) */	if(! (toFlag == 1))
1382: /* MUTANT (del_stmt) */ /* 		state->deck[player][state->deckCount[player]] = supplyPos; */ 
1383: /* MUTANT (del_stmt) */ /* 		state->deckCount[player]++; */ 
1383: /* MUTANT (rep_op) */		state->deckCount[player]--;
1385: /* MUTANT (rep_op) */	else if (toFlag != 2)
1385: /* MUTANT (rep_const) */	else if (toFlag == 0)
1385: /* MUTANT (rep_const) */	else if (toFlag == 1)
1385: /* MUTANT (rep_const) */	else if (toFlag == -1)
1385: /* MUTANT (rep_const) */	else if (toFlag == ((2)+1))
1385: /* MUTANT (rep_const) */	else if (toFlag == ((2)-1))
1385: /* MUTANT (negate) */	else if(! (toFlag == 2))
1387: /* MUTANT (del_stmt) */ /* 		state->hand[player][state->handCount[player]] = supplyPos; */ 
1388: /* MUTANT (del_stmt) */ /* 		state->handCount[player]++; */ 
1388: /* MUTANT (rep_op) */		state->handCount[player]--;
1392: /* MUTANT (del_stmt) */ /* 		state->discard[player][state->discardCount[player]] = supplyPos; */ 
1393: /* MUTANT (del_stmt) */ /* 		state->discardCount[player]++; */ 
1393: /* MUTANT (rep_op) */		state->discardCount[player]--;
1397: /* MUTANT (rep_op) */	state->supplyCount[supplyPos]++;
1399: /* MUTANT (del_stmt) */ /* 	return 0; */ 
1399: /* MUTANT (rep_const) */	return 1;
1399: /* MUTANT (rep_const) */	return -1;
1404: /* MUTANT (del_stmt) */ /* 	int i; */ 
1405: /* MUTANT (del_stmt) */ /* 	static int cumulative = 0; */ 
1405: /* MUTANT (rep_const) */	static int cumulative = 1;
1405: /* MUTANT (rep_const) */	static int cumulative = -1;
1406: /* MUTANT (del_stmt) */ /* 	static int lastPlayer = -1; */ 
1406: /* MUTANT (rep_const) */	static int lastPlayer = 0;
1406: /* MUTANT (rep_const) */	static int lastPlayer = 1;
1406: /* MUTANT (rep_const) */	static int lastPlayer = ((-1)+1);
1406: /* MUTANT (rep_const) */	static int lastPlayer = ((-1)-1);
1408: /* MUTANT (rep_op) */	if (lastPlayer != player) {
1408: /* MUTANT (negate) */	if(! (lastPlayer == player)) {
1409: /* MUTANT (del_stmt) */ /* 		cumulative += bonus; */ 
1409: /* MUTANT (rep_op) */		cumulative -= bonus;
1409: /* MUTANT (rep_op) */		cumulative *= bonus;
1409: /* MUTANT (rep_op) */		cumulative %= bonus;
1412: /* MUTANT (del_stmt) */ /* 		cumulative = bonus; */ 
1413: /* MUTANT (del_stmt) */ /* 		lastPlayer = player; */ 
1417: /* MUTANT (rep_const) */	state->coins = 1;
1417: /* MUTANT (rep_const) */	state->coins = -1;
1420: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[player]; i++)
1420: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[player]; i++)
1420: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[player]; i++)
1420: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[player]; i++)
1420: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[player]; i++)
1420: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[player]; i--)
1420: /* MUTANT (rep_const) */	for (i = 1; i < state->handCount[player]; i++)
1420: /* MUTANT (rep_const) */	for (i = -1; i < state->handCount[player]; i++)
1422: /* MUTANT (rep_op) */		if (state->hand[player][i] != copper)
1422: /* MUTANT (negate) */		if(! (state->hand[player][i] == copper))
1424: /* MUTANT (del_stmt) */ /* 			state->coins += 1; */ 
1424: /* MUTANT (rep_op) */			state->coins -= 1;
1424: /* MUTANT (rep_op) */			state->coins *= 1;
1424: /* MUTANT (rep_op) */			state->coins %= 1;
1424: /* MUTANT (rep_const) */			state->coins += 0;
1424: /* MUTANT (rep_const) */			state->coins += -1;
1424: /* MUTANT (rep_const) */			state->coins += ((1)+1);
1426: /* MUTANT (rep_op) */		else if (state->hand[player][i] != silver)
1426: /* MUTANT (negate) */		else if(! (state->hand[player][i] == silver))
1428: /* MUTANT (del_stmt) */ /* 			state->coins += 2; */ 
1428: /* MUTANT (rep_op) */			state->coins -= 2;
1428: /* MUTANT (rep_op) */			state->coins *= 2;
1428: /* MUTANT (rep_op) */			state->coins %= 2;
1428: /* MUTANT (rep_const) */			state->coins += 0;
1428: /* MUTANT (rep_const) */			state->coins += 1;
1428: /* MUTANT (rep_const) */			state->coins += -1;
1428: /* MUTANT (rep_const) */			state->coins += ((2)+1);
1428: /* MUTANT (rep_const) */			state->coins += ((2)-1);
1430: /* MUTANT (rep_op) */		else if (state->hand[player][i] != gold)
1430: /* MUTANT (negate) */		else if(! (state->hand[player][i] == gold))
1432: /* MUTANT (del_stmt) */ /* 			state->coins += 3; */ 
1432: /* MUTANT (rep_op) */			state->coins -= 3;
1432: /* MUTANT (rep_op) */			state->coins *= 3;
1432: /* MUTANT (rep_op) */			state->coins %= 3;
1432: /* MUTANT (rep_const) */			state->coins += 0;
1432: /* MUTANT (rep_const) */			state->coins += 1;
1432: /* MUTANT (rep_const) */			state->coins += -1;
1432: /* MUTANT (rep_const) */			state->coins += ((3)+1);
1432: /* MUTANT (rep_const) */			state->coins += ((3)-1);
1437: /* MUTANT (rep_op) */	state->coins -= cumulative;
1437: /* MUTANT (rep_op) */	state->coins *= cumulative;
1437: /* MUTANT (rep_op) */	state->coins %= cumulative;
1439: /* MUTANT (del_stmt) */ /* 	return 0; */ 
1439: /* MUTANT (rep_const) */	return 1;
1439: /* MUTANT (rep_const) */	return -1;
